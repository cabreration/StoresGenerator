
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 16 16:18:02 CST 2018
//----------------------------------------------------

package AGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import Logica.Producto;
import Logica.Tienda;
import Logica.Data;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 16 16:18:02 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\005" +
    "\005\000\002\006\006\000\002\007\005\000\002\010\006" +
    "\000\002\011\005\000\002\012\006\000\002\013\005\000" +
    "\002\014\006\000\002\004\003\000\002\004\003\000\002" +
    "\015\014\000\002\015\014\000\002\017\010\000\002\020" +
    "\006\000\002\016\011\000\002\022\005\000\002\023\006" +
    "\000\002\021\011\000\002\025\010\000\002\026\006\000" +
    "\002\024\011\000\002\030\010\000\002\031\006\000\002" +
    "\027\011\000\002\033\013\000\002\034\005\000\002\035" +
    "\006\000\002\032\011\000\002\037\013\000\002\036\011" +
    "\000\002\041\013\000\002\040\011\000\002\043\005\000" +
    "\002\044\006\000\002\045\005\000\002\046\006\000\002" +
    "\042\011\000\002\050\005\000\002\051\006\000\002\052" +
    "\005\000\002\053\006\000\002\056\005\000\002\057\006" +
    "\000\002\054\005\000\002\055\006\000\002\062\005\000" +
    "\002\063\006\000\002\060\005\000\002\061\006\000\002" +
    "\064\023\000\002\065\004\000\002\065\003\000\002\047" +
    "\007\000\002\067\005\000\002\070\006\000\002\071\005" +
    "\000\002\072\006\000\002\073\005\000\002\074\006\000" +
    "\002\075\005\000\002\076\006\000\002\077\005\000\002" +
    "\100\006\000\002\103\005\000\002\104\006\000\002\101" +
    "\034\000\002\102\004\000\002\102\003\000\002\066\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\010\002\ufffe\003\015\004\005\001\002\000" +
    "\004\002\ufff4\001\002\000\004\005\u0147\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\ufff7\001\002\000\004\002" +
    "\u0146\001\002\000\004\002\ufffd\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufff5\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufffe\003\015\004\005\001\002\000\004" +
    "\002\ufff6\001\002\000\004\002\ufff3\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\ufff8\001\002\000\004\004\027" +
    "\001\002\000\004\002\ufffb\001\002\000\004\004\u011d\001" +
    "\002\000\004\004\u010d\001\002\000\004\004\357\001\002" +
    "\000\014\006\350\016\143\021\275\023\352\025\351\001" +
    "\002\000\004\004\131\001\002\000\004\004\034\001\002" +
    "\000\006\012\036\013\040\001\002\000\006\012\036\013" +
    "\040\001\002\000\010\014\062\017\061\020\060\001\002" +
    "\000\006\012\036\013\040\001\002\000\004\004\uffea\001" +
    "\002\000\004\004\041\001\002\000\004\004\uffe9\001\002" +
    "\000\004\014\055\001\002\000\004\004\043\001\002\000" +
    "\004\021\052\001\002\000\004\004\046\001\002\000\004" +
    "\002\uffd7\001\002\000\004\005\047\001\002\000\004\011" +
    "\050\001\002\000\004\004\051\001\002\000\004\002\ufff1" +
    "\001\002\000\004\011\053\001\002\000\004\004\054\001" +
    "\002\000\004\004\uffd8\001\002\000\004\011\056\001\002" +
    "\000\004\004\057\001\002\000\004\004\uffe5\001\002\000" +
    "\004\007\101\001\002\000\004\007\072\001\002\000\004" +
    "\007\063\001\002\000\004\015\064\001\002\000\004\041" +
    "\065\001\002\000\004\022\066\001\002\000\004\015\067" +
    "\001\002\000\004\041\070\001\002\000\004\004\071\001" +
    "\002\000\006\012\uffda\013\uffda\001\002\000\004\015\073" +
    "\001\002\000\004\041\074\001\002\000\004\022\075\001" +
    "\002\000\004\015\076\001\002\000\004\041\077\001\002" +
    "\000\004\004\100\001\002\000\006\012\uffd6\013\uffd6\001" +
    "\002\000\004\015\102\001\002\000\004\041\103\001\002" +
    "\000\004\022\104\001\002\000\004\015\105\001\002\000" +
    "\004\041\106\001\002\000\004\004\107\001\002\000\006" +
    "\012\uffd4\013\uffd4\001\002\000\004\004\111\001\002\000" +
    "\004\017\115\001\002\000\004\004\043\001\002\000\004" +
    "\004\046\001\002\000\004\002\uffd5\001\002\000\004\011" +
    "\116\001\002\000\004\004\117\001\002\000\004\004\uffdf" +
    "\001\002\000\004\004\121\001\002\000\004\020\125\001" +
    "\002\000\004\004\043\001\002\000\004\004\046\001\002" +
    "\000\004\002\uffd3\001\002\000\004\011\126\001\002\000" +
    "\004\004\127\001\002\000\004\004\uffdc\001\002\000\004" +
    "\004\150\001\002\000\006\016\143\021\275\001\002\000" +
    "\004\004\uffbf\001\002\000\004\004\271\001\002\000\004" +
    "\004\uffaf\001\002\000\004\004\150\001\002\000\004\004" +
    "\137\001\002\000\006\016\143\025\144\001\002\000\004" +
    "\004\046\001\002\000\004\004\uffc0\001\002\000\004\002" +
    "\uffbe\001\002\000\004\004\147\001\002\000\004\011\145" +
    "\001\002\000\004\004\146\001\002\000\004\004\uffcc\001" +
    "\002\000\004\004\uffe3\001\002\000\004\027\267\001\002" +
    "\000\004\041\152\001\002\000\004\004\153\001\002\000" +
    "\004\027\264\001\002\000\004\004\155\001\002\000\004" +
    "\030\262\001\002\000\004\040\157\001\002\000\004\004" +
    "\160\001\002\000\004\030\257\001\002\000\004\004\163" +
    "\001\002\000\004\041\166\001\002\000\004\035\164\001" +
    "\002\000\004\004\165\001\002\000\004\041\uffbd\001\002" +
    "\000\004\004\167\001\002\000\004\035\254\001\002\000" +
    "\004\004\171\001\002\000\004\032\252\001\002\000\004" +
    "\040\173\001\002\000\004\004\174\001\002\000\004\032" +
    "\247\001\002\000\004\004\176\001\002\000\004\033\245" +
    "\001\002\000\004\040\200\001\002\000\004\004\201\001" +
    "\002\000\004\033\242\001\002\000\004\004\203\001\002" +
    "\000\004\034\240\001\002\000\004\041\205\001\002\000" +
    "\004\004\206\001\002\000\004\034\235\001\002\000\004" +
    "\004\210\001\002\000\004\022\233\001\002\000\004\041" +
    "\212\001\002\000\004\004\213\001\002\000\004\022\230" +
    "\001\002\000\004\004\216\001\002\000\004\041\221\001" +
    "\002\000\004\037\217\001\002\000\004\004\220\001\002" +
    "\000\004\041\uffb3\001\002\000\004\004\222\001\002\000" +
    "\004\037\225\001\002\000\004\004\043\001\002\000\004" +
    "\004\uffb1\001\002\000\004\011\226\001\002\000\004\004" +
    "\227\001\002\000\004\004\uffb2\001\002\000\004\011\231" +
    "\001\002\000\004\004\232\001\002\000\004\004\uffb4\001" +
    "\002\000\004\004\234\001\002\000\004\041\uffb5\001\002" +
    "\000\004\011\236\001\002\000\004\004\237\001\002\000" +
    "\004\004\uffb8\001\002\000\004\004\241\001\002\000\004" +
    "\041\uffb9\001\002\000\004\011\243\001\002\000\004\004" +
    "\244\001\002\000\004\004\uffb6\001\002\000\004\004\246" +
    "\001\002\000\004\040\uffb7\001\002\000\004\011\250\001" +
    "\002\000\004\004\251\001\002\000\004\004\uffba\001\002" +
    "\000\004\004\253\001\002\000\004\040\uffbb\001\002\000" +
    "\004\011\255\001\002\000\004\004\256\001\002\000\004" +
    "\004\uffbc\001\002\000\004\011\260\001\002\000\004\004" +
    "\261\001\002\000\004\004\uffc8\001\002\000\004\004\263" +
    "\001\002\000\004\040\uffc9\001\002\000\004\011\265\001" +
    "\002\000\004\004\266\001\002\000\004\004\uffca\001\002" +
    "\000\004\004\270\001\002\000\004\041\uffcb\001\002\000" +
    "\006\021\275\025\144\001\002\000\004\004\046\001\002" +
    "\000\004\004\uffb0\001\002\000\004\002\uffae\001\002\000" +
    "\004\004\276\001\002\000\004\004\uffd9\001\002\000\004" +
    "\041\300\001\002\000\004\004\153\001\002\000\004\004" +
    "\302\001\002\000\004\026\346\001\002\000\004\041\304" +
    "\001\002\000\004\004\306\001\002\000\004\004\155\001" +
    "\002\000\004\026\307\001\002\000\004\011\310\001\002" +
    "\000\004\004\311\001\002\000\004\004\uffc6\001\002\000" +
    "\004\040\313\001\002\000\004\004\160\001\002\000\004" +
    "\004\316\001\002\000\004\040\321\001\002\000\004\036" +
    "\317\001\002\000\004\004\320\001\002\000\004\040\uffc3" +
    "\001\002\000\004\004\322\001\002\000\004\036\343\001" +
    "\002\000\004\004\324\001\002\000\004\031\341\001\002" +
    "\000\004\041\326\001\002\000\004\004\327\001\002\000" +
    "\004\031\336\001\002\000\004\004\331\001\002\000\004" +
    "\016\333\001\002\000\004\004\uffc1\001\002\000\004\011" +
    "\334\001\002\000\004\004\335\001\002\000\004\004\uffe2" +
    "\001\002\000\004\011\337\001\002\000\004\004\340\001" +
    "\002\000\004\004\uffc4\001\002\000\004\004\342\001\002" +
    "\000\004\041\uffc5\001\002\000\004\011\344\001\002\000" +
    "\004\004\345\001\002\000\004\004\uffc2\001\002\000\004" +
    "\004\347\001\002\000\004\041\uffc7\001\002\000\004\004" +
    "\355\001\002\000\004\004\354\001\002\000\004\004\353" +
    "\001\002\000\004\004\uffd2\001\002\000\004\004\uffcd\001" +
    "\002\000\004\004\ufff0\001\002\000\006\012\036\013\040" +
    "\001\002\000\010\014\374\017\372\020\373\001\002\000" +
    "\006\012\036\013\040\001\002\000\006\012\036\013\040" +
    "\001\002\000\004\004\041\001\002\000\004\004\331\001" +
    "\002\000\004\004\046\001\002\000\004\002\uffe1\001\002" +
    "\000\004\004\111\001\002\000\004\004\331\001\002\000" +
    "\004\004\046\001\002\000\004\002\uffde\001\002\000\004" +
    "\007\u0105\001\002\000\004\007\u0101\001\002\000\004\007" +
    "\375\001\002\000\004\015\376\001\002\000\004\041\377" +
    "\001\002\000\004\004\u0100\001\002\000\006\012\uffe6\013" +
    "\uffe6\001\002\000\004\015\u0102\001\002\000\004\041\u0103" +
    "\001\002\000\004\004\u0104\001\002\000\006\012\uffdd\013" +
    "\uffdd\001\002\000\004\015\u0106\001\002\000\004\041\u0107" +
    "\001\002\000\004\004\u0108\001\002\000\006\012\uffe0\013" +
    "\uffe0\001\002\000\004\004\121\001\002\000\004\004\331" +
    "\001\002\000\004\004\046\001\002\000\004\002\uffdb\001" +
    "\002\000\004\024\u011b\001\002\000\004\040\u010f\001\002" +
    "\000\004\004\u0110\001\002\000\004\024\u0118\001\002\000" +
    "\004\004\u0112\001\002\000\004\023\u0115\001\002\000\004" +
    "\004\046\001\002\000\004\002\uffce\001\002\000\004\011" +
    "\u0116\001\002\000\004\004\u0117\001\002\000\004\004\uffd1" +
    "\001\002\000\004\011\u0119\001\002\000\004\004\u011a\001" +
    "\002\000\004\004\uffcf\001\002\000\004\004\u011c\001\002" +
    "\000\004\040\uffd0\001\002\000\010\007\u0132\010\u013f\014" +
    "\374\001\002\000\006\012\036\013\040\001\002\000\004" +
    "\041\u0137\001\002\000\006\012\036\013\040\001\002\000" +
    "\004\004\u0122\001\002\000\004\010\u0134\001\002\000\004" +
    "\004\u0124\001\002\000\004\007\u0132\001\002\000\004\041" +
    "\u0126\001\002\000\004\004\u0128\001\002\000\004\004\u012c" +
    "\001\002\000\004\007\u0129\001\002\000\004\011\u012a\001" +
    "\002\000\004\004\u012b\001\002\000\004\004\uffed\001\002" +
    "\000\004\006\u012f\001\002\000\004\004\046\001\002\000" +
    "\004\002\uffe7\001\002\000\004\011\u0130\001\002\000\004" +
    "\004\u0131\001\002\000\004\004\uffef\001\002\000\004\004" +
    "\u0133\001\002\000\004\041\uffee\001\002\000\004\011\u0135" +
    "\001\002\000\004\004\u0136\001\002\000\004\004\uffeb\001" +
    "\002\000\004\004\u0128\001\002\000\004\004\u0139\001\002" +
    "\000\004\010\u013f\001\002\000\006\012\036\013\040\001" +
    "\002\000\004\004\u0122\001\002\000\004\004\u012c\001\002" +
    "\000\004\004\046\001\002\000\004\002\uffe8\001\002\000" +
    "\004\004\u0140\001\002\000\006\012\uffec\013\uffec\001\002" +
    "\000\004\004\041\001\002\000\004\004\u012c\001\002\000" +
    "\004\004\046\001\002\000\004\002\uffe4\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002\000\004\004" +
    "\u0148\001\002\000\004\004\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\036\002\007\003\013\005\021\015\010\016" +
    "\011\021\022\024\017\027\005\032\020\036\006\040\015" +
    "\042\012\047\003\066\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\u0144\003\013\005\021" +
    "\015\010\016\011\021\022\024\017\027\005\032\020\036" +
    "\006\040\015\042\012\047\003\066\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\023\022\025\034\030\043\024\050\027" +
    "\001\001\000\002\001\001\000\010\011\u011e\013\u011f\017" +
    "\u011d\001\001\000\004\045\u010d\001\001\000\010\017\360" +
    "\025\357\030\355\001\001\000\002\001\001\000\016\022" +
    "\127\034\134\064\131\065\135\101\133\102\132\001\001" +
    "\000\010\033\034\037\032\041\031\001\001\000\004\004" +
    "\117\001\001\000\004\004\107\001\001\000\002\001\001" +
    "\000\004\004\036\001\001\000\002\001\001\000\004\020" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\043\001\001\000\002\001\001\000\004\006\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\111\001\001\000\002\001\001\000\004\035\112\001" +
    "\001\000\004\006\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\121\001\001\000\002\001\001\000\004\035\122\001\001" +
    "\000\004\006\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\134\051\271\101\272\001\001\000\002\001\001\000\004" +
    "\052\150\001\001\000\010\022\127\051\137\064\140\001" +
    "\001\000\002\001\001\000\004\006\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\153\001" +
    "\001\000\002\001\001\000\004\056\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\160\001\001\000" +
    "\002\001\001\000\004\067\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\167\001\001\000\002\001\001\000\004\071\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\174\001\001\000\002\001\001\000\004\075\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\201\001" +
    "\001\000\002\001\001\000\004\073\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\206\001\001\000" +
    "\002\001\001\000\004\077\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\213\001\001\000\002\001" +
    "\001\000\004\103\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\222\001\001\000\002\001\001\000\004\035\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\300" +
    "\001\001\000\004\054\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\304\001\001\000\004\056\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\313" +
    "\001\001\000\004\060\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\322\001\001\000\002\001\001\000\004\062\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\327" +
    "\001\001\000\002\001\001\000\004\023\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0108\001\001\000\002" +
    "\001\001\000\004\004\365\001\001\000\004\004\361\001" +
    "\001\000\004\020\362\001\001\000\004\023\363\001\001" +
    "\000\004\006\364\001\001\000\002\001\001\000\004\026" +
    "\366\001\001\000\004\023\367\001\001\000\004\006\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u0109\001\001\000\004\023\u010a\001\001" +
    "\000\004\006\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u0110\001\001\000\002" +
    "\001\001\000\004\044\u0112\001\001\000\002\001\001\000" +
    "\004\006\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0140\001\001\000" +
    "\002\001\001\000\004\004\u0120\001\001\000\004\014\u0122" +
    "\001\001\000\002\001\001\000\004\011\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0126\001\001" +
    "\000\004\010\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u012d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u0137\001\001\000\004\013\u0139" +
    "\001\001\000\002\001\001\000\004\004\u013a\001\001\000" +
    "\004\014\u013b\001\001\000\004\010\u013c\001\001\000\004" +
    "\006\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0141\001\001\000\004\010\u0142" +
    "\001\001\000\004\006\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<ErrorC> errores = new ArrayList<>();
    public boolean logIn = false;
    public int usuarioActual = 0;
    public boolean registroTienda = false;
    public boolean modTienda = false;
    public boolean delTienda = false;
    public boolean registroProducto = false;
    public boolean modProducto = false;
    public boolean delProducto = false;
    Tienda tiendaAuxiliar = new Tienda();
    Producto productoAuxiliar = new Producto();
    public ArrayList<Producto> productos = new ArrayList<>();

    public void syntax_error(Symbol s)
    {   
         if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        System.out.println("Fila: " + fila + " Columna: " + columna + " Lexema: " + lexema);
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        System.out.println("Fila: " + fila + " Columna: " + columna + " Lexema: " + lexema);
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


        public void registrarTienda() {
            Data.tiendas.add(parser.tiendaAuxiliar);
            parser.tiendaAuxiliar = new Tienda();
        }

        public void registrarProducto() {
            parser.productos.add(parser.productoAuxiliar);
            parser.productoAuxiliar = new Producto();
        }

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_PRODUCTOS ::= O_REPLY O_LISTA PRODUCTOS C_LISTA C_REPLY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PRODUCTOS",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRODUCTOS ::= PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRODUCTOS",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRODUCTOS ::= PRODUCTOS PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRODUCTOS",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRODUCTO ::= O_PRODUCTO O_CODIGO numero C_CODIGO O_NOMBRE cadena C_NOMBRE O_CANTIDAD numero C_CANTIDAD O_MARCA cadena C_MARCA O_COLOR cadena C_COLOR O_SIZE numero C_SIZE O_SUCURSAL numero C_SUCURSAL O_PRECIO numero C_PRECIO C_PRODUCTO 
            {
              Object RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)).value;
		int brandleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int brandright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object brand = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int colrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int colrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object colr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sucursalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sucursalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object sucursal = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object pre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
    parser.productoAuxiliar.setCodigo(Integer.parseInt(String.valueOf(code)));
    parser.productoAuxiliar.setNombre(String.valueOf(name));
    parser.productoAuxiliar.setCantidad(Integer.parseInt(String.valueOf(cant)));
    parser.productoAuxiliar.setMarca(String.valueOf(brand));
    parser.productoAuxiliar.setColor(String.valueOf(colr));
    parser.productoAuxiliar.setSize(Double.parseDouble(String.valueOf(size)));
    parser.productoAuxiliar.setSucursal_tienda(Integer.parseInt(String.valueOf(sucursal)));
    parser.productoAuxiliar.setPrecio(Double.parseDouble(String.valueOf(pre)));
    registrarProducto();

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRODUCTO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-25)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // C_PRECIO ::= dolar precio menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PRECIO",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // O_PRECIO ::= dolar precio dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PRECIO",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // C_SUCURSAL ::= dolar sucursal menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SUCURSAL",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // O_SUCURSAL ::= dolar sucursal dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SUCURSAL",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // C_COLOR ::= dolar color menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_COLOR",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // O_COLOR ::= dolar color dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_COLOR",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // C_SIZE ::= dolar size menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SIZE",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // O_SIZE ::= dolar size dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SIZE",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // C_MARCA ::= dolar marca menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_MARCA",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // O_MARCA ::= dolar marca dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_MARCA",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // C_CANTIDAD ::= dolar cantidad menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CANTIDAD",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // O_CANTIDAD ::= dolar cantidad dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CANTIDAD",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_TIENDAS ::= O_REPLY O_LISTA TIENDAS C_LISTA C_REPLY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_TIENDAS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIENDAS ::= TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIENDAS",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIENDAS ::= TIENDAS TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIENDAS",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIENDA ::= O_TIENDA O_CODIGO numero C_CODIGO O_PROPIETARIO numero C_PROPIETARIO O_NOMBRE cadena C_NOMBRE O_DIRECCION cadena C_DIRECCION O_TELEFONO numero C_TELEFONO C_TIENDA 
            {
              Object RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tel = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
    parser.tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod)));
    parser.tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(prop)));
    parser.tiendaAuxiliar.setNombre((String.valueOf(name)).substring(1, (String.valueOf(name)).length()-1));
    parser.tiendaAuxiliar.setDireccion((String.valueOf(dir)).substring(1, (String.valueOf(dir)).length()-1));
    parser.tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel)));
    registrarTienda();

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIENDA",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-16)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // C_DIRECCION ::= dolar direccion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_DIRECCION",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // O_DIRECCION ::= dolar direccion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DIRECCION",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // C_TELEFONO ::= dolar telefono menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TELEFONO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // O_TELEFONO ::= dolar telefono dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TELEFONO",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // C_PROPIETARIO ::= dolar propietario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PROPIETARIO",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // O_PROPIETARIO ::= dolar propietario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PROPIETARIO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // C_NOMBRE ::= dolar nombre menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_NOMBRE",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // O_NOMBRE ::= dolar nombre dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_NOMBRE",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // C_CODIGO ::= dolar codigo menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CODIGO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // O_CODIGO ::= dolar codigo dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CODIGO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // C_LISTA ::= dolar lista menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_LISTA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // O_LISTA ::= dolar lista dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_LISTA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ERRORLINE ::= O_REPLY O_ERROR O_DESCRIPCION cadena C_DESCRIPCION C_ERROR C_REPLY 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
    JOptionPane.showMessageDialog(null, String.valueOf(er), "Stores Generator", JOptionPane.ERROR_MESSAGE);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERRORLINE",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // C_DESCRIPCION ::= dolar descripcion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_DESCRIPCION",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // O_DESCRIPCION ::= dolar descripcion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DESCRIPCION",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // C_ERROR ::= dolar errorT menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_ERROR",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // O_ERROR ::= dolar errorT dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_ERROR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEL_PROD ::= O_REPLY O_PRODUCTO O_DELPROD BOOL C_DEL C_PRODUCTO C_REPLY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEL_PROD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // O_DELPROD ::= dolar eliminar id asignacion numero sucursal asignacion numero dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DELPROD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MOD_PROD ::= O_REPLY O_PRODUCTO O_MODPROD BOOL C_MOD C_PRODUCTO C_REPLY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_PROD",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // O_MODPROD ::= dolar modificar id asignacion numero sucursal asignacion numero dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_MODPROD",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REG_PROD ::= O_REPLY O_PRODUCTO O_PROD BOOL C_REGISTRO C_PRODUCTO C_REPLY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REG_PROD",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // C_PRODUCTO ::= dolar producto menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PRODUCTO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // O_PRODUCTO ::= dolar producto dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PRODUCTO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // O_PROD ::= dolar registro id asignacion numero sucursal asignacion numero dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PROD",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DELT ::= O_REPLY O_TIENDA O_DEL BOOL C_DEL C_TIENDA C_REPLY 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 parser.delTienda = (boolean)bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELT",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // C_DEL ::= dolar eliminar menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_DEL",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // O_DEL ::= dolar eliminar id asignacion numero dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DEL",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MODT ::= O_REPLY O_TIENDA O_MOD BOOL C_MOD C_TIENDA C_REPLY 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 parser.modTienda = (boolean)bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C_MOD ::= dolar modificar menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_MOD",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // O_MOD ::= dolar modificar id asignacion numero dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_MOD",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SIGNUPT ::= O_REPLY O_TIENDA O_REGISTRO BOOL C_REGISTRO C_TIENDA C_REPLY 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 parser.registroTienda = (boolean)bool; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNUPT",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // C_TIENDA ::= dolar tienda menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TIENDA",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // O_TIENDA ::= dolar tienda dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TIENDA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIGNUP ::= O_REPLY O_USUARIO O_REGISTRO BOOL C_REGISTRO C_USUARIO C_REPLY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNUP",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // C_REGISTRO ::= dolar registro menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_REGISTRO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // O_REGISTRO ::= dolar registro id asignacion numero dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_REGISTRO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LOGIN ::= O_REPLY O_USUARIO O_ACCESO BOOL C_ACCESO O_ID numero C_ID C_USUARIO C_REPLY 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 parser.logIn = (boolean)bool; parser.usuarioActual = Integer.parseInt(String.valueOf(num)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LOGIN ::= O_REPLY O_USUARIO O_ID numero C_ID O_ACCESO BOOL C_ACCESO C_USUARIO C_REPLY 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 parser.logIn = (boolean)bool; parser.usuarioActual = Integer.parseInt(String.valueOf(num)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BOOL ::= falso 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOL",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BOOL ::= verdadero 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOL",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C_ACCESO ::= dolar acceso menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_ACCESO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // O_ACCESO ::= dolar acceso dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_ACCESO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C_ID ::= dolar id menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_ID",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // O_ID ::= dolar id dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_ID",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C_USUARIO ::= dolar usuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_USUARIO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O_USUARIO ::= dolar usuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_USUARIO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C_REPLY ::= dolar respuesta menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_REPLY",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // O_REPLY ::= dolar respuesta dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_REPLY",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RESPUESTAS ::= LISTA_PRODUCTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RESPUESTAS ::= LISTA_TIENDAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RESPUESTAS ::= ERRORLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESPUESTAS ::= DEL_PROD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RESPUESTAS ::= MOD_PROD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RESPUESTAS ::= REG_PROD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RESPUESTAS ::= DELT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESPUESTAS ::= MODT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RESPUESTAS ::= SIGNUPT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RESPUESTAS ::= SIGNUP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RESPUESTAS ::= LOGIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESPUESTAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error INICIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= RESPUESTAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

