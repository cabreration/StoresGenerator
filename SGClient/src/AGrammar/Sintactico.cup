
package AGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import Logica.Producto;
import Logica.Tienda;
import Logica.Data;

parser code  
{:
    public ArrayList<ErrorC> errores = new ArrayList<>();
    public boolean logIn = false;
    public int usuarioActual = 0;
    public boolean registroTienda = false;
    public boolean modTienda = false;
    public boolean delTienda = false;
    public boolean registroProducto = false;
    public boolean modProducto = false;
    public boolean delProducto = false;
    Tienda tiendaAuxiliar = new Tienda();
    Producto productoAuxiliar = new Producto();
    public ArrayList<Producto> productos = new ArrayList<>();

    public void syntax_error(Symbol s)
    {   
         if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        System.out.println("Fila: " + fila + " Columna: " + columna + " Lexema: " + lexema);
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        System.out.println("Fila: " + fila + " Columna: " + columna + " Lexema: " + lexema);
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}
:}

action code 
{:
        public void registrarTienda() {
            Data.tiendas.add(parser.tiendaAuxiliar);
            parser.tiendaAuxiliar = new Tienda();
        }

        public void registrarProducto() {
            parser.productos.add(parser.productoAuxiliar);
            parser.productoAuxiliar = new Producto();
        }
:}

terminal dolar, respuesta, usuario, id, acceso, menos, verdadero, falso, registro, asignacion, tienda, modificar, eliminar, producto, sucursal, errorT;
terminal descripcion, lista, propietario, codigo, nombre, telefono, marca, color, size, cantidad, direccion, precio;
terminal cadena, numero; 

non terminal INICIO, RESPUESTAS, BOOL;
non terminal O_REPLY, C_REPLY, O_USUARIO, C_USUARIO, O_ID, C_ID, O_ACCESO, C_ACCESO, LOGIN;
non terminal SIGNUP, O_REGISTRO, C_REGISTRO;
non terminal SIGNUPT, O_TIENDA, C_TIENDA;
non terminal MODT, O_MOD, C_MOD;
non terminal DELT, O_DEL, C_DEL;
non terminal REG_PROD, O_PROD, O_PRODUCTO, C_PRODUCTO;
non terminal MOD_PROD, O_MODPROD;
non terminal DEL_PROD, O_DELPROD;
non terminal ERRORLINE, O_ERROR, C_ERROR, O_DESCRIPCION, C_DESCRIPCION;
non terminal LISTA_TIENDAS, O_LISTA, C_LISTA, O_CODIGO, C_CODIGO, O_PROPIETARIO, C_PROPIETARIO, O_NOMBRE, C_NOMBRE;
non terminal O_DIRECCION, C_DIRECCION, O_TELEFONO, C_TELEFONO, TIENDA, TIENDAS;
non terminal LISTA_PRODUCTOS, O_CANTIDAD, C_CANTIDAD, O_MARCA, C_MARCA, O_SIZE, C_SIZE, O_COLOR, C_COLOR, O_SUCURSAL, C_SUCURSAL;
non terminal PRODUCTO, PRODUCTOS, O_PRECIO, C_PRECIO;


start with INICIO;

INICIO::= RESPUESTAS
| error INICIO
|
;

RESPUESTAS::= LOGIN //done
|             SIGNUP //no lo voy a hacer
|             SIGNUPT //no lo he probado
|             MODT //done
|             DELT //no lo he probado
|             REG_PROD
|             MOD_PROD
|             DEL_PROD
|             ERRORLINE // no lo he probado
|             LISTA_TIENDAS //done
|             LISTA_PRODUCTOS //no lo he probado
;

O_REPLY::= dolar respuesta dolar;

C_REPLY::= dolar respuesta menos dolar;

O_USUARIO::= dolar usuario dolar;

C_USUARIO::= dolar usuario menos dolar;

O_ID::= dolar id dolar;

C_ID::= dolar id menos dolar;

O_ACCESO::= dolar acceso dolar;

C_ACCESO::= dolar acceso menos dolar;

BOOL::= verdadero {: RESULT = true; :}
| falso {: RESULT = false; :};

LOGIN::= O_REPLY O_USUARIO O_ID numero:num C_ID O_ACCESO BOOL:bool C_ACCESO C_USUARIO C_REPLY 
{: parser.logIn = (boolean)bool; parser.usuarioActual = Integer.parseInt(String.valueOf(num)); :}
|        O_REPLY O_USUARIO O_ACCESO BOOL:bool C_ACCESO O_ID numero:num C_ID C_USUARIO C_REPLY 
{: parser.logIn = (boolean)bool; parser.usuarioActual = Integer.parseInt(String.valueOf(num)); :}
;

O_REGISTRO::= dolar registro id asignacion numero dolar;

C_REGISTRO::= dolar registro menos dolar;

SIGNUP::= O_REPLY O_USUARIO O_REGISTRO BOOL C_REGISTRO C_USUARIO C_REPLY;

O_TIENDA::= dolar tienda dolar;

C_TIENDA::= dolar tienda menos dolar;

SIGNUPT::= O_REPLY O_TIENDA O_REGISTRO BOOL:bool C_REGISTRO C_TIENDA C_REPLY {: parser.registroTienda = (boolean)bool; :};

O_MOD::= dolar modificar id asignacion numero dolar;

C_MOD::= dolar modificar menos dolar;

MODT::= O_REPLY O_TIENDA O_MOD BOOL:bool C_MOD C_TIENDA C_REPLY {: parser.modTienda = (boolean)bool; :};

O_DEL::= dolar eliminar id asignacion numero dolar;

C_DEL::= dolar eliminar menos dolar;

DELT::= O_REPLY O_TIENDA O_DEL BOOL:bool C_DEL C_TIENDA C_REPLY {: parser.delTienda = (boolean)bool; :};

O_PROD::= dolar registro id asignacion numero sucursal asignacion numero dolar;

O_PRODUCTO::= dolar producto dolar;

C_PRODUCTO::= dolar producto menos dolar;

REG_PROD::= O_REPLY O_PRODUCTO O_PROD BOOL C_REGISTRO C_PRODUCTO C_REPLY;

O_MODPROD::= dolar modificar id asignacion numero sucursal asignacion numero dolar;

MOD_PROD::= O_REPLY O_PRODUCTO O_MODPROD BOOL C_MOD C_PRODUCTO C_REPLY;

O_DELPROD::= dolar eliminar id asignacion numero sucursal asignacion numero dolar;

DEL_PROD::= O_REPLY O_PRODUCTO O_DELPROD BOOL C_DEL C_PRODUCTO C_REPLY;

O_ERROR::= dolar errorT dolar;

C_ERROR::= dolar errorT menos dolar;

O_DESCRIPCION::= dolar descripcion dolar;

C_DESCRIPCION::= dolar descripcion menos dolar;

ERRORLINE::= O_REPLY O_ERROR O_DESCRIPCION cadena:er C_DESCRIPCION C_ERROR C_REPLY 
{:
    JOptionPane.showMessageDialog(null, String.valueOf(er), "Stores Generator", JOptionPane.ERROR_MESSAGE);
:}
;

O_LISTA::= dolar lista dolar;

C_LISTA::= dolar lista menos dolar;

O_CODIGO::= dolar codigo dolar;

C_CODIGO::= dolar codigo menos dolar;

O_NOMBRE::= dolar nombre dolar;

C_NOMBRE::= dolar nombre menos dolar;

O_PROPIETARIO::= dolar propietario dolar;

C_PROPIETARIO::= dolar propietario menos dolar;

O_TELEFONO::= dolar telefono dolar;

C_TELEFONO::= dolar telefono menos dolar;

O_DIRECCION::= dolar direccion dolar;

C_DIRECCION::= dolar direccion menos dolar;

TIENDA::= O_TIENDA O_CODIGO numero:cod C_CODIGO O_PROPIETARIO numero:prop C_PROPIETARIO
O_NOMBRE cadena:name C_NOMBRE O_DIRECCION cadena:dir C_DIRECCION O_TELEFONO numero:tel C_TELEFONO C_TIENDA
{:
    parser.tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod)));
    parser.tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(prop)));
    parser.tiendaAuxiliar.setNombre((String.valueOf(name)).substring(1, (String.valueOf(name)).length()-1));
    parser.tiendaAuxiliar.setDireccion((String.valueOf(dir)).substring(1, (String.valueOf(dir)).length()-1));
    parser.tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel)));
    registrarTienda();
:}
;

TIENDAS::= TIENDAS TIENDA
| TIENDA
;

LISTA_TIENDAS::= O_REPLY O_LISTA TIENDAS C_LISTA C_REPLY;

O_CANTIDAD::= dolar cantidad dolar;

C_CANTIDAD::= dolar cantidad menos dolar;

O_MARCA::= dolar marca dolar;

C_MARCA::= dolar marca menos dolar;

O_SIZE::= dolar size dolar;

C_SIZE::= dolar size menos dolar;

O_COLOR::= dolar color dolar;

C_COLOR::= dolar color menos dolar;

O_SUCURSAL::= dolar sucursal dolar;

C_SUCURSAL::= dolar sucursal menos dolar;

O_PRECIO::= dolar precio dolar;

C_PRECIO::= dolar precio menos dolar;

PRODUCTO::= O_PRODUCTO O_CODIGO numero:code C_CODIGO O_NOMBRE cadena:name C_NOMBRE O_CANTIDAD numero:cant C_CANTIDAD O_MARCA cadena:brand C_MARCA
O_COLOR cadena:colr C_COLOR O_SIZE numero:size C_SIZE O_SUCURSAL numero:sucursal C_SUCURSAL O_PRECIO numero:pre C_PRECIO C_PRODUCTO 
{:
    parser.productoAuxiliar.setCodigo(Integer.parseInt(String.valueOf(code)));
    parser.productoAuxiliar.setNombre(String.valueOf(name));
    parser.productoAuxiliar.setCantidad(Integer.parseInt(String.valueOf(cant)));
    parser.productoAuxiliar.setMarca(String.valueOf(brand));
    parser.productoAuxiliar.setColor(String.valueOf(colr));
    parser.productoAuxiliar.setSize(Double.parseDouble(String.valueOf(size)));
    parser.productoAuxiliar.setSucursal_tienda(Integer.parseInt(String.valueOf(sucursal)));
    parser.productoAuxiliar.setPrecio(Double.parseDouble(String.valueOf(pre)));
    registrarProducto();
:}
;

PRODUCTOS::= PRODUCTOS PRODUCTO
| PRODUCTO
;

LISTA_PRODUCTOS::= O_REPLY O_LISTA PRODUCTOS C_LISTA C_REPLY;
