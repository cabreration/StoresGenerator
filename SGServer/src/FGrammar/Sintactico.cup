
package FGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Logica.*;
import sgserver.*;

parser code  
{:
    public ArrayList<ErrorC> errores = new ArrayList<>();

    public void syntax_error(Symbol s)
    {   
        System.out.println(s.value.toString());
         if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        System.out.println(s.value.toString());
        if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {
        System.out.println("error semantico");
    }
:}

action code 
{:
         Usuario usuarioAuxiliar = new Usuario();
         Tienda tiendaAuxiliar = new Tienda();

         public void insertarUsuario() {
            System.out.println("Llegue a insertar usuario");
            try 
            {
                boolean exito = DatosPersistentes.usuarios.agregarUsuario(usuarioAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Usuario registrado: " + usuarioAuxiliar.getNombre());
                //respuesta verdadera
            }
            catch(Exception e) {
                //respuesta falsa
                DatosPersistentes.interfaz.outputLine.append("\n >> Fallo al registrar usuario " + e);
            }
            
            usuarioAuxiliar = new Usuario();
         }

         public void logIn(int id, String clave) {
            System.out.println("Llegue a log in");
            try 
            {
                String exito = DatosPersistentes.usuarios.logIn(id, clave);
                DatosPersistentes.interfaz.outputLine.append("\n >> Bienvenido " + exito);
                ArrayList<Usuario> auxiliar = DatosPersistentes.usuariosLoggueados;
                //respuesta verdadera
            }
            catch(Exception e) {
                //respuesta falsa
                DatosPersistentes.interfaz.outputLine.append("\n >> Fallo al intentar entrar " + e );
            }
         }

         public void registrarTienda() {
            System.out.println("Registrando tienda");
            
            try {
                DatosPersistentes.tiendas.registrarTienda(tiendaAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Tienda Registrada: " + tiendaAuxiliar.getNombre());
            }
            catch(Exception e) {
                DatosPersistentes.interfaz.outputLine.append("\n >> Error al registrar tienda: " + e);
            }

            tiendaAuxiliar = new Tienda();
         }
:}

terminal dolar, peticion, inicioUsuario, id, password, menos, mas, por, sobre, crearUsuario, nombre, apellido, telefono, email, direccion;
terminal tienda, tipo, codigo, propietario, img, raizCuadrada, potencia, cantidad, marca, color, sucursal, size, coma, llaveA, llaveC;
terminal parentesisA, parentesisC, asignacion, producto, obtener;
terminal cadena, numero, clave, correo; 

non terminal INICIO, ACCION, OTRA_ACCION, LISTA, LISTA2;
non terminal LOGIN, O_PETICION, O_INGRESO, O_ID, O_PASSWORD, C_PASSWORD, C_ID, C_INGRESO, C_PETICION, G_ID, G_PASSWORD;
non terminal REGISTRO, O_CREAR, O_NOMBRE, O_APELLIDO, O_TELEFONO, O_DIRECCION, O_EMAIL, C_CREAR, C_NOMBRE, C_APELLIDO, C_TELEFONO, C_DIRECCION;
non terminal C_EMAIL, G_NOMBRE, G_APELLIDO, G_TELEFONO, G_DIRECCION, G_EMAIL, CAMPO_REGISTRO, OTRO_CAMPOR;
non terminal TIENDA, O_TIENDA, C_TIENDA, O_CODIGO, C_CODIGO, O_PROPIETARIO, C_PROPIETARIO, O_IMAGEN, C_IMAGEN, G_CODIGO, G_PROPIETARIO, G_IMAGEN;
non terminal CAMPO_TIENDA, OTRO_CAMPOT;
non terminal MOD_TIENDA, TIPO, NOMBRE, PROP, CODIGO, DIRECCION, TELEFONO, CAMPO_MOD, OTRO_CAMPOMOD, MODT, OTRA_MODT;
non terminal CREAR_PRODUCTO, O_PRODUCTO, C_PRODUCTO, CAMPO_CREARPRODUCTO, OTRO_CAMPOCP, C_CANTIDAD, O_CANTIDAD, O_MARCA, C_MARCA, O_COLOR, C_COLOR;
non terminal O_SIZE, C_SIZE, O_SUCURSAL, C_SUCURSAL, G_CANTIDAD, G_MARCA, G_COLOR, G_SIZE, G_SUCURSAL, OPERACION_ARITMETICA;
non terminal BC_PRODUCTO, BC_ESTANDAR, OTRO_BC, CANTIDAD, MARCA, COLOR, SIZE, SUCURSAL, CAMPOS_BC, OTRO_CAMPOBC;
non terminal EXPRESION, IMAGEN, GET;

precedence left mas, menos;
precedence left por, sobre;
precedence left parentesisA, parentesisC;
precedence right raizCuadrada, potencia;

start with INICIO;

INICIO::= LISTA2
| error INICIO
|
;

LISTA::= O_PETICION OTRA_ACCION C_PETICION;

LISTA2::= LISTA2 LISTA
| LISTA
;

ACCION::= LOGIN
|         REGISTRO
|         TIENDA
|         MODT
|         CREAR_PRODUCTO
|         BC_PRODUCTO
|         GET
;

OTRA_ACCION::= OTRA_ACCION ACCION
| ACCION
;

O_PETICION::= dolar peticion dolar;

O_INGRESO::= dolar inicioUsuario dolar;

O_ID::= dolar id dolar;

O_PASSWORD::= dolar password dolar;

C_PASSWORD::= dolar password menos dolar;

C_ID::= dolar id menos dolar;

C_INGRESO::= dolar inicioUsuario menos dolar;

C_PETICION::= dolar peticion menos dolar;

G_ID::= O_ID numero:ide C_ID {: RESULT = ide; :};

G_PASSWORD::= O_PASSWORD clave:key C_PASSWORD {: RESULT = key; :};

LOGIN::= O_INGRESO G_ID:ide G_PASSWORD:key C_INGRESO {: logIn(Integer.parseInt(String.valueOf(ide)), String.valueOf(key)); :}
|        O_INGRESO G_PASSWORD:key G_ID:ide C_INGRESO {: logIn(Integer.parseInt(String.valueOf(ide)), String.valueOf(key)); :}
;

O_CREAR::= dolar crearUsuario dolar;

O_NOMBRE::= dolar nombre dolar;

O_APELLIDO::= dolar apellido dolar;

O_TELEFONO::= dolar telefono dolar;

O_DIRECCION::= dolar direccion dolar;

O_EMAIL::= dolar email dolar;

C_CREAR::= dolar crearUsuario menos dolar;

C_NOMBRE::= dolar nombre menos dolar ;

C_APELLIDO::= dolar apellido menos dolar;

C_TELEFONO::= dolar telefono menos dolar;

C_DIRECCION::= dolar direccion menos dolar;

C_EMAIL::= dolar email menos dolar;

G_NOMBRE::= O_NOMBRE cadena:name C_NOMBRE {: RESULT = name; :};

G_APELLIDO::= O_APELLIDO cadena:ape C_APELLIDO {: RESULT = ape; :};

G_TELEFONO::= O_TELEFONO numero:tel C_TELEFONO {: RESULT = tel; :};

G_DIRECCION::= O_DIRECCION cadena:dir C_DIRECCION {: RESULT = dir; :};

G_EMAIL::= O_EMAIL correo:cor C_EMAIL {: RESULT = cor; :};

CAMPO_REGISTRO::= G_ID:ide {: usuarioAuxiliar.setIdentificador(Integer.parseInt(String.valueOf(ide))); :}
| G_NOMBRE:name {: usuarioAuxiliar.setNombre(String.valueOf(name)); :}
| G_APELLIDO:ape {: usuarioAuxiliar.setApellido(String.valueOf(ape)); :}
| G_PASSWORD:pass {: usuarioAuxiliar.setPassword(String.valueOf(pass)); :}
| G_TELEFONO:tel {: usuarioAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel))); :}
| G_EMAIL:cor {: usuarioAuxiliar.setEmail(String.valueOf(cor)); :} 
| G_DIRECCION:dir {: usuarioAuxiliar.setDireccion(String.valueOf(dir)); :}
;

OTRO_CAMPOR::= OTRO_CAMPOR CAMPO_REGISTRO
| CAMPO_REGISTRO
;

REGISTRO::= O_CREAR OTRO_CAMPOR C_CREAR {: insertarUsuario(); :};

O_TIENDA::= dolar tienda tipo asignacion cadena dolar;

C_TIENDA::= dolar tienda menos dolar; 

O_CODIGO::= dolar codigo dolar;

C_CODIGO::= dolar codigo menos dolar;

O_PROPIETARIO::= dolar propietario dolar;

C_PROPIETARIO::= dolar propietario menos dolar;

O_IMAGEN::= dolar img dolar;

C_IMAGEN::= dolar img menos dolar; 

G_CODIGO::= O_CODIGO numero:num C_CODIGO {: RESULT = num; :};

G_PROPIETARIO::= O_PROPIETARIO numero:num C_PROPIETARIO {: RESULT = num; :};

G_IMAGEN::= O_IMAGEN cadena:cad C_IMAGEN {: RESULT = cad; :}; 

CAMPO_TIENDA::= G_CODIGO:cod {: tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod))); :}
| G_PROPIETARIO:prop {: tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(prop))); :}
| G_NOMBRE:name {: tiendaAuxiliar.setNombre(String.valueOf(name)); :}
| G_DIRECCION:dir {: tiendaAuxiliar.setDireccion(String.valueOf(dir)); :}
| G_TELEFONO:tel {: tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel))); :}
| G_IMAGEN:img {: tiendaAuxiliar.setImagen(String.valueOf(img)); :}
;

OTRO_CAMPOT::= OTRO_CAMPOT CAMPO_TIENDA
| CAMPO_TIENDA
;

TIENDA::= O_TIENDA OTRO_CAMPOT C_TIENDA {: registrarTienda(); :};

TIPO::= tipo asignacion cadena;

CODIGO::= codigo asignacion numero;

NOMBRE::= nombre asignacion cadena;

PROP::= propietario asignacion numero;

DIRECCION::= direccion asignacion cadena;

TELEFONO::= telefono asignacion numero;

CAMPO_MOD::= TIPO | CODIGO | NOMBRE | PROP | DIRECCION | TELEFONO;

OTRO_CAMPOMOD::= coma CAMPO_MOD OTRO_CAMPOMOD
|
;

//MOD_TIENDA::= OTRA_MODT;

MODT::= dolar tienda CAMPO_MOD OTRO_CAMPOMOD menos dolar;

//OTRA_MODT::= OTRA_MODT MODT
//| MODT


O_PRODUCTO::= dolar producto tipo asignacion cadena dolar;

C_PRODUCTO::= dolar producto menos dolar;

CAMPO_CREARPRODUCTO::= G_CODIGO | G_NOMBRE | G_IMAGEN | G_CANTIDAD | G_MARCA | G_COLOR | G_SIZE | G_SUCURSAL;

OTRO_CAMPOCP::= OTRO_CAMPOCP CAMPO_CREARPRODUCTO
| CAMPO_CREARPRODUCTO
;

O_CANTIDAD::= dolar cantidad dolar;

C_CANTIDAD::= dolar cantidad menos dolar;

O_MARCA::= dolar marca dolar;

C_MARCA::= dolar marca menos dolar;

O_COLOR::= dolar color dolar;

C_COLOR::= dolar color menos dolar;

C_SIZE::= dolar size menos dolar;

O_SIZE::= dolar size dolar;

O_SUCURSAL::= dolar sucursal dolar;

C_SUCURSAL::= dolar sucursal menos dolar;

G_CANTIDAD::= O_CANTIDAD OPERACION_ARITMETICA C_CANTIDAD;

G_MARCA::= O_MARCA cadena C_MARCA;

G_COLOR::= O_COLOR cadena C_COLOR;

G_SIZE::= O_SIZE OPERACION_ARITMETICA C_SIZE;

G_SUCURSAL::= O_SUCURSAL numero C_SUCURSAL;

CREAR_PRODUCTO::= O_PRODUCTO OTRO_CAMPOCP C_PRODUCTO;

CANTIDAD::= cantidad asignacion OPERACION_ARITMETICA;

MARCA::= marca asignacion cadena;

COLOR::= color asignacion cadena;

SIZE::= size asignacion OPERACION_ARITMETICA;

SUCURSAL::= sucursal asignacion numero;

BC_PRODUCTO::= BC_ESTANDAR
|              dolar tienda id asignacion numero dolar BC_ESTANDAR C_TIENDA;

BC_ESTANDAR::= dolar producto CAMPOS_BC OTRO_CAMPOBC menos dolar;

//OTRO_BC::= OTRO_BC BC_ESTANDAR
//| BC_ESTANDAR


CAMPOS_BC::= CODIGO | NOMBRE | IMAGEN | CANTIDAD | MARCA | COLOR | SIZE | SUCURSAL | TIPO;

OTRO_CAMPOBC::= coma CAMPOS_BC OTRO_CAMPOBC
|
;

EXPRESION::= EXPRESION mas EXPRESION
|            EXPRESION menos EXPRESION
|            EXPRESION por EXPRESION
|            EXPRESION sobre EXPRESION
|            raizCuadrada EXPRESION
|            potencia EXPRESION
|            parentesisA EXPRESION parentesisC
|            numero
;

OPERACION_ARITMETICA::= numero
|                       llaveA EXPRESION llaveC;


GET::= dolar obtener tipo asignacion cadena propietario asignacion numero menos dolar
|      dolar obtener propietario asignacion numero tipo asignacion cadena menos dolar
|      dolar obtener tipo asignacion cadena propietario asignacion numero sucursal asignacion numero menos dolar
|      dolar obtener tipo asignacion cadena sucursal asignacion numero propietario asignacion numero menos dolar
|      dolar obtener sucursal asignacion numero tipo asignacion cadena propietario asignacion numero menos dolar
|      dolar obtener sucursal asignacion numero propietario asignacion numero tipo asignacion cadena menos dolar
|      dolar obtener propietario asignacion numero sucursal asignacion numero tipo asignacion cadena menos dolar
|      dolar obtener propietario asignacion numero tipo asignacion cadena sucursal asignacion numero menos dolar
;
