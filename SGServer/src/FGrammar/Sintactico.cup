
package FGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Logica.*;
import sgserver.*;

parser code  
{:
    public ArrayList<ErrorC> errores = new ArrayList<>();
    public ArrayList<ErrorC> semanticos = new ArrayList<>();
    public String respuesta = "";

    //para metodos
    Usuario usuarioAuxiliar = new Usuario();
    Tienda tiendaAuxiliar = new Tienda();
    String tipo = null;
    Producto productoAuxiliar = new Producto();

    public void syntax_error(Symbol s)
    {   
        System.out.println(s.value.toString());
         if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        System.out.println(s.value.toString());
        if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {
        System.out.println("error semantico");
    }

    public double sumar(Object arg1, Object arg2) {
            
            try {
                return Calculadora.sumar(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "numeros", linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double restar(Object arg1, Object arg2) {
            
            try {
                return Calculadora.restar(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "numeros", linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double multiplicar(Object arg1, Object arg2) {
            
            try {
                return Calculadora.multiplicar(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "numeros", linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double dividir(Object arg1, Object arg2) {
            
            try {
                return Calculadora.dividir(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "numeros", linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double raiz(Object arg1) {
            
            try {
                return Calculadora.raiz(arg1);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "numero", linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double potencia(Object arg1) {
            
            try {
                return Calculadora.potencia(arg1);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "numero", linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public void insertarUsuario() {
            System.out.println("Llegue a insertar usuario");
            try 
            {
                usuarioAuxiliar.arreglar();
                boolean exito = DatosPersistentes.usuarios.agregarUsuario(usuarioAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Usuario registrado: " + usuarioAuxiliar.getNombre());
                
                respuesta = " $reply$ $Usuario$ $registro id = " + String.valueOf(usuarioAuxiliar.getIdentificador()) + "$ True $registro-$ "
                                    + " $Usuario-$ $reply-$";
            }
            catch(Exception e) {
                //respuesta falsa
                DatosPersistentes.interfaz.outputLine.append("\n >> Fallo al registrar usuario " + e);
                respuesta = " $reply$ $Usuario$ $registro id = " + String.valueOf(usuarioAuxiliar.getIdentificador()) + "$ False $registro-$ "
                                    + " $Usuario-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "error de usuario", linea, columna, e.getMessage()));
            }
            
            usuarioAuxiliar = new Usuario();
         }

         public void logIn(int id, String clave) {
            System.out.println("Llegue a log in");
            try 
            {
                String exito = DatosPersistentes.usuarios.logIn(id, clave);
                DatosPersistentes.interfaz.outputLine.append("\n >> Bienvenido " + exito);
                
                respuesta = " $reply$ $Usuario$ $id$ " + String.valueOf(id) + " $id-$ $access$ True $access-$ "
                                    + " $Usuario-$ $reply-$";
            }
            catch(Exception e) {
                //respuesta falsa
                DatosPersistentes.interfaz.outputLine.append("\n >> Fallo al intentar entrar " + e );

                respuesta = " $reply$ $Usuario$ $id$ " + String.valueOf(id) + " $id-$ $access$ False $access-$ "
                                    + " $Usuario-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "error en clave o usuario", linea, columna, e.getMessage()));
            }
         }

         public void registrarTienda() {
            System.out.println("Registrando tienda");
            
            try {
                tiendaAuxiliar.arreglar();
                DatosPersistentes.tiendas.registrarTienda(tiendaAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Tienda Registrada: " + tiendaAuxiliar.getNombre());

                respuesta = " $reply$ $Tienda$ $registro id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $registro-$ "
                                    + " $Tienda-$ $reply-$";
            }
            catch(Exception e) {
                DatosPersistentes.interfaz.outputLine.append("\n >> Error al registrar tienda: " + e);
                
                respuesta = " $reply$ $Tienda$ $registro id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ False $registro-$ "
                                    + " $Tienda-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "error en tienda", linea, columna, e.getMessage()));
            }

            tiendaAuxiliar = new Tienda();
         }

         public void modificarTienda() {
            System.out.println("Modificando Tienda");
            tiendaAuxiliar.arreglar();

            if (tipo.substring(1, tipo.length()-1).equalsIgnoreCase("modificacion") 
                    || tipo.substring(1, tipo.length()-1).equalsIgnoreCase("modificar")) {
                
                try {
                    DatosPersistentes.tiendas.modificarTienda(tiendaAuxiliar);
                    DatosPersistentes.interfaz.outputLine.append("\n >> Tienda Modificada con exito!");

                    respuesta = " $reply$ $Tienda$ $modificar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $modificar-$ "
                                    + " $Tienda-$ $reply-$";
                }
                catch(Exception e) {
                    DatosPersistentes.interfaz.outputLine.append("\n >> Error al modificar tienda: " + e);

                    respuesta = " $reply$ $Tienda$ $modificar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ False $modificar-$ "
                                    + " $Tienda-$ $reply-$";

                    Symbol current = (java_cup.runtime.Symbol) stack.peek();
                    int linea = current.left;
                    int columna = current.right;

                    semanticos.add(new ErrorC("Semantico", "error al modificar tienda", linea, columna, e.getMessage()));
                }
            }
            else {
                try {
                    DatosPersistentes.tiendas.eliminarTienda(tiendaAuxiliar.getUsuario_propietario(), tiendaAuxiliar.getCodigo());
                    DatosPersistentes.interfaz.outputLine.append("\n >> Tienda eliminada con exito!");

                    respuesta = " $reply$ $Tienda$ $eliminar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $eliminar-$ "
                                    + " $Tienda-$ $reply-$";
                }
                catch(Exception e) {
                    DatosPersistentes.interfaz.outputLine.append("\n >> Error al eliminar tienda: " + e);

                    respuesta = " $reply$ $Tienda$ $eliminar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $eliminar-$ "
                                    + " $Tienda-$ $reply-$";
                                    
                    Symbol current = (java_cup.runtime.Symbol) stack.peek();
                    int linea = current.left;
                    int columna = current.right;

                    semanticos.add(new ErrorC("Semantico", "error al eliminar tienda", linea, columna, e.getMessage()));
                }
            }
            tipo = null;
            tiendaAuxiliar = new Tienda();
         }

         public void registrarProducto() {
            System.out.println("Registrando producto");
            
            try {
                productoAuxiliar.arreglar();
                DatosPersistentes.productos.insertarProducto(productoAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Producto Registrado: " + productoAuxiliar.getNombre());

                respuesta = " $reply$ $Producto$ $registro id = " + String.valueOf(productoAuxiliar.getCodigo()) + " sucursal = " 
                                    + String.valueOf(productoAuxiliar.getSucursal_tienda()) + "$ True $registro-$ $Producto-$ $reply-$";
            }
            catch(Exception e) {
                DatosPersistentes.interfaz.outputLine.append("\n >> Error al registrar producto: " + e);
                respuesta = " $reply$ $Producto$ $registro id = " + String.valueOf(productoAuxiliar.getCodigo()) + " sucursal = " 
                                    + String.valueOf(productoAuxiliar.getSucursal_tienda()) + "$ False $registro-$ $Producto-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", "error al registrar producto", linea, columna, e.getMessage()));
            }

            productoAuxiliar = new Producto();
         }

         public void modificarProducto() {
            System.out.println("Modificando Tienda");
            productoAuxiliar.arreglar();

            if (tipo.substring(1, tipo.length()-1).equalsIgnoreCase("modificacion") 
                || tipo.substring(1, tipo.length()-1).equalsIgnoreCase("modificar") ) {
                
                try {
                    DatosPersistentes.productos.modificarProducto(productoAuxiliar);
                    DatosPersistentes.interfaz.outputLine.append("\n >> Producto Modificado con exito!");

                    respuesta = " $reply$ $Producto$ $modificar id = " + String.valueOf(productoAuxiliar.getCodigo()) +
                                 " sucursal = " + String.valueOf(productoAuxiliar.getSucursal_tienda()) + " $ True $modificar-$ "
                                    + " $Producto-$ $reply-$";
                }
                catch(Exception e) {
                    DatosPersistentes.interfaz.outputLine.append("\n >> Error al modificar producto: " + e.getMessage());

                    respuesta = " $reply$ $Producto$ $modificar id = " + String.valueOf(productoAuxiliar.getCodigo()) +
                                 " sucursal = " + String.valueOf(productoAuxiliar.getSucursal_tienda()) + " $ False $modificar-$ "
                                    + " $Producto-$ $reply-$";

                    Symbol current = (java_cup.runtime.Symbol) stack.peek();
                    int linea = current.left;
                    int columna = current.right;

                    semanticos.add(new ErrorC("Semantico", "error al modificar producto", linea, columna, e.getMessage()));
                }
            }
            else {
                try {
                    DatosPersistentes.productos.eliminarProducto(productoAuxiliar.getCodigo(), productoAuxiliar.getSucursal_tienda());
                    DatosPersistentes.interfaz.outputLine.append("\n >> Producto eliminado con exito!");

                    respuesta = " $reply$ $Producto$ $eliminar id = " + String.valueOf(productoAuxiliar.getCodigo()) +
                                 " sucursal = " + String.valueOf(productoAuxiliar.getSucursal_tienda()) + " $ True $eliminar-$ "
                                    + " $Producto-$ $reply-$";
                }
                catch(Exception e) {
                    DatosPersistentes.interfaz.outputLine.append("\n >> Error al eliminar producto: " + e.getMessage());

                    respuesta = " $reply$ $Producto$ $eliminar id = " + String.valueOf(productoAuxiliar.getCodigo()) +
                                 " sucursal = " + String.valueOf(productoAuxiliar.getSucursal_tienda()) + " $ False $eliminar-$ "
                                    + " $Producto-$ $reply-$";
                                    
                    Symbol current = (java_cup.runtime.Symbol) stack.peek();
                    int linea = current.left;
                    int columna = current.right;

                    semanticos.add(new ErrorC("Semantico", "error al eliminar producto", linea, columna, e.getMessage()));
                }
            }
            tipo = null;
            productoAuxiliar = new Producto();
         }
:}

action code 
{:
         
:}

terminal dolar, peticion, inicioUsuario, id, password, menos, mas, por, sobre, crearUsuario, nombre, apellido, telefono, email, direccion;
terminal tienda, tipo, codigo, propietario, img, raizCuadrada, potencia, cantidad, marca, color, sucursal, size, coma, llaveA, llaveC;
terminal parentesisA, parentesisC, asignacion, producto, obtener, precio;
terminal cadena, numero, clave, correo; 

non terminal INICIO, ACCION, OTRA_ACCION, LISTA, LISTA2;
non terminal LOGIN, O_PETICION, O_INGRESO, O_ID, O_PASSWORD, C_PASSWORD, C_ID, C_INGRESO, C_PETICION, G_ID, G_PASSWORD;
non terminal REGISTRO, O_CREAR, O_NOMBRE, O_APELLIDO, O_TELEFONO, O_DIRECCION, O_EMAIL, C_CREAR, C_NOMBRE, C_APELLIDO, C_TELEFONO, C_DIRECCION;
non terminal C_EMAIL, G_NOMBRE, G_APELLIDO, G_TELEFONO, G_DIRECCION, G_EMAIL, CAMPO_REGISTRO, OTRO_CAMPOR;
non terminal TIENDA, O_TIENDA, C_TIENDA, O_CODIGO, C_CODIGO, O_PROPIETARIO, C_PROPIETARIO, O_IMAGEN, C_IMAGEN, G_CODIGO, G_PROPIETARIO, G_IMAGEN;
non terminal CAMPO_TIENDA, OTRO_CAMPOT;
non terminal MOD_TIENDA, TIPO, NOMBRE, PROP, CODIGO, DIRECCION, TELEFONO, CAMPO_MOD, OTRO_CAMPOMOD, MODT, OTRA_MODT;
non terminal CREAR_PRODUCTO, O_PRODUCTO, C_PRODUCTO, CAMPO_CREARPRODUCTO, OTRO_CAMPOCP, C_CANTIDAD, O_CANTIDAD, O_MARCA, C_MARCA, O_COLOR, C_COLOR;
non terminal O_SIZE, C_SIZE, O_SUCURSAL, C_SUCURSAL, G_CANTIDAD, G_MARCA, G_COLOR, G_SIZE, G_SUCURSAL, OPERACION_ARITMETICA;
non terminal BC_PRODUCTO, BC_ESTANDAR, OTRO_BC, CANTIDAD, MARCA, COLOR, SIZE, SUCURSAL, CAMPOS_BC, OTRO_CAMPOBC;
non terminal EXPRESION, IMAGEN, GET;
non terminal O_PRECIO, C_PRECIO, PRECIO, G_PRECIO;

precedence left mas, menos;
precedence left por, sobre;
precedence left parentesisA, parentesisC;
precedence right raizCuadrada, potencia;

start with INICIO;

INICIO::= LISTA2
| error INICIO
|
;

LISTA::= O_PETICION OTRA_ACCION C_PETICION;

LISTA2::= LISTA2 LISTA
| LISTA
;

ACCION::= LOGIN
|         REGISTRO
|         TIENDA
|         MODT
|         CREAR_PRODUCTO
|         BC_PRODUCTO
|         GET
;

OTRA_ACCION::= OTRA_ACCION ACCION
| ACCION
;

O_PETICION::= dolar peticion dolar;

O_INGRESO::= dolar inicioUsuario dolar;

O_ID::= dolar id dolar;

O_PASSWORD::= dolar password dolar;

C_PASSWORD::= dolar password menos dolar;

C_ID::= dolar id menos dolar;

C_INGRESO::= dolar inicioUsuario menos dolar;

C_PETICION::= dolar peticion menos dolar;

G_ID::= O_ID numero:ide C_ID {: RESULT = ide; :};

G_PASSWORD::= O_PASSWORD clave:key C_PASSWORD {: RESULT = key; :};

LOGIN::= O_INGRESO G_ID:ide G_PASSWORD:key C_INGRESO {: parser.logIn(Integer.parseInt(String.valueOf(ide)), String.valueOf(key)); :}
|        O_INGRESO G_PASSWORD:key G_ID:ide C_INGRESO {: parser.logIn(Integer.parseInt(String.valueOf(ide)), String.valueOf(key)); :}
;

O_CREAR::= dolar crearUsuario dolar;

O_NOMBRE::= dolar nombre dolar;

O_APELLIDO::= dolar apellido dolar;

O_TELEFONO::= dolar telefono dolar;

O_DIRECCION::= dolar direccion dolar;

O_EMAIL::= dolar email dolar;

C_CREAR::= dolar crearUsuario menos dolar;

C_NOMBRE::= dolar nombre menos dolar ;

C_APELLIDO::= dolar apellido menos dolar;

C_TELEFONO::= dolar telefono menos dolar;

C_DIRECCION::= dolar direccion menos dolar;

C_EMAIL::= dolar email menos dolar;

G_NOMBRE::= O_NOMBRE cadena:name C_NOMBRE {: RESULT = name; :};

G_APELLIDO::= O_APELLIDO cadena:ape C_APELLIDO {: RESULT = ape; :};

G_TELEFONO::= O_TELEFONO numero:tel C_TELEFONO {: RESULT = tel; :};

G_DIRECCION::= O_DIRECCION cadena:dir C_DIRECCION {: RESULT = dir; :};

G_EMAIL::= O_EMAIL correo:cor C_EMAIL {: RESULT = cor; :};

CAMPO_REGISTRO::= G_ID:ide {: parser.usuarioAuxiliar.setIdentificador(Integer.parseInt(String.valueOf(ide))); :}
| G_NOMBRE:name {: parser.usuarioAuxiliar.setNombre(String.valueOf(name)); :}
| G_APELLIDO:ape {: parser.usuarioAuxiliar.setApellido(String.valueOf(ape)); :}
| G_PASSWORD:pass {: parser.usuarioAuxiliar.setPassword(String.valueOf(pass)); :}
| G_TELEFONO:tel {: parser.usuarioAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel))); :}
| G_EMAIL:cor {: parser.usuarioAuxiliar.setEmail(String.valueOf(cor)); :} 
| G_DIRECCION:dir {: parser.usuarioAuxiliar.setDireccion(String.valueOf(dir)); :}
;

OTRO_CAMPOR::= OTRO_CAMPOR CAMPO_REGISTRO
| CAMPO_REGISTRO
;

REGISTRO::= O_CREAR OTRO_CAMPOR C_CREAR {: parser.insertarUsuario(); :};

O_TIENDA::= dolar tienda tipo asignacion cadena dolar;

C_TIENDA::= dolar tienda menos dolar; 

O_CODIGO::= dolar codigo dolar;

C_CODIGO::= dolar codigo menos dolar;

O_PROPIETARIO::= dolar propietario dolar;

C_PROPIETARIO::= dolar propietario menos dolar;

O_IMAGEN::= dolar img dolar;

C_IMAGEN::= dolar img menos dolar; 

G_CODIGO::= O_CODIGO numero:num C_CODIGO {: RESULT = num; :};

G_PROPIETARIO::= O_PROPIETARIO numero:num C_PROPIETARIO {: RESULT = num; :};

G_IMAGEN::= O_IMAGEN cadena:cad C_IMAGEN {: RESULT = cad; :}; 

CAMPO_TIENDA::= G_CODIGO:cod {: parser.tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod))); :}
| G_PROPIETARIO:prop {: parser.tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(prop))); :}
| G_NOMBRE:name {: parser.tiendaAuxiliar.setNombre(String.valueOf(name)); :}
| G_DIRECCION:dir {: parser.tiendaAuxiliar.setDireccion(String.valueOf(dir)); :}
| G_TELEFONO:tel {: parser.tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel))); :}
| G_IMAGEN:img {: parser.tiendaAuxiliar.setImagen(String.valueOf(img)); :}
;

OTRO_CAMPOT::= OTRO_CAMPOT CAMPO_TIENDA
| CAMPO_TIENDA
;

TIENDA::= O_TIENDA OTRO_CAMPOT C_TIENDA {: parser.registrarTienda(); :};

TIPO::= tipo asignacion cadena:cad {: parser.tipo = String.valueOf(cad); :};

CODIGO::= codigo asignacion numero:num {: RESULT = num; :};

NOMBRE::= nombre asignacion cadena:cad {: RESULT = cad; :};

PROP::= propietario asignacion numero:num {: RESULT = num; :} ;

DIRECCION::= direccion asignacion cadena:dir {: RESULT = dir; :};

TELEFONO::= telefono asignacion numero:num {: RESULT = num; :};

CAMPO_MOD::= TIPO 
| CODIGO:num {: parser.tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(num))); :}
| NOMBRE:name {: parser.tiendaAuxiliar.setNombre(String.valueOf(name)); :}
| PROP:num {: parser.tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(num))); :}
| DIRECCION:dir {: parser.tiendaAuxiliar.setDireccion(String.valueOf(dir)); :}
| TELEFONO:num {: parser.tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(num))); :}
;

OTRO_CAMPOMOD::= coma CAMPO_MOD OTRO_CAMPOMOD
|
;

//MOD_TIENDA::= OTRA_MODT;

MODT::= dolar tienda CAMPO_MOD OTRO_CAMPOMOD menos dolar {: parser.modificarTienda(); :};

//OTRA_MODT::= OTRA_MODT MODT
//| MODT


O_PRODUCTO::= dolar producto tipo asignacion cadena dolar;

C_PRODUCTO::= dolar producto menos dolar;

CAMPO_CREARPRODUCTO::= G_CODIGO:cod {: parser.productoAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod))); :}
| G_NOMBRE:name {: parser.productoAuxiliar.setNombre(String.valueOf(name)); :}
| G_IMAGEN:img {: parser.productoAuxiliar.setImagen(String.valueOf(img)); :}
| G_CANTIDAD:cant {: parser.productoAuxiliar.setCantidad((int)Double.parseDouble(String.valueOf(cant))); :}
| G_MARCA:brand {: parser.productoAuxiliar.setMarca(String.valueOf(brand)); :}
| G_COLOR:colour {: parser.productoAuxiliar.setColor(String.valueOf(colour)); :}
| G_SIZE:tamanio {: parser.productoAuxiliar.setSize(Double.parseDouble(String.valueOf(tamanio))); :}
| G_SUCURSAL:sucursal {: parser.productoAuxiliar.setSucursal_tienda(Integer.parseInt(String.valueOf(sucursal))); :}
| G_PRECIO:cost {: parser.productoAuxiliar.setPrecio(Double.parseDouble(String.valueOf(cost))); :}
;

OTRO_CAMPOCP::= OTRO_CAMPOCP CAMPO_CREARPRODUCTO
| CAMPO_CREARPRODUCTO
;

O_CANTIDAD::= dolar cantidad dolar;

C_CANTIDAD::= dolar cantidad menos dolar;

O_PRECIO::= dolar precio dolar;

C_PRECIO::= dolar precio menos dolar;

G_PRECIO::= O_PRECIO OPERACION_ARITMETICA:cost C_PRECIO {: RESULT = cost; :};

O_MARCA::= dolar marca dolar;

C_MARCA::= dolar marca menos dolar;

O_COLOR::= dolar color dolar;

C_COLOR::= dolar color menos dolar;

C_SIZE::= dolar size menos dolar;

O_SIZE::= dolar size dolar;

O_SUCURSAL::= dolar sucursal dolar;

C_SUCURSAL::= dolar sucursal menos dolar;

G_CANTIDAD::= O_CANTIDAD OPERACION_ARITMETICA:cant C_CANTIDAD {: RESULT = cant; :};

G_MARCA::= O_MARCA cadena:cad C_MARCA {: RESULT = cad; :};

G_COLOR::= O_COLOR cadena:cad C_COLOR {: RESULT = cad; :};

G_SIZE::= O_SIZE OPERACION_ARITMETICA:tamanio C_SIZE {: RESULT = tamanio; :};

G_SUCURSAL::= O_SUCURSAL numero:num C_SUCURSAL {: RESULT = num; :};

CREAR_PRODUCTO::= O_PRODUCTO OTRO_CAMPOCP C_PRODUCTO {: parser.registrarProducto(); :};

CANTIDAD::= cantidad asignacion OPERACION_ARITMETICA:cant {: RESULT = cant; :};

MARCA::= marca asignacion cadena:brand {: RESULT = brand; :};

COLOR::= color asignacion cadena:colour {: RESULT = colour; :};

SIZE::= size asignacion OPERACION_ARITMETICA:tamanio {: RESULT = tamanio; :};

SUCURSAL::= sucursal asignacion numero:suc {: RESULT = suc; :};

PRECIO::= precio asignacion OPERACION_ARITMETICA:cost {: RESULT = cost; :};

BC_PRODUCTO::= BC_ESTANDAR {: parser.modificarProducto(); :}
|              dolar tienda id asignacion numero:num dolar BC_ESTANDAR C_TIENDA 
{: parser.productoAuxiliar.setSucursal_tienda(Integer.parseInt(String.valueOf(num)));
    parser.modificarProducto();
 :}
;

BC_ESTANDAR::= dolar producto CAMPOS_BC OTRO_CAMPOBC menos dolar;

//OTRO_BC::= OTRO_BC BC_ESTANDAR
//| BC_ESTANDAR


CAMPOS_BC::= CODIGO:code {: parser.productoAuxiliar.setCodigo(Integer.parseInt(String.valueOf(code))); :}
| NOMBRE:name {: parser.productoAuxiliar.setNombre(String.valueOf(name)); :} 
| IMAGEN:img {: parser.productoAuxiliar.setImagen(String.valueOf(img)); :}
| CANTIDAD:cant {: parser.productoAuxiliar.setCantidad((int)Double.parseDouble(String.valueOf(cant))); :}
| MARCA:brand {: parser.productoAuxiliar.setMarca(String.valueOf(brand)); :}
| COLOR:colour {: parser.productoAuxiliar.setColor(String.valueOf(colour)); :}
| SIZE:tamanio {: parser.productoAuxiliar.setSize(Double.parseDouble(String.valueOf(tamanio))); :}
| SUCURSAL:store {: parser.productoAuxiliar.setSucursal_tienda(Integer.parseInt(String.valueOf(store))); :}
| TIPO:tip {: parser.tipo = String.valueOf(parser.tipo); :}
| PRECIO:cost {: parser.productoAuxiliar.setPrecio(Double.parseDouble(String.valueOf(cost))); :}
;

OTRO_CAMPOBC::= coma CAMPOS_BC OTRO_CAMPOBC
|
;

EXPRESION::= EXPRESION:num mas EXPRESION:num2 {: RESULT = parser.sumar(num, num2); :}
|            EXPRESION:num menos EXPRESION:num2 {: RESULT = parser.restar(num, num2); :}
|            EXPRESION:num por EXPRESION:num2 {: RESULT = parser.multiplicar(num, num2); :}
|            EXPRESION:num sobre EXPRESION:num2 {: RESULT = parser.dividir(num, num2); :}
|            raizCuadrada parentesisA EXPRESION:num parentesisC {: RESULT = parser.raiz(num); :}
|            potencia parentesisC EXPRESION:num parentesisA {: RESULT = parser.potencia(num); :}
|            parentesisA EXPRESION:num parentesisC {: RESULT= num; :}
|            numero:num {: System.out.println(String.valueOf(num)); RESULT = Double.parseDouble(String.valueOf(num)); :}
;

OPERACION_ARITMETICA::= numero:num {: RESULT = num; :}
|                       llaveA EXPRESION:expresion llaveC {: RESULT = expresion; :}
;


GET::= dolar obtener tipo asignacion cadena propietario asignacion numero menos dolar
|      dolar obtener propietario asignacion numero tipo asignacion cadena menos dolar
|      dolar obtener tipo asignacion cadena propietario asignacion numero sucursal asignacion numero menos dolar
|      dolar obtener tipo asignacion cadena sucursal asignacion numero propietario asignacion numero menos dolar
|      dolar obtener sucursal asignacion numero tipo asignacion cadena propietario asignacion numero menos dolar
|      dolar obtener sucursal asignacion numero propietario asignacion numero tipo asignacion cadena menos dolar
|      dolar obtener propietario asignacion numero sucursal asignacion numero tipo asignacion cadena menos dolar
|      dolar obtener propietario asignacion numero tipo asignacion cadena sucursal asignacion numero menos dolar
;
