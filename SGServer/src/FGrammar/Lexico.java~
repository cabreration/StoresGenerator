/* The following code was generated by JFlex 1.6.1 */

package FGrammar;

import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/FGrammar/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 47, 48, 47, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47,  0,  3, 45, 21, 44,  0,  0, 38, 39, 29, 28, 35, 27,  2, 30, 
     1, 20,  1,  1,  1,  1,  1,  1,  1,  1,  0, 43,  0, 40,  0,  0, 
     6, 14, 31,  7, 15, 17, 32, 33,  4, 12,  4,  4, 13,  9, 25,  8, 
    10, 22, 16, 19, 24, 23, 46, 26, 42, 41,  4,  0,  0,  0,  0,  5, 
     0, 14, 31,  7, 15, 17, 32, 33,  4, 12,  4,  4, 13,  9, 25,  8, 
    10, 22, 16, 19, 24, 23, 46, 26, 42, 41,  4, 36,  0, 37,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\1\1\3\3\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\3\1\1\20\4\0\1\21\12\0"+
    "\1\22\2\0\1\22\5\0\1\23\1\0\1\24\15\0"+
    "\1\25\1\26\1\27\1\0\1\2\14\0\1\30\1\31"+
    "\1\0\1\31\24\0\1\32\36\0\1\33\1\0\1\33"+
    "\7\0\2\34\1\35\1\0\1\34\1\0\2\34\1\36"+
    "\1\0\1\34\1\0\2\34\1\0\1\34\1\0\2\34"+
    "\1\37\1\0\2\34\2\40\1\34\1\0\1\34\1\41"+
    "\1\0\1\34\1\0\4\34\2\42\1\0\2\43\1\0"+
    "\2\34\1\0\1\34\1\0\2\34\2\44\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\2\45\1\46\1\34\1\47\2\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\2\50\1\51\1\0\1\34"+
    "\2\52\1\34\1\0\2\53\1\0\1\34\2\54\1\0"+
    "\1\34\1\55\1\0\1\34\2\56\1\0\1\34\2\57"+
    "\1\60\2\0\1\34\1\0\1\34\1\0\1\34\2\61"+
    "\2\0\1\34\1\0\1\34\1\0\1\34\2\0\1\34"+
    "\2\62\1\0\1\34\1\0\2\63\1\0\1\34\1\0"+
    "\2\64\5\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\61\0\u0310\0\u0341\0\u0372\0\u03a3\0\61\0\61\0\61"+
    "\0\61\0\u03d4\0\61\0\61\0\61\0\61\0\61\0\u0405"+
    "\0\61\0\u0436\0\u0467\0\u0498\0\61\0\u04c9\0\u04fa\0\u052b"+
    "\0\223\0\61\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\61\0\u0746\0\u0777\0\u055c"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u055c\0\u089d\0\u055c"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\61\0\61\0\61"+
    "\0\u0b4b\0\u04c9\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0bad\0\61"+
    "\0\u0dc8\0\u0bad\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u0bad\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\61\0\u178b\0\u122f"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u122f"+
    "\0\u1260\0\u122f\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u122f"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u122f\0\u1bf2\0\u1c23\0\u1c54\0\61\0\u122f"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u122f\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\61\0\u122f\0\u1e6f\0\61\0\u122f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\61\0\u122f\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\61"+
    "\0\u122f\0\u122f\0\u22a5\0\u122f\0\u22d6\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\u25b5\0\61\0\u122f\0\u122f\0\u25e6"+
    "\0\u2617\0\61\0\u122f\0\u2648\0\u2679\0\61\0\u122f\0\u26aa"+
    "\0\u26db\0\61\0\u122f\0\u270c\0\u273d\0\u122f\0\u276e\0\u279f"+
    "\0\61\0\u122f\0\u27d0\0\u2801\0\61\0\u122f\0\u122f\0\u2832"+
    "\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\61\0\u122f"+
    "\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u2b11\0\u2b42\0\61\0\u122f\0\u2b73\0\u2ba4\0\u2bd5\0\61"+
    "\0\u122f\0\u2c06\0\u2c37\0\u2c68\0\61\0\u122f\0\u2c99\0\u2cca"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\2\2\1\6\1\5"+
    "\1\7\1\10\1\11\1\12\1\5\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\5\1\26\1\27\1\30\1\31\2\5\1\32"+
    "\1\5\1\33\1\34\1\35\1\36\1\37\1\40\2\5"+
    "\1\41\1\42\1\43\1\44\1\45\63\0\1\3\1\46"+
    "\1\0\1\47\1\0\1\50\4\47\1\0\6\47\1\0"+
    "\1\47\1\3\1\0\5\47\4\0\4\47\6\0\2\47"+
    "\3\0\1\47\2\0\3\51\1\52\55\51\1\0\1\53"+
    "\2\0\1\53\1\54\1\50\4\53\1\0\6\53\1\0"+
    "\2\53\1\0\5\53\4\0\4\53\6\0\2\53\3\0"+
    "\1\53\3\0\1\53\2\0\1\53\1\54\1\50\1\53"+
    "\1\55\2\53\1\0\2\53\1\56\1\53\1\57\1\53"+
    "\1\0\2\53\1\0\5\53\4\0\4\53\6\0\2\53"+
    "\3\0\1\53\3\0\1\53\2\0\1\53\1\54\1\50"+
    "\4\53\1\0\2\53\1\60\3\53\1\0\2\53\1\0"+
    "\5\53\4\0\4\53\6\0\2\53\3\0\1\53\3\0"+
    "\1\53\2\0\1\53\1\54\1\50\4\53\1\0\2\53"+
    "\1\61\1\53\1\62\1\53\1\0\2\53\1\0\2\53"+
    "\1\63\2\53\4\0\4\53\6\0\2\53\3\0\1\53"+
    "\13\0\1\64\5\0\1\65\11\0\1\66\30\0\1\53"+
    "\2\0\1\53\1\54\1\50\2\53\1\67\1\53\1\0"+
    "\3\53\1\70\2\53\1\0\2\53\1\0\3\53\1\71"+
    "\1\53\4\0\4\53\6\0\2\53\3\0\1\53\3\0"+
    "\1\53\2\0\1\53\1\54\1\50\3\53\1\72\1\0"+
    "\6\53\1\0\2\53\1\0\5\53\4\0\4\53\6\0"+
    "\2\53\3\0\1\53\3\0\1\53\2\0\1\53\1\54"+
    "\1\50\1\53\1\73\2\53\1\74\1\75\4\53\1\76"+
    "\1\0\2\53\1\0\5\53\4\0\4\53\6\0\2\53"+
    "\3\0\1\53\3\0\1\53\2\0\1\53\1\54\1\50"+
    "\4\53\1\0\5\53\1\77\1\0\2\53\1\0\1\100"+
    "\4\53\4\0\4\53\6\0\2\53\3\0\1\53\3\0"+
    "\1\53\2\0\1\53\1\54\1\50\2\53\1\101\1\53"+
    "\1\0\6\53\1\0\2\53\1\0\5\53\4\0\4\53"+
    "\6\0\1\53\1\102\3\0\1\53\31\0\1\103\32\0"+
    "\1\53\2\0\1\53\1\54\1\50\4\53\1\0\6\53"+
    "\1\0\2\53\1\0\1\53\1\104\3\53\4\0\4\53"+
    "\6\0\2\53\3\0\1\53\3\0\1\53\2\0\1\53"+
    "\1\54\1\50\4\53\1\0\6\53\1\0\2\53\1\0"+
    "\1\53\1\105\3\53\4\0\4\53\6\0\2\53\3\0"+
    "\1\53\3\0\1\53\2\0\1\53\1\54\1\50\4\53"+
    "\1\0\6\53\1\106\1\107\1\53\1\0\5\53\4\0"+
    "\4\53\6\0\2\53\3\0\1\53\3\0\1\53\2\0"+
    "\1\53\1\54\1\50\4\53\1\110\1\111\1\53\1\112"+
    "\2\53\1\113\1\0\2\53\1\0\5\53\4\0\4\53"+
    "\6\0\2\53\3\0\1\53\3\0\1\53\2\0\1\53"+
    "\1\54\1\50\1\53\1\114\2\53\1\0\6\53\1\0"+
    "\2\53\1\0\5\53\4\0\4\53\6\0\2\53\3\0"+
    "\1\53\3\0\1\53\2\0\1\53\1\54\1\50\4\53"+
    "\1\0\5\53\1\115\1\0\2\53\1\0\5\53\4\0"+
    "\4\53\6\0\2\53\3\0\1\53\52\0\1\116\64\0"+
    "\1\117\61\0\1\120\4\0\1\53\2\0\1\53\1\54"+
    "\1\50\4\53\1\0\2\53\1\121\3\53\1\0\2\53"+
    "\1\0\5\53\4\0\4\53\6\0\2\53\3\0\1\53"+
    "\3\0\1\122\22\0\1\122\35\0\1\47\2\0\1\47"+
    "\1\0\1\50\4\47\1\0\6\47\1\0\2\47\1\0"+
    "\5\47\4\0\4\47\6\0\2\47\3\0\1\47\11\0"+
    "\1\123\52\0\1\124\2\0\1\124\1\125\1\50\4\124"+
    "\1\0\6\124\1\0\2\124\1\0\5\124\4\0\4\124"+
    "\6\0\2\124\3\0\1\124\3\0\1\125\2\0\2\125"+
    "\1\0\4\125\1\0\6\125\1\0\2\125\1\0\5\125"+
    "\4\0\4\125\6\0\2\125\3\0\1\125\3\0\1\124"+
    "\2\0\1\124\1\125\1\50\4\124\1\0\1\124\1\126"+
    "\1\124\1\127\2\124\1\0\2\124\1\0\5\124\4\0"+
    "\4\124\6\0\2\124\3\0\1\124\3\0\1\124\2\0"+
    "\1\124\1\125\1\50\4\124\1\0\6\124\1\0\2\124"+
    "\1\0\3\124\1\130\1\124\4\0\4\124\6\0\2\124"+
    "\3\0\1\124\3\0\1\124\2\0\1\124\1\125\1\50"+
    "\4\124\1\0\5\124\1\131\1\0\2\124\1\0\5\124"+
    "\4\0\4\124\6\0\2\124\3\0\1\124\3\0\1\124"+
    "\2\0\1\124\1\125\1\50\4\124\1\0\4\124\1\132"+
    "\1\124\1\0\2\124\1\0\5\124\4\0\4\124\6\0"+
    "\2\124\3\0\1\124\3\0\1\124\2\0\1\124\1\125"+
    "\1\50\4\124\1\0\6\124\1\133\1\134\1\124\1\0"+
    "\5\124\4\0\4\124\6\0\2\124\3\0\1\124\3\0"+
    "\1\124\2\0\1\124\1\125\1\50\1\124\1\135\2\124"+
    "\1\0\5\124\1\136\1\0\2\124\1\0\5\124\4\0"+
    "\4\124\6\0\2\124\3\0\1\124\3\0\1\124\2\0"+
    "\1\124\1\125\1\50\4\124\1\0\6\124\1\0\2\124"+
    "\1\0\3\124\1\137\1\124\4\0\4\124\6\0\2\124"+
    "\3\0\1\124\43\0\1\140\32\0\2\141\45\0\1\124"+
    "\2\0\1\124\1\125\1\50\4\124\1\0\6\124\1\0"+
    "\2\124\1\0\5\124\4\0\2\124\1\142\1\124\6\0"+
    "\2\124\3\0\1\124\3\0\1\124\2\0\1\124\1\125"+
    "\1\50\4\124\1\141\1\143\5\124\1\0\2\124\1\0"+
    "\5\124\4\0\4\124\6\0\2\124\3\0\1\124\3\0"+
    "\1\124\2\0\1\124\1\125\1\50\4\124\1\0\5\124"+
    "\1\144\1\0\2\124\1\0\5\124\4\0\4\124\6\0"+
    "\2\124\3\0\1\124\3\0\1\124\2\0\1\124\1\125"+
    "\1\50\4\124\1\0\6\124\1\0\2\124\1\0\3\124"+
    "\1\145\1\124\4\0\4\124\6\0\2\124\3\0\1\124"+
    "\22\0\1\146\41\0\1\124\2\0\1\124\1\125\1\50"+
    "\4\124\1\0\4\124\1\147\1\124\1\0\2\124\1\0"+
    "\5\124\4\0\4\124\6\0\2\124\3\0\1\124\3\0"+
    "\1\124\2\0\1\124\1\125\1\50\4\124\1\0\6\124"+
    "\1\0\2\124\1\0\1\150\4\124\4\0\4\124\6\0"+
    "\2\124\3\0\1\124\3\0\1\124\2\0\1\124\1\125"+
    "\1\50\4\124\1\0\2\124\1\151\3\124\1\0\2\124"+
    "\1\0\5\124\4\0\4\124\6\0\2\124\3\0\1\124"+
    "\3\0\1\124\2\0\1\124\1\125\1\50\4\124\1\0"+
    "\6\124\1\0\2\124\1\0\2\124\1\152\2\124\4\0"+
    "\4\124\6\0\2\124\3\0\1\124\11\0\1\153\52\0"+
    "\1\124\2\0\1\124\1\125\1\50\1\154\3\124\1\0"+
    "\6\124\1\0\2\124\1\0\5\124\4\0\4\124\6\0"+
    "\2\124\3\0\1\124\3\0\1\124\2\0\1\124\1\125"+
    "\1\50\4\124\1\0\5\124\1\155\1\0\2\124\1\0"+
    "\5\124\4\0\4\124\6\0\2\124\3\0\1\124\31\0"+
    "\1\156\32\0\1\124\2\0\1\124\1\125\1\50\4\124"+
    "\1\0\6\124\1\0\2\124\1\0\1\124\1\157\3\124"+
    "\4\0\4\124\6\0\2\124\3\0\1\124\14\0\1\160"+
    "\6\0\1\161\40\0\1\124\2\0\1\124\1\125\1\50"+
    "\3\124\1\162\1\0\5\124\1\163\1\0\2\124\1\0"+
    "\5\124\4\0\4\124\6\0\2\124\3\0\1\124\3\0"+
    "\1\124\2\0\1\124\1\125\1\50\2\124\1\164\1\124"+
    "\1\0\6\124\1\0\2\124\1\0\5\124\4\0\4\124"+
    "\6\0\2\124\3\0\1\124\3\0\1\124\2\0\1\124"+
    "\1\125\1\50\4\124\1\0\1\124\1\165\4\124\1\0"+
    "\2\124\1\0\5\124\4\0\4\124\6\0\2\124\3\0"+
    "\1\124\3\0\1\124\2\0\1\124\1\125\1\50\2\124"+
    "\1\166\1\124\1\0\6\124\1\0\2\124\1\0\5\124"+
    "\4\0\4\124\6\0\2\124\3\0\1\124\3\0\1\124"+
    "\2\0\1\124\1\125\1\50\4\124\1\0\6\124\1\0"+
    "\2\124\1\0\2\124\1\167\2\124\4\0\4\124\6\0"+
    "\2\124\3\0\1\124\3\0\1\124\2\0\1\124\1\125"+
    "\1\50\1\170\3\124\1\0\6\124\1\0\2\124\1\0"+
    "\5\124\4\0\4\124\6\0\2\124\3\0\1\124\12\0"+
    "\1\171\51\0\1\172\2\0\1\172\1\173\1\50\4\172"+
    "\1\0\6\172\1\0\2\172\1\0\5\172\4\0\4\172"+
    "\6\0\2\172\3\0\1\172\3\0\1\173\2\0\2\173"+
    "\1\0\4\173\1\0\6\173\1\0\2\173\1\0\5\173"+
    "\4\0\4\173\6\0\2\173\3\0\1\173\3\0\1\172"+
    "\2\0\1\172\1\173\1\50\1\172\1\174\2\172\1\0"+
    "\6\172\1\0\2\172\1\0\5\172\4\0\4\172\6\0"+
    "\2\172\3\0\1\172\3\0\1\172\2\0\1\172\1\173"+
    "\1\50\4\172\1\175\1\176\5\172\1\0\2\172\1\0"+
    "\5\172\4\0\4\172\6\0\2\172\3\0\1\172\3\0"+
    "\1\172\2\0\1\172\1\173\1\50\4\172\1\0\6\172"+
    "\1\0\2\172\1\0\2\172\1\177\2\172\4\0\4\172"+
    "\6\0\2\172\3\0\1\172\3\0\1\172\2\0\1\172"+
    "\1\173\1\50\4\172\1\0\2\172\1\200\3\172\1\0"+
    "\2\172\1\0\5\172\4\0\4\172\6\0\2\172\3\0"+
    "\1\172\3\0\1\172\2\0\1\172\1\173\1\50\1\201"+
    "\3\172\1\0\6\172\1\0\2\172\1\0\5\172\4\0"+
    "\4\172\6\0\2\172\3\0\1\172\24\0\2\202\36\0"+
    "\1\172\2\0\1\172\1\173\1\50\4\172\1\0\6\172"+
    "\1\202\1\203\1\172\1\0\5\172\4\0\4\172\6\0"+
    "\2\172\3\0\1\172\3\0\1\172\2\0\1\172\1\173"+
    "\1\50\3\172\1\204\1\0\3\172\1\205\2\172\1\0"+
    "\2\172\1\0\5\172\4\0\4\172\6\0\2\172\3\0"+
    "\1\172\3\0\1\172\2\0\1\172\1\173\1\50\1\206"+
    "\3\172\1\0\6\172\1\0\2\172\1\0\5\172\4\0"+
    "\4\172\6\0\2\172\3\0\1\172\11\0\1\207\52\0"+
    "\1\172\2\0\1\172\1\173\1\50\1\210\3\172\1\0"+
    "\6\172\1\0\2\172\1\0\5\172\4\0\4\172\6\0"+
    "\2\172\3\0\1\172\3\0\1\172\2\0\1\172\1\173"+
    "\1\50\4\172\1\0\1\172\1\211\4\172\1\0\2\172"+
    "\1\0\5\172\4\0\4\172\6\0\2\172\3\0\1\172"+
    "\3\0\1\172\2\0\1\172\1\173\1\50\4\172\1\0"+
    "\3\172\1\212\2\172\1\0\2\172\1\0\5\172\4\0"+
    "\4\172\6\0\2\172\3\0\1\172\23\0\1\213\40\0"+
    "\1\172\2\0\1\172\1\173\1\50\4\172\1\0\5\172"+
    "\1\214\1\0\2\172\1\0\5\172\4\0\4\172\6\0"+
    "\2\172\3\0\1\172\3\0\1\172\2\0\1\172\1\173"+
    "\1\50\4\172\1\0\6\172\1\0\2\172\1\0\1\172"+
    "\1\215\3\172\4\0\4\172\6\0\2\172\3\0\1\172"+
    "\3\0\1\172\2\0\1\172\1\173\1\50\4\172\1\216"+
    "\1\217\5\172\1\0\2\172\1\0\5\172\4\0\4\172"+
    "\6\0\2\172\3\0\1\172\3\0\1\172\2\0\1\172"+
    "\1\173\1\50\4\172\1\0\4\172\1\220\1\172\1\0"+
    "\2\172\1\0\5\172\4\0\4\172\6\0\2\172\3\0"+
    "\1\172\31\0\1\221\32\0\1\172\2\0\1\172\1\173"+
    "\1\50\4\172\1\0\6\172\1\0\2\172\1\0\1\172"+
    "\1\222\3\172\4\0\4\172\6\0\2\172\3\0\1\172"+
    "\3\0\1\172\2\0\1\172\1\173\1\50\4\172\1\0"+
    "\4\172\1\223\1\172\1\0\2\172\1\0\5\172\4\0"+
    "\4\172\6\0\2\172\3\0\1\172\20\0\1\224\43\0"+
    "\1\172\2\0\1\172\1\173\1\50\4\172\1\0\2\172"+
    "\1\225\3\172\1\0\2\172\1\0\5\172\4\0\4\172"+
    "\6\0\2\172\3\0\1\172\12\0\1\226\101\0\1\227"+
    "\30\0\1\172\2\0\1\172\1\173\1\50\1\172\1\230"+
    "\2\172\1\0\6\172\1\0\2\172\1\0\5\172\4\0"+
    "\4\172\6\0\2\172\3\0\1\172\3\0\1\172\2\0"+
    "\1\172\1\173\1\50\4\172\1\0\6\172\1\0\2\172"+
    "\1\0\3\172\1\231\1\172\4\0\4\172\6\0\2\172"+
    "\3\0\1\172\3\0\1\172\2\0\1\172\1\173\1\50"+
    "\4\172\1\0\2\172\1\232\3\172\1\0\2\172\1\0"+
    "\5\172\4\0\4\172\6\0\2\172\3\0\1\172\3\0"+
    "\1\172\2\0\1\172\1\173\1\50\4\172\1\0\5\172"+
    "\1\233\1\0\2\172\1\0\5\172\4\0\4\172\6\0"+
    "\2\172\3\0\1\172\3\0\1\172\2\0\1\172\1\173"+
    "\1\50\4\172\1\0\6\172\1\0\2\172\1\0\5\172"+
    "\4\0\1\234\3\172\6\0\2\172\3\0\1\172\3\0"+
    "\1\172\2\0\1\172\1\173\1\50\4\172\1\235\1\236"+
    "\5\172\1\0\2\172\1\0\5\172\4\0\4\172\6\0"+
    "\2\172\3\0\1\172\13\0\1\237\50\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\3\0\1\173\2\0\1\241\1\173\1\0\4\241"+
    "\1\0\6\241\1\0\1\241\1\173\1\0\5\241\4\0"+
    "\4\241\6\0\2\241\3\0\1\241\3\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\4\240\1\242\1\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\43\0\1\243\20\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\2\240\1\244\1\240\6\0"+
    "\2\240\3\0\1\240\3\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\245\1\246\5\240\1\0\1\240\1\172"+
    "\1\0\5\240\4\0\4\240\6\0\2\240\3\0\1\240"+
    "\3\0\1\172\2\0\1\240\1\173\1\50\4\240\1\0"+
    "\4\240\1\247\1\240\1\0\1\240\1\172\1\0\5\240"+
    "\4\0\4\240\6\0\2\240\3\0\1\240\3\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\0\2\240\1\250"+
    "\3\240\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\34\0\1\251\27\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\0\6\240\1\0"+
    "\1\240\1\172\1\0\4\240\1\252\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\3\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\253\1\254\5\240\1\0\1\240\1\172"+
    "\1\0\5\240\4\0\4\240\6\0\2\240\3\0\1\240"+
    "\3\0\1\172\2\0\1\240\1\173\1\50\4\240\1\0"+
    "\6\240\1\0\1\240\1\172\1\0\1\240\1\255\3\240"+
    "\4\0\4\240\6\0\2\240\3\0\1\240\3\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\256\1\257\5\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\15\0\2\260\45\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\260\1\261\5\240\1\0"+
    "\1\240\1\172\1\0\5\240\4\0\4\240\6\0\2\240"+
    "\3\0\1\240\3\0\1\172\2\0\1\240\1\173\1\50"+
    "\4\240\1\0\1\240\1\262\4\240\1\0\1\240\1\172"+
    "\1\0\5\240\4\0\4\240\6\0\2\240\3\0\1\240"+
    "\3\0\1\172\2\0\1\240\1\173\1\50\4\240\1\0"+
    "\5\240\1\263\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\11\0\1\264\52\0"+
    "\1\172\2\0\1\240\1\173\1\50\1\265\3\240\1\0"+
    "\6\240\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\3\0\1\172\2\0\1\240"+
    "\1\173\1\50\4\240\1\0\5\240\1\266\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\17\0\1\267\44\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\0\1\240\1\270\4\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\3\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\0\2\240\1\271\3\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\22\0"+
    "\1\272\41\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\0\4\240\1\273\1\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\3\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\6\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\1\274\1\240\3\0\1\240\22\0\1\275\41\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\0\4\240\1\276"+
    "\1\240\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\21\0\1\277\42\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\0\3\240\1\300"+
    "\2\240\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\3\0\1\172\2\0\1\240"+
    "\1\173\1\50\4\240\1\0\6\240\1\0\1\240\1\172"+
    "\1\0\5\240\4\0\3\240\1\301\6\0\2\240\3\0"+
    "\1\240\3\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\1\240\1\302\2\240\6\0\2\240\3\0\1\240\3\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\4\240"+
    "\1\303\1\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\12\0\1\304\51\0"+
    "\1\172\2\0\1\240\1\173\1\50\1\240\1\305\2\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\14\0\1\306\56\0"+
    "\1\307\51\0\1\172\2\0\1\240\1\173\1\50\1\240"+
    "\1\310\2\240\1\0\6\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\21\0"+
    "\1\311\42\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\0\3\240\1\312\2\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\3\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\6\240"+
    "\1\0\1\240\1\172\1\0\1\240\1\313\3\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\12\0\1\314\51\0"+
    "\1\172\2\0\1\240\1\173\1\50\1\240\1\315\2\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\23\0\1\316\40\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\5\240"+
    "\1\317\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\3\0\1\172\2\0\1\240"+
    "\1\173\1\50\1\320\3\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\12\0\1\321\51\0\1\172\2\0\1\240\1\173"+
    "\1\50\1\240\1\322\2\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\12\0\1\323\51\0\1\172\2\0\1\240\1\173"+
    "\1\50\1\240\1\324\2\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\3\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\325\1\326\5\240\1\0\1\240\1\172\1\0\5\240"+
    "\4\0\4\240\6\0\2\240\3\0\1\240\11\0\1\327"+
    "\52\0\1\172\2\0\1\240\1\173\1\50\1\330\3\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\3\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\6\240\1\331\1\332"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\3\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\0\5\240\1\333\1\0\1\240\1\172\1\0\5\240"+
    "\4\0\4\240\6\0\2\240\3\0\1\240\24\0\2\334"+
    "\36\0\1\172\2\0\1\240\1\173\1\50\4\240\1\0"+
    "\6\240\1\334\1\335\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\15\0\2\336\45\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\336\1\337\5\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\20\0\1\340\43\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\2\240\1\341\3\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\3\0\1\172\2\0\1\240\1\173"+
    "\1\50\1\240\1\342\2\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\3\0\1\172\2\0\1\240\1\173\1\50\1\240"+
    "\1\343\2\240\1\0\6\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\3\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\5\240"+
    "\1\344\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\15\0\2\345\62\0\1\346"+
    "\43\0\1\172\2\0\1\240\1\173\1\50\4\240\1\0"+
    "\2\240\1\347\3\240\1\0\1\240\1\172\1\0\5\240"+
    "\4\0\4\240\6\0\2\240\3\0\1\240\3\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\0\6\240\1\350"+
    "\1\351\1\172\1\0\5\240\4\0\4\240\6\0\2\240"+
    "\3\0\1\240\22\0\1\352\41\0\1\172\2\0\1\240"+
    "\1\173\1\50\4\240\1\0\4\240\1\353\1\240\1\0"+
    "\1\240\1\172\1\0\5\240\4\0\4\240\6\0\2\240"+
    "\3\0\1\240\32\0\1\354\31\0\1\172\2\0\1\240"+
    "\1\173\1\50\4\240\1\0\6\240\1\0\1\240\1\172"+
    "\1\0\2\240\1\355\2\240\4\0\4\240\6\0\2\240"+
    "\3\0\1\240\3\0\1\172\2\0\1\240\1\173\1\50"+
    "\4\240\1\0\6\240\1\0\1\240\1\172\1\0\2\240"+
    "\1\356\2\240\4\0\4\240\6\0\2\240\3\0\1\240"+
    "\31\0\1\357\32\0\1\172\2\0\1\240\1\173\1\50"+
    "\4\240\1\0\6\240\1\0\1\240\1\172\1\0\1\240"+
    "\1\360\3\240\4\0\4\240\6\0\2\240\3\0\1\240"+
    "\21\0\1\361\42\0\1\172\2\0\1\240\1\173\1\50"+
    "\4\240\1\0\3\240\1\362\2\240\1\0\1\240\1\172"+
    "\1\0\5\240\4\0\4\240\6\0\2\240\3\0\1\240"+
    "\15\0\2\363\45\0\1\172\2\0\1\240\1\173\1\50"+
    "\4\240\1\363\1\364\5\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\32\0"+
    "\1\365\31\0\1\172\2\0\1\240\1\173\1\50\4\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\2\240\1\366"+
    "\2\240\4\0\4\240\6\0\2\240\3\0\1\240\3\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\4\240"+
    "\1\367\1\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\20\0\1\370\43\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\2\240"+
    "\1\371\3\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\12\0\1\372\51\0"+
    "\1\172\2\0\1\240\1\173\1\50\1\240\1\373\2\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\3\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\3\240\1\374\1\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\17\0\1\375\62\0\1\376\42\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\3\240"+
    "\1\377\2\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\31\0\1\u0100\32\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\6\240"+
    "\1\0\1\240\1\172\1\0\1\240\1\u0101\3\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\21\0\1\u0102\42\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\3\240"+
    "\1\u0103\2\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\20\0\1\u0104\43\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\0\2\240"+
    "\1\u0105\3\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\3\0\1\172\2\0"+
    "\1\240\1\173\1\50\1\240\1\u0106\2\240\1\0\6\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\24\0\2\u0107\36\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\6\240\1\u0107\1\u0108"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\12\0\1\u0109\51\0\1\172\2\0\1\240\1\173"+
    "\1\50\1\240\1\u010a\2\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\12\0\1\u010b\51\0\1\172\2\0\1\240\1\173"+
    "\1\50\1\240\1\u010c\2\240\1\0\6\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\17\0\1\u010d\44\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\0\1\240\1\u010e\4\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\3\0\1\172\2\0\1\240\1\173\1\50\1\240"+
    "\1\u010f\2\240\1\0\6\240\1\0\1\240\1\172\1\0"+
    "\5\240\4\0\4\240\6\0\2\240\3\0\1\240\20\0"+
    "\1\u0110\60\0\1\u0111\43\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\0\2\240\1\u0112\3\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\22\0\1\u0113\41\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\0\4\240\1\u0114\1\240\1\0\1\240"+
    "\1\172\1\0\5\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\31\0\1\u0115\32\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\0\6\240\1\0\1\240\1\172\1\0"+
    "\1\240\1\u0116\3\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\33\0\1\u0117\30\0\1\172\2\0\1\240\1\173"+
    "\1\50\4\240\1\0\6\240\1\0\1\240\1\172\1\0"+
    "\3\240\1\u0118\1\240\4\0\4\240\6\0\2\240\3\0"+
    "\1\240\21\0\1\u0119\61\0\1\u011a\41\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\4\240\1\u011b\1\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\15\0\2\u011c\45\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\u011c\1\u011d\5\240\1\0"+
    "\1\240\1\172\1\0\5\240\4\0\4\240\6\0\2\240"+
    "\3\0\1\240\20\0\1\u011e\43\0\1\172\2\0\1\240"+
    "\1\173\1\50\4\240\1\0\2\240\1\u011f\3\240\1\0"+
    "\1\240\1\172\1\0\5\240\4\0\4\240\6\0\2\240"+
    "\3\0\1\240\12\0\1\u0120\63\0\2\u0121\45\0\1\172"+
    "\2\0\1\240\1\173\1\50\4\240\1\u0121\1\u0122\5\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\12\0\1\u0123\51\0\1\172\2\0"+
    "\1\240\1\173\1\50\1\240\1\u0124\2\240\1\0\6\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\22\0\1\u0125\41\0\1\172\2\0"+
    "\1\240\1\173\1\50\4\240\1\0\4\240\1\u0126\1\240"+
    "\1\0\1\240\1\172\1\0\5\240\4\0\4\240\6\0"+
    "\2\240\3\0\1\240\22\0\1\u0127\50\0\1\u0128\51\0"+
    "\1\172\2\0\1\240\1\173\1\50\1\240\1\u0129\2\240"+
    "\1\0\6\240\1\0\1\240\1\172\1\0\5\240\4\0"+
    "\4\240\6\0\2\240\3\0\1\240\15\0\2\u012a\45\0"+
    "\1\172\2\0\1\240\1\173\1\50\4\240\1\u012a\1\u012b"+
    "\5\240\1\0\1\240\1\172\1\0\5\240\4\0\4\240"+
    "\6\0\2\240\3\0\1\240\23\0\1\u012c\47\0\1\u012d"+
    "\51\0\1\172\2\0\1\240\1\173\1\50\1\240\1\u012e"+
    "\2\240\1\0\6\240\1\0\1\240\1\172\1\0\5\240"+
    "\4\0\4\240\6\0\2\240\3\0\1\240\24\0\2\u012f"+
    "\61\0\1\u0130\36\0\1\u0131\65\0\1\u0132\61\0\1\u0133"+
    "\61\0\1\u0134\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11662];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\4\1\4\11\1\1\5\11"+
    "\1\1\1\11\3\1\1\11\4\0\1\11\12\0\1\11"+
    "\2\0\1\1\5\0\1\1\1\0\1\1\15\0\3\11"+
    "\1\0\1\1\14\0\1\1\1\11\1\0\1\1\24\0"+
    "\1\1\36\0\1\11\1\0\1\1\7\0\3\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\1\11\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\4\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\11\4\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\2\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\1\0\1\11"+
    "\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<ErrorC> errores = new ArrayList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosF.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errores.add(new ErrorC("Error Lexico", yytext(), yyline, yycolumn, "No pertenece al lenguaje"));
            }
          case 54: break;
          case 2: 
            { return new Symbol(SimbolosF.numero, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 3: 
            { return new Symbol(SimbolosF.dolar, yycolumn, yyline, "$");
            }
          case 56: break;
          case 4: 
            { return new Symbol(SimbolosF.negacion, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 5: 
            { return new Symbol(SimbolosF.menos, yycolumn, yyline, "-");
            }
          case 58: break;
          case 6: 
            { return new Symbol(SimbolosF.mas, yycolumn, yyline, "+");
            }
          case 59: break;
          case 7: 
            { return new Symbol(SimbolosF.por, yycolumn, yyline, "*");
            }
          case 60: break;
          case 8: 
            { return new Symbol(SimbolosF.sobre, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 9: 
            { return new Symbol(SimbolosF.coma, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 10: 
            { return new Symbol(SimbolosF.llaveA, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 11: 
            { return new Symbol(SimbolosF.llaveC, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 12: 
            { return new Symbol(SimbolosF.parentesisA, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 13: 
            { return new Symbol(SimbolosF.parentesisC, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 14: 
            { return new Symbol(SimbolosF.asignacion, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 15: 
            { return new Symbol(SimbolosF.puntoYComa, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 16: 
            { 
            }
          case 69: break;
          case 17: 
            { return new Symbol(SimbolosF.cadena, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 18: 
            { return new Symbol(SimbolosF.id, yycolumn, yyline, "id");
            }
          case 71: break;
          case 19: 
            { return new Symbol(SimbolosF.de, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 20: 
            { return new Symbol(SimbolosF.raizCuadrada, yycolumn, yyline, "Rq");
            }
          case 73: break;
          case 21: 
            { return new Symbol(SimbolosF.igualIgual, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 22: 
            { return new Symbol(SimbolosF.conjuncion, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 23: 
            { return new Symbol(SimbolosF.disyuncion, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 24: 
            { return new Symbol(SimbolosF.potencia, yycolumn, yyline, "Ptn");
            }
          case 77: break;
          case 25: 
            { return new Symbol(SimbolosF.img, yycolumn, yyline, "img");
            }
          case 78: break;
          case 26: 
            { return new Symbol(SimbolosF.obtener, yycolumn, yyline, "get");
            }
          case 79: break;
          case 27: 
            { return new Symbol(SimbolosF.tipo, yycolumn, yyline, "tipo");
            }
          case 80: break;
          case 28: 
            { return new Symbol(SimbolosF.clave, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 29: 
            { return new Symbol(SimbolosF.color, yycolumn, yyline, "color");
            }
          case 82: break;
          case 30: 
            { return new Symbol(SimbolosF.marca, yycolumn, yyline, "marca");
            }
          case 83: break;
          case 31: 
            { return new Symbol(SimbolosF.donde, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 32: 
            { return new Symbol(SimbolosF.email, yycolumn, yyline, "email");
            }
          case 85: break;
          case 33: 
            { return new Symbol(SimbolosF.consulta, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 34: 
            { return new Symbol(SimbolosF.vacio, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 35: 
            { return new Symbol(SimbolosF.codigo, yycolumn, yyline, "codigo");
            }
          case 88: break;
          case 36: 
            { return new Symbol(SimbolosF.precio, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 37: 
            { return new Symbol(SimbolosF.tienda, yycolumn, yyline, "tienda");
            }
          case 90: break;
          case 38: 
            { return new Symbol(SimbolosF.size, yycolumn, yyline, "tamanio");
            }
          case 91: break;
          case 39: 
            { return new Symbol(SimbolosF.nombre, yycolumn, yyline, "nombre");
            }
          case 92: break;
          case 40: 
            { return new Symbol(SimbolosF.peticion, yycolumn, yyline, "request");
            }
          case 93: break;
          case 41: 
            { return new Symbol(SimbolosF.extraer, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 42: 
            { return new Symbol(SimbolosF.user, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 43: 
            { return new Symbol(SimbolosF.cantidad, yycolumn, yyline, "cantidad");
            }
          case 96: break;
          case 44: 
            { return new Symbol(SimbolosF.password, yycolumn, yyline, "password");
            }
          case 97: break;
          case 45: 
            { return new Symbol(SimbolosF.producto, yycolumn, yyline, "producto");
            }
          case 98: break;
          case 46: 
            { return new Symbol(SimbolosF.apellido, yycolumn, yyline, "apellido");
            }
          case 99: break;
          case 47: 
            { return new Symbol(SimbolosF.sucursal, yycolumn, yyline, "sucursal");
            }
          case 100: break;
          case 48: 
            { return new Symbol(SimbolosF.telefono, yycolumn, yyline, "telefono");
            }
          case 101: break;
          case 49: 
            { return new Symbol(SimbolosF.direccion, yycolumn, yyline, "direccion");
            }
          case 102: break;
          case 50: 
            { return new Symbol(SimbolosF.propietario, yycolumn, yyline, "propietario");
            }
          case 103: break;
          case 51: 
            { return new Symbol(SimbolosF.crearUsuario, yycolumn, yyline, "crearUsuario");
            }
          case 104: break;
          case 52: 
            { return new Symbol(SimbolosF.inicioUsuario, yycolumn, yyline, "inicioUsuario");
            }
          case 105: break;
          case 53: 
            { return new Symbol(SimbolosF.correo, yycolumn, yyline, yytext());
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
