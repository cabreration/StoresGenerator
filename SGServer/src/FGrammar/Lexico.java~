/* The following code was generated by JFlex 1.6.1 */

package FGrammar;

import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/FGrammar/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 46, 46, 47, 46, 46,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    46,  0,  3, 45, 21, 44,  0,  0, 38, 39, 29, 28, 35, 27,  2, 30, 
     1, 20,  1,  1,  1,  1,  1,  1,  1,  1,  0, 43,  0, 40,  0,  0, 
     6, 14, 31,  7, 15, 17, 32, 33,  4, 12,  4,  4, 13,  9, 25,  8, 
    10, 22, 16, 19, 24, 23,  4, 26, 42, 41,  4,  0,  0,  0,  0,  5, 
     0, 14, 31,  7, 15, 17, 32, 33,  4, 12,  4,  4, 13,  9, 25,  8, 
    10, 22, 16, 19, 24, 23,  4, 26, 42, 41,  4, 36,  0, 37,  0,  0, 
     0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\1\1\3\3\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\1\1\20\4\0\1\21\12\0"+
    "\1\22\2\0\1\22\5\0\1\23\1\0\1\24\15\0"+
    "\1\25\1\26\1\27\1\2\14\0\1\30\1\31\1\0"+
    "\1\31\24\0\1\32\35\0\1\33\1\0\1\33\5\0"+
    "\2\34\1\35\1\0\1\34\1\0\2\34\1\36\1\0"+
    "\1\34\1\0\2\34\1\0\1\34\1\0\2\34\1\37"+
    "\1\0\2\34\2\40\1\34\1\0\1\34\1\41\1\0"+
    "\1\34\1\0\4\34\1\0\2\42\1\0\2\34\1\0"+
    "\1\34\1\0\2\34\2\43\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\2\44\1\45\1\34\1\46\2\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\2\47\1\50\1\0\1\34\2\51\1\34"+
    "\1\0\2\52\1\0\1\34\2\53\1\0\1\34\1\54"+
    "\1\0\1\34\2\55\1\0\1\34\2\56\1\57\2\0"+
    "\1\34\1\0\1\34\1\0\1\34\2\60\2\0\1\34"+
    "\1\0\1\34\1\0\1\34\2\0\1\34\2\61\1\0"+
    "\1\34\1\0\2\62\1\0\1\34\1\0\2\63\5\0"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\60\0\u0300\0\u0330\0\u0360\0\u0390\0\60\0\60\0\60"+
    "\0\60\0\u03c0\0\60\0\60\0\60\0\60\0\60\0\u03f0"+
    "\0\60\0\u0420\0\u0450\0\60\0\u0480\0\u04b0\0\u04e0\0\220"+
    "\0\60\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\60\0\u06f0\0\u0720\0\u0510\0\u0750"+
    "\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0510\0\u0840\0\u0510\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\60\0\60\0\60\0\u0480"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0b10\0\60\0\u0d20\0\u0b10"+
    "\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u0b10\0\u1110\0\u1140\0\u1170"+
    "\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470"+
    "\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0"+
    "\0\u1620\0\u1650\0\60\0\u1680\0\u1140\0\u16b0\0\u16e0\0\u1710"+
    "\0\u1740\0\u1770\0\u1140\0\u1170\0\u1140\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1140\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950"+
    "\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1140\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\60\0\u1140\0\u1b00\0\u1b30\0\u1b60\0\u1140\0\u1b90"+
    "\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\60"+
    "\0\u1140\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\60\0\u1140\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50"+
    "\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0"+
    "\0\60\0\u1140\0\u1140\0\u2100\0\u1140\0\u2130\0\u2160\0\u2190"+
    "\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310"+
    "\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\60\0\u1140\0\u1140"+
    "\0\u2430\0\u2460\0\60\0\u1140\0\u2490\0\u24c0\0\60\0\u1140"+
    "\0\u24f0\0\u2520\0\60\0\u1140\0\u2550\0\u2580\0\u1140\0\u25b0"+
    "\0\u25e0\0\60\0\u1140\0\u2610\0\u2640\0\60\0\u1140\0\u1140"+
    "\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\60"+
    "\0\u1140\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0"+
    "\0\u2910\0\u2940\0\u2970\0\60\0\u1140\0\u29a0\0\u29d0\0\u2a00"+
    "\0\60\0\u1140\0\u2a30\0\u2a60\0\u2a90\0\60\0\u1140\0\u2ac0"+
    "\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\2\2\1\6\1\5"+
    "\1\7\1\10\1\11\1\12\1\5\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\5\1\26\1\27\1\30\1\31\2\5\1\32"+
    "\1\5\1\33\1\34\1\35\1\36\1\37\1\40\2\5"+
    "\1\41\1\42\1\43\1\44\62\0\1\3\1\45\1\0"+
    "\1\46\1\0\1\47\4\46\1\0\6\46\1\0\1\46"+
    "\1\3\1\0\5\46\4\0\4\46\6\0\2\46\5\0"+
    "\3\50\1\51\54\50\1\0\1\52\2\0\1\52\1\53"+
    "\1\47\4\52\1\0\6\52\1\0\2\52\1\0\5\52"+
    "\4\0\4\52\6\0\2\52\6\0\1\52\2\0\1\52"+
    "\1\53\1\47\1\52\1\54\2\52\1\0\2\52\1\55"+
    "\1\52\1\56\1\52\1\0\2\52\1\0\5\52\4\0"+
    "\4\52\6\0\2\52\6\0\1\52\2\0\1\52\1\53"+
    "\1\47\4\52\1\0\2\52\1\57\3\52\1\0\2\52"+
    "\1\0\5\52\4\0\4\52\6\0\2\52\6\0\1\52"+
    "\2\0\1\52\1\53\1\47\4\52\1\0\2\52\1\60"+
    "\1\52\1\61\1\52\1\0\2\52\1\0\2\52\1\62"+
    "\2\52\4\0\4\52\6\0\2\52\16\0\1\63\5\0"+
    "\1\64\11\0\1\65\27\0\1\52\2\0\1\52\1\53"+
    "\1\47\2\52\1\66\1\52\1\0\3\52\1\67\2\52"+
    "\1\0\2\52\1\0\3\52\1\70\1\52\4\0\4\52"+
    "\6\0\2\52\6\0\1\52\2\0\1\52\1\53\1\47"+
    "\3\52\1\71\1\0\6\52\1\0\2\52\1\0\5\52"+
    "\4\0\4\52\6\0\2\52\6\0\1\52\2\0\1\52"+
    "\1\53\1\47\1\52\1\72\2\52\1\73\1\74\4\52"+
    "\1\75\1\0\2\52\1\0\5\52\4\0\4\52\6\0"+
    "\2\52\6\0\1\52\2\0\1\52\1\53\1\47\4\52"+
    "\1\0\5\52\1\76\1\0\2\52\1\0\1\77\4\52"+
    "\4\0\4\52\6\0\2\52\6\0\1\52\2\0\1\52"+
    "\1\53\1\47\2\52\1\100\1\52\1\0\6\52\1\0"+
    "\2\52\1\0\5\52\4\0\4\52\6\0\1\52\1\101"+
    "\34\0\1\102\31\0\1\52\2\0\1\52\1\53\1\47"+
    "\4\52\1\0\6\52\1\0\2\52\1\0\1\52\1\103"+
    "\3\52\4\0\4\52\6\0\2\52\6\0\1\52\2\0"+
    "\1\52\1\53\1\47\4\52\1\0\6\52\1\0\2\52"+
    "\1\0\1\52\1\104\3\52\4\0\4\52\6\0\2\52"+
    "\6\0\1\52\2\0\1\52\1\53\1\47\4\52\1\0"+
    "\6\52\1\105\1\106\1\52\1\0\5\52\4\0\4\52"+
    "\6\0\2\52\6\0\1\52\2\0\1\52\1\53\1\47"+
    "\4\52\1\107\1\110\1\52\1\111\2\52\1\112\1\0"+
    "\2\52\1\0\5\52\4\0\4\52\6\0\2\52\6\0"+
    "\1\52\2\0\1\52\1\53\1\47\1\52\1\113\2\52"+
    "\1\0\6\52\1\0\2\52\1\0\5\52\4\0\4\52"+
    "\6\0\2\52\6\0\1\52\2\0\1\52\1\53\1\47"+
    "\4\52\1\0\5\52\1\114\1\0\2\52\1\0\5\52"+
    "\4\0\4\52\6\0\2\52\55\0\1\115\63\0\1\116"+
    "\60\0\1\117\3\0\1\120\22\0\1\120\34\0\1\46"+
    "\2\0\1\46\1\0\1\47\4\46\1\0\6\46\1\0"+
    "\2\46\1\0\5\46\4\0\4\46\6\0\2\46\14\0"+
    "\1\121\51\0\1\122\2\0\1\122\1\123\1\47\4\122"+
    "\1\0\6\122\1\0\2\122\1\0\5\122\4\0\4\122"+
    "\6\0\2\122\6\0\1\123\2\0\2\123\1\0\4\123"+
    "\1\0\6\123\1\0\2\123\1\0\5\123\4\0\4\123"+
    "\6\0\2\123\6\0\1\122\2\0\1\122\1\123\1\47"+
    "\4\122\1\0\1\122\1\124\1\122\1\125\2\122\1\0"+
    "\2\122\1\0\5\122\4\0\4\122\6\0\2\122\6\0"+
    "\1\122\2\0\1\122\1\123\1\47\4\122\1\0\6\122"+
    "\1\0\2\122\1\0\3\122\1\126\1\122\4\0\4\122"+
    "\6\0\2\122\6\0\1\122\2\0\1\122\1\123\1\47"+
    "\4\122\1\0\5\122\1\127\1\0\2\122\1\0\5\122"+
    "\4\0\4\122\6\0\2\122\6\0\1\122\2\0\1\122"+
    "\1\123\1\47\4\122\1\0\4\122\1\130\1\122\1\0"+
    "\2\122\1\0\5\122\4\0\4\122\6\0\2\122\6\0"+
    "\1\122\2\0\1\122\1\123\1\47\4\122\1\0\6\122"+
    "\1\131\1\132\1\122\1\0\5\122\4\0\4\122\6\0"+
    "\2\122\6\0\1\122\2\0\1\122\1\123\1\47\1\122"+
    "\1\133\2\122\1\0\5\122\1\134\1\0\2\122\1\0"+
    "\5\122\4\0\4\122\6\0\2\122\6\0\1\122\2\0"+
    "\1\122\1\123\1\47\4\122\1\0\6\122\1\0\2\122"+
    "\1\0\3\122\1\135\1\122\4\0\4\122\6\0\2\122"+
    "\46\0\1\136\31\0\2\137\44\0\1\122\2\0\1\122"+
    "\1\123\1\47\4\122\1\0\6\122\1\0\2\122\1\0"+
    "\5\122\4\0\2\122\1\140\1\122\6\0\2\122\6\0"+
    "\1\122\2\0\1\122\1\123\1\47\4\122\1\137\1\141"+
    "\5\122\1\0\2\122\1\0\5\122\4\0\4\122\6\0"+
    "\2\122\6\0\1\122\2\0\1\122\1\123\1\47\4\122"+
    "\1\0\5\122\1\142\1\0\2\122\1\0\5\122\4\0"+
    "\4\122\6\0\2\122\6\0\1\122\2\0\1\122\1\123"+
    "\1\47\4\122\1\0\6\122\1\0\2\122\1\0\3\122"+
    "\1\143\1\122\4\0\4\122\6\0\2\122\25\0\1\144"+
    "\40\0\1\122\2\0\1\122\1\123\1\47\4\122\1\0"+
    "\4\122\1\145\1\122\1\0\2\122\1\0\5\122\4\0"+
    "\4\122\6\0\2\122\6\0\1\122\2\0\1\122\1\123"+
    "\1\47\4\122\1\0\6\122\1\0\2\122\1\0\1\146"+
    "\4\122\4\0\4\122\6\0\2\122\6\0\1\122\2\0"+
    "\1\122\1\123\1\47\4\122\1\0\2\122\1\147\3\122"+
    "\1\0\2\122\1\0\5\122\4\0\4\122\6\0\2\122"+
    "\6\0\1\122\2\0\1\122\1\123\1\47\4\122\1\0"+
    "\6\122\1\0\2\122\1\0\2\122\1\150\2\122\4\0"+
    "\4\122\6\0\2\122\14\0\1\151\51\0\1\122\2\0"+
    "\1\122\1\123\1\47\1\152\3\122\1\0\6\122\1\0"+
    "\2\122\1\0\5\122\4\0\4\122\6\0\2\122\6\0"+
    "\1\122\2\0\1\122\1\123\1\47\4\122\1\0\5\122"+
    "\1\153\1\0\2\122\1\0\5\122\4\0\4\122\6\0"+
    "\2\122\34\0\1\154\31\0\1\122\2\0\1\122\1\123"+
    "\1\47\4\122\1\0\6\122\1\0\2\122\1\0\1\122"+
    "\1\155\3\122\4\0\4\122\6\0\2\122\17\0\1\156"+
    "\6\0\1\157\37\0\1\122\2\0\1\122\1\123\1\47"+
    "\3\122\1\160\1\0\5\122\1\161\1\0\2\122\1\0"+
    "\5\122\4\0\4\122\6\0\2\122\6\0\1\122\2\0"+
    "\1\122\1\123\1\47\2\122\1\162\1\122\1\0\6\122"+
    "\1\0\2\122\1\0\5\122\4\0\4\122\6\0\2\122"+
    "\6\0\1\122\2\0\1\122\1\123\1\47\4\122\1\0"+
    "\1\122\1\163\4\122\1\0\2\122\1\0\5\122\4\0"+
    "\4\122\6\0\2\122\6\0\1\122\2\0\1\122\1\123"+
    "\1\47\2\122\1\164\1\122\1\0\6\122\1\0\2\122"+
    "\1\0\5\122\4\0\4\122\6\0\2\122\6\0\1\122"+
    "\2\0\1\122\1\123\1\47\4\122\1\0\6\122\1\0"+
    "\2\122\1\0\2\122\1\165\2\122\4\0\4\122\6\0"+
    "\2\122\15\0\1\166\50\0\1\167\2\0\1\167\1\170"+
    "\1\47\4\167\1\0\6\167\1\0\2\167\1\0\5\167"+
    "\4\0\4\167\6\0\2\167\6\0\1\170\2\0\2\170"+
    "\1\0\4\170\1\0\6\170\1\0\2\170\1\0\5\170"+
    "\4\0\4\170\6\0\2\170\6\0\1\167\2\0\1\167"+
    "\1\170\1\47\1\167\1\171\2\167\1\0\6\167\1\0"+
    "\2\167\1\0\5\167\4\0\4\167\6\0\2\167\6\0"+
    "\1\167\2\0\1\167\1\170\1\47\4\167\1\172\1\173"+
    "\5\167\1\0\2\167\1\0\5\167\4\0\4\167\6\0"+
    "\2\167\6\0\1\167\2\0\1\167\1\170\1\47\4\167"+
    "\1\0\6\167\1\0\2\167\1\0\2\167\1\174\2\167"+
    "\4\0\4\167\6\0\2\167\6\0\1\167\2\0\1\167"+
    "\1\170\1\47\4\167\1\0\2\167\1\175\3\167\1\0"+
    "\2\167\1\0\5\167\4\0\4\167\6\0\2\167\6\0"+
    "\1\167\2\0\1\167\1\170\1\47\1\176\3\167\1\0"+
    "\6\167\1\0\2\167\1\0\5\167\4\0\4\167\6\0"+
    "\2\167\27\0\2\177\35\0\1\167\2\0\1\167\1\170"+
    "\1\47\4\167\1\0\6\167\1\177\1\200\1\167\1\0"+
    "\5\167\4\0\4\167\6\0\2\167\6\0\1\167\2\0"+
    "\1\167\1\170\1\47\3\167\1\201\1\0\3\167\1\202"+
    "\2\167\1\0\2\167\1\0\5\167\4\0\4\167\6\0"+
    "\2\167\6\0\1\167\2\0\1\167\1\170\1\47\1\203"+
    "\3\167\1\0\6\167\1\0\2\167\1\0\5\167\4\0"+
    "\4\167\6\0\2\167\14\0\1\204\51\0\1\167\2\0"+
    "\1\167\1\170\1\47\1\205\3\167\1\0\6\167\1\0"+
    "\2\167\1\0\5\167\4\0\4\167\6\0\2\167\6\0"+
    "\1\167\2\0\1\167\1\170\1\47\4\167\1\0\1\167"+
    "\1\206\4\167\1\0\2\167\1\0\5\167\4\0\4\167"+
    "\6\0\2\167\6\0\1\167\2\0\1\167\1\170\1\47"+
    "\4\167\1\0\3\167\1\207\2\167\1\0\2\167\1\0"+
    "\5\167\4\0\4\167\6\0\2\167\26\0\1\210\37\0"+
    "\1\167\2\0\1\167\1\170\1\47\4\167\1\0\5\167"+
    "\1\211\1\0\2\167\1\0\5\167\4\0\4\167\6\0"+
    "\2\167\6\0\1\167\2\0\1\167\1\170\1\47\4\167"+
    "\1\0\6\167\1\0\2\167\1\0\1\167\1\212\3\167"+
    "\4\0\4\167\6\0\2\167\6\0\1\167\2\0\1\167"+
    "\1\170\1\47\4\167\1\213\1\214\5\167\1\0\2\167"+
    "\1\0\5\167\4\0\4\167\6\0\2\167\6\0\1\167"+
    "\2\0\1\167\1\170\1\47\4\167\1\0\4\167\1\215"+
    "\1\167\1\0\2\167\1\0\5\167\4\0\4\167\6\0"+
    "\2\167\34\0\1\216\31\0\1\167\2\0\1\167\1\170"+
    "\1\47\4\167\1\0\6\167\1\0\2\167\1\0\1\167"+
    "\1\217\3\167\4\0\4\167\6\0\2\167\6\0\1\167"+
    "\2\0\1\167\1\170\1\47\4\167\1\0\4\167\1\220"+
    "\1\167\1\0\2\167\1\0\5\167\4\0\4\167\6\0"+
    "\2\167\23\0\1\221\42\0\1\167\2\0\1\167\1\170"+
    "\1\47\4\167\1\0\2\167\1\222\3\167\1\0\2\167"+
    "\1\0\5\167\4\0\4\167\6\0\2\167\15\0\1\223"+
    "\100\0\1\224\27\0\1\167\2\0\1\167\1\170\1\47"+
    "\1\167\1\225\2\167\1\0\6\167\1\0\2\167\1\0"+
    "\5\167\4\0\4\167\6\0\2\167\6\0\1\167\2\0"+
    "\1\167\1\170\1\47\4\167\1\0\6\167\1\0\2\167"+
    "\1\0\3\167\1\226\1\167\4\0\4\167\6\0\2\167"+
    "\6\0\1\167\2\0\1\167\1\170\1\47\4\167\1\0"+
    "\2\167\1\227\3\167\1\0\2\167\1\0\5\167\4\0"+
    "\4\167\6\0\2\167\6\0\1\167\2\0\1\167\1\170"+
    "\1\47\4\167\1\0\5\167\1\230\1\0\2\167\1\0"+
    "\5\167\4\0\4\167\6\0\2\167\6\0\1\167\2\0"+
    "\1\167\1\170\1\47\4\167\1\0\6\167\1\0\2\167"+
    "\1\0\5\167\4\0\1\231\3\167\6\0\2\167\16\0"+
    "\1\232\47\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\6\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\170\2\0\1\234\1\170"+
    "\1\0\4\234\1\0\6\234\1\0\1\234\1\170\1\0"+
    "\5\234\4\0\4\234\6\0\2\234\6\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\4\233\1\235\1\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\46\0\1\236\17\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\6\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\2\233\1\237\1\233\6\0\2\233\6\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\240\1\241"+
    "\5\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\6\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\4\233\1\242\1\233\1\0\1\233\1\167"+
    "\1\0\5\233\4\0\4\233\6\0\2\233\6\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\0\2\233\1\243"+
    "\3\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\37\0\1\244\26\0\1\167\2\0\1\233"+
    "\1\170\1\47\4\233\1\0\6\233\1\0\1\233\1\167"+
    "\1\0\4\233\1\245\4\0\4\233\6\0\2\233\6\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\246\1\247"+
    "\5\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\6\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\6\233\1\0\1\233\1\167\1\0\1\233"+
    "\1\250\3\233\4\0\4\233\6\0\2\233\6\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\251\1\252\5\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\20\0\2\253\44\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\253\1\254\5\233\1\0\1\233\1\167"+
    "\1\0\5\233\4\0\4\233\6\0\2\233\6\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\0\1\233\1\255"+
    "\4\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\6\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\5\233\1\256\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\14\0\1\257\51\0"+
    "\1\167\2\0\1\233\1\170\1\47\1\260\3\233\1\0"+
    "\6\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\6\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\5\233\1\261\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\22\0\1\262\43\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\1\233"+
    "\1\263\4\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\2\233\1\264\3\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\25\0"+
    "\1\265\40\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\4\233\1\266\1\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\6\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\1\267\1\233"+
    "\25\0\1\270\40\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\4\233\1\271\1\233\1\0\1\233\1\167"+
    "\1\0\5\233\4\0\4\233\6\0\2\233\24\0\1\272"+
    "\41\0\1\167\2\0\1\233\1\170\1\47\4\233\1\0"+
    "\3\233\1\273\2\233\1\0\1\233\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\6\0\1\167\2\0\1\233"+
    "\1\170\1\47\4\233\1\0\6\233\1\0\1\233\1\167"+
    "\1\0\5\233\4\0\3\233\1\274\6\0\2\233\6\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\6\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\1\233\1\275"+
    "\2\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\4\233\1\276\1\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\17\0"+
    "\1\277\55\0\1\300\50\0\1\167\2\0\1\233\1\170"+
    "\1\47\1\233\1\301\2\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\24\0"+
    "\1\302\41\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\3\233\1\303\2\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\6\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\1\233\1\304\3\233\4\0\4\233\6\0"+
    "\2\233\15\0\1\305\50\0\1\167\2\0\1\233\1\170"+
    "\1\47\1\233\1\306\2\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\26\0"+
    "\1\307\37\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\5\233\1\310\1\0\1\233\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\6\0\1\167\2\0\1\233"+
    "\1\170\1\47\1\311\3\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\15\0"+
    "\1\312\50\0\1\167\2\0\1\233\1\170\1\47\1\233"+
    "\1\313\2\233\1\0\6\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\15\0\1\314\50\0"+
    "\1\167\2\0\1\233\1\170\1\47\1\233\1\315\2\233"+
    "\1\0\6\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\316\1\317\5\233\1\0\1\233\1\167"+
    "\1\0\5\233\4\0\4\233\6\0\2\233\14\0\1\320"+
    "\51\0\1\167\2\0\1\233\1\170\1\47\1\321\3\233"+
    "\1\0\6\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\6\233\1\322\1\323\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\6\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\5\233\1\324\1\0"+
    "\1\233\1\167\1\0\5\233\4\0\4\233\6\0\2\233"+
    "\27\0\2\325\35\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\6\233\1\325\1\326\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\20\0\2\327\44\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\327\1\330\5\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\23\0\1\331\42\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\2\233\1\332\3\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\6\0"+
    "\1\167\2\0\1\233\1\170\1\47\1\233\1\333\2\233"+
    "\1\0\6\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\1\233\1\334\2\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\6\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\5\233"+
    "\1\335\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\20\0\2\336\61\0\1\337\42\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\0\2\233\1\340"+
    "\3\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\6\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\0\6\233\1\341\1\342\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\25\0\1\343\40\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\0\4\233\1\344"+
    "\1\233\1\0\1\233\1\167\1\0\5\233\4\0\4\233"+
    "\6\0\2\233\35\0\1\345\30\0\1\167\2\0\1\233"+
    "\1\170\1\47\4\233\1\0\6\233\1\0\1\233\1\167"+
    "\1\0\2\233\1\346\2\233\4\0\4\233\6\0\2\233"+
    "\6\0\1\167\2\0\1\233\1\170\1\47\4\233\1\0"+
    "\6\233\1\0\1\233\1\167\1\0\2\233\1\347\2\233"+
    "\4\0\4\233\6\0\2\233\34\0\1\350\31\0\1\167"+
    "\2\0\1\233\1\170\1\47\4\233\1\0\6\233\1\0"+
    "\1\233\1\167\1\0\1\233\1\351\3\233\4\0\4\233"+
    "\6\0\2\233\24\0\1\352\41\0\1\167\2\0\1\233"+
    "\1\170\1\47\4\233\1\0\3\233\1\353\2\233\1\0"+
    "\1\233\1\167\1\0\5\233\4\0\4\233\6\0\2\233"+
    "\20\0\2\354\44\0\1\167\2\0\1\233\1\170\1\47"+
    "\4\233\1\354\1\355\5\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\35\0\1\356\30\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\6\233"+
    "\1\0\1\233\1\167\1\0\2\233\1\357\2\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\4\233\1\360\1\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\23\0"+
    "\1\361\42\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\2\233\1\362\3\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\15\0\1\363\50\0"+
    "\1\167\2\0\1\233\1\170\1\47\1\233\1\364\2\233"+
    "\1\0\6\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\6\233\1\0\1\233\1\167\1\0"+
    "\3\233\1\365\1\233\4\0\4\233\6\0\2\233\22\0"+
    "\1\366\61\0\1\367\41\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\3\233\1\370\2\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\34\0"+
    "\1\371\31\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\6\233\1\0\1\233\1\167\1\0\1\233\1\372"+
    "\3\233\4\0\4\233\6\0\2\233\24\0\1\373\41\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\3\233"+
    "\1\374\2\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\23\0\1\375\42\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\2\233\1\376\3\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\6\0\1\167\2\0\1\233\1\170\1\47\1\233"+
    "\1\377\2\233\1\0\6\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\27\0\2\u0100\35\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\6\233"+
    "\1\u0100\1\u0101\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\15\0\1\u0102\50\0\1\167\2\0\1\233\1\170"+
    "\1\47\1\233\1\u0103\2\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\15\0"+
    "\1\u0104\50\0\1\167\2\0\1\233\1\170\1\47\1\233"+
    "\1\u0105\2\233\1\0\6\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\22\0\1\u0106\43\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\1\233"+
    "\1\u0107\4\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\6\0\1\167\2\0\1\233\1\170"+
    "\1\47\1\233\1\u0108\2\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\23\0"+
    "\1\u0109\57\0\1\u010a\42\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\2\233\1\u010b\3\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\25\0"+
    "\1\u010c\40\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\0\4\233\1\u010d\1\233\1\0\1\233\1\167\1\0"+
    "\5\233\4\0\4\233\6\0\2\233\34\0\1\u010e\31\0"+
    "\1\167\2\0\1\233\1\170\1\47\4\233\1\0\6\233"+
    "\1\0\1\233\1\167\1\0\1\233\1\u010f\3\233\4\0"+
    "\4\233\6\0\2\233\36\0\1\u0110\27\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\3\233\1\u0111\1\233\4\0\4\233\6\0"+
    "\2\233\24\0\1\u0112\60\0\1\u0113\40\0\1\167\2\0"+
    "\1\233\1\170\1\47\4\233\1\0\4\233\1\u0114\1\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\20\0\2\u0115\44\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\u0115\1\u0116\5\233\1\0\1\233\1\167"+
    "\1\0\5\233\4\0\4\233\6\0\2\233\23\0\1\u0117"+
    "\42\0\1\167\2\0\1\233\1\170\1\47\4\233\1\0"+
    "\2\233\1\u0118\3\233\1\0\1\233\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\15\0\1\u0119\62\0\2\u011a"+
    "\44\0\1\167\2\0\1\233\1\170\1\47\4\233\1\u011a"+
    "\1\u011b\5\233\1\0\1\233\1\167\1\0\5\233\4\0"+
    "\4\233\6\0\2\233\15\0\1\u011c\50\0\1\167\2\0"+
    "\1\233\1\170\1\47\1\233\1\u011d\2\233\1\0\6\233"+
    "\1\0\1\233\1\167\1\0\5\233\4\0\4\233\6\0"+
    "\2\233\25\0\1\u011e\40\0\1\167\2\0\1\233\1\170"+
    "\1\47\4\233\1\0\4\233\1\u011f\1\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\25\0"+
    "\1\u0120\47\0\1\u0121\50\0\1\167\2\0\1\233\1\170"+
    "\1\47\1\233\1\u0122\2\233\1\0\6\233\1\0\1\233"+
    "\1\167\1\0\5\233\4\0\4\233\6\0\2\233\20\0"+
    "\2\u0123\44\0\1\167\2\0\1\233\1\170\1\47\4\233"+
    "\1\u0123\1\u0124\5\233\1\0\1\233\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\26\0\1\u0125\46\0\1\u0126"+
    "\50\0\1\167\2\0\1\233\1\170\1\47\1\233\1\u0127"+
    "\2\233\1\0\6\233\1\0\1\233\1\167\1\0\5\233"+
    "\4\0\4\233\6\0\2\233\27\0\2\u0128\60\0\1\u0129"+
    "\35\0\1\u012a\64\0\1\u012b\60\0\1\u012c\60\0\1\u012d"+
    "\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11184];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\4\1\4\11\1\1\5\11"+
    "\1\1\1\11\2\1\1\11\4\0\1\11\12\0\1\11"+
    "\2\0\1\1\5\0\1\1\1\0\1\1\15\0\3\11"+
    "\1\1\14\0\1\1\1\11\1\0\1\1\24\0\1\1"+
    "\35\0\1\11\1\0\1\1\5\0\3\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\11\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\4\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\11\1\1\1\0\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<ErrorC> errores = new ArrayList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosF.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errores.add(new ErrorC("Error Lexico", yytext(), yyline, yycolumn, "No pertenece al lenguaje"));
            }
          case 53: break;
          case 2: 
            { return new Symbol(SimbolosF.numero, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 3: 
            { return new Symbol(SimbolosF.dolar, yycolumn, yyline, "$");
            }
          case 55: break;
          case 4: 
            { return new Symbol(SimbolosF.negacion, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 5: 
            { return new Symbol(SimbolosF.menos, yycolumn, yyline, "-");
            }
          case 57: break;
          case 6: 
            { return new Symbol(SimbolosF.mas, yycolumn, yyline, "+");
            }
          case 58: break;
          case 7: 
            { return new Symbol(SimbolosF.por, yycolumn, yyline, "*");
            }
          case 59: break;
          case 8: 
            { return new Symbol(SimbolosF.sobre, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 9: 
            { return new Symbol(SimbolosF.coma, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 10: 
            { return new Symbol(SimbolosF.llaveA, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 11: 
            { return new Symbol(SimbolosF.llaveC, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 12: 
            { return new Symbol(SimbolosF.parentesisA, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 13: 
            { return new Symbol(SimbolosF.parentesisC, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 14: 
            { return new Symbol(SimbolosF.asignacion, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 15: 
            { return new Symbol(SimbolosF.puntoYComa, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 16: 
            { 
            }
          case 68: break;
          case 17: 
            { return new Symbol(SimbolosF.cadena, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 18: 
            { return new Symbol(SimbolosF.id, yycolumn, yyline, "id");
            }
          case 70: break;
          case 19: 
            { return new Symbol(SimbolosF.de, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 20: 
            { return new Symbol(SimbolosF.raizCuadrada, yycolumn, yyline, "Rq");
            }
          case 72: break;
          case 21: 
            { return new Symbol(SimbolosF.igualIgual, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 22: 
            { return new Symbol(SimbolosF.conjuncion, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 23: 
            { return new Symbol(SimbolosF.disyuncion, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 24: 
            { return new Symbol(SimbolosF.potencia, yycolumn, yyline, "Ptn");
            }
          case 76: break;
          case 25: 
            { return new Symbol(SimbolosF.img, yycolumn, yyline, "img");
            }
          case 77: break;
          case 26: 
            { return new Symbol(SimbolosF.obtener, yycolumn, yyline, "get");
            }
          case 78: break;
          case 27: 
            { return new Symbol(SimbolosF.tipo, yycolumn, yyline, "tipo");
            }
          case 79: break;
          case 28: 
            { return new Symbol(SimbolosF.clave, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 29: 
            { return new Symbol(SimbolosF.color, yycolumn, yyline, "color");
            }
          case 81: break;
          case 30: 
            { return new Symbol(SimbolosF.marca, yycolumn, yyline, "marca");
            }
          case 82: break;
          case 31: 
            { return new Symbol(SimbolosF.donde, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 32: 
            { return new Symbol(SimbolosF.email, yycolumn, yyline, "email");
            }
          case 84: break;
          case 33: 
            { return new Symbol(SimbolosF.consulta, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 34: 
            { return new Symbol(SimbolosF.codigo, yycolumn, yyline, "codigo");
            }
          case 86: break;
          case 35: 
            { return new Symbol(SimbolosF.precio, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 36: 
            { return new Symbol(SimbolosF.tienda, yycolumn, yyline, "tienda");
            }
          case 88: break;
          case 37: 
            { return new Symbol(SimbolosF.size, yycolumn, yyline, "tamanio");
            }
          case 89: break;
          case 38: 
            { return new Symbol(SimbolosF.nombre, yycolumn, yyline, "nombre");
            }
          case 90: break;
          case 39: 
            { return new Symbol(SimbolosF.peticion, yycolumn, yyline, "request");
            }
          case 91: break;
          case 40: 
            { return new Symbol(SimbolosF.extraer, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 41: 
            { return new Symbol(SimbolosF.user, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 42: 
            { return new Symbol(SimbolosF.cantidad, yycolumn, yyline, "cantidad");
            }
          case 94: break;
          case 43: 
            { return new Symbol(SimbolosF.password, yycolumn, yyline, "password");
            }
          case 95: break;
          case 44: 
            { return new Symbol(SimbolosF.producto, yycolumn, yyline, "producto");
            }
          case 96: break;
          case 45: 
            { return new Symbol(SimbolosF.apellido, yycolumn, yyline, "apellido");
            }
          case 97: break;
          case 46: 
            { return new Symbol(SimbolosF.sucursal, yycolumn, yyline, "sucursal");
            }
          case 98: break;
          case 47: 
            { return new Symbol(SimbolosF.telefono, yycolumn, yyline, "telefono");
            }
          case 99: break;
          case 48: 
            { return new Symbol(SimbolosF.direccion, yycolumn, yyline, "direccion");
            }
          case 100: break;
          case 49: 
            { return new Symbol(SimbolosF.propietario, yycolumn, yyline, "propietario");
            }
          case 101: break;
          case 50: 
            { return new Symbol(SimbolosF.crearUsuario, yycolumn, yyline, "crearUsuario");
            }
          case 102: break;
          case 51: 
            { return new Symbol(SimbolosF.inicioUsuario, yycolumn, yyline, "inicioUsuario");
            }
          case 103: break;
          case 52: 
            { return new Symbol(SimbolosF.correo, yycolumn, yyline, yytext());
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
