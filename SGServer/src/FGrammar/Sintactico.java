
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 01 10:17:04 CST 2018
//----------------------------------------------------

package FGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 01 10:17:04 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\005\005\000\002\006\004" +
    "\000\002\006\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\004\000\002\004" +
    "\003\000\002\010\005\000\002\011\005\000\002\012\005" +
    "\000\002\013\005\000\002\014\006\000\002\015\006\000" +
    "\002\016\006\000\002\017\006\000\002\020\005\000\002" +
    "\021\005\000\002\007\006\000\002\007\006\000\002\023" +
    "\005\000\002\024\005\000\002\025\005\000\002\026\005" +
    "\000\002\027\005\000\002\030\005\000\002\031\006\000" +
    "\002\032\006\000\002\033\006\000\002\034\006\000\002" +
    "\035\006\000\002\036\006\000\002\037\005\000\002\040" +
    "\005\000\002\041\005\000\002\042\005\000\002\043\005" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\045\004\000\002\045\003\000\002\022" +
    "\005\000\002\047\010\000\002\050\006\000\002\051\005" +
    "\000\002\052\006\000\002\053\005\000\002\054\006\000" +
    "\002\055\005\000\002\056\006\000\002\057\005\000\002" +
    "\060\005\000\002\061\005\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\063\004\000\002\063\003\000" +
    "\002\046\005\000\002\065\005\000\002\070\005\000\002" +
    "\066\005\000\002\067\005\000\002\071\005\000\002\072" +
    "\005\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\074\005\000\002\074\002\000\002\075\010\000\002" +
    "\100\010\000\002\101\006\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\103\004\000\002\103\003\000\002\105\005\000\002" +
    "\104\006\000\002\106\005\000\002\107\006\000\002\110" +
    "\005\000\002\111\006\000\002\113\006\000\002\112\005" +
    "\000\002\114\005\000\002\115\006\000\002\116\005\000" +
    "\002\117\005\000\002\120\005\000\002\121\005\000\002" +
    "\122\005\000\002\077\005\000\002\127\005\000\002\130" +
    "\005\000\002\131\005\000\002\132\005\000\002\133\005" +
    "\000\002\124\003\000\002\124\012\000\002\125\010\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\135\005" +
    "\000\002\135\002\000\002\136\005\000\002\136\005\000" +
    "\002\136\005\000\002\136\005\000\002\136\004\000\002" +
    "\136\004\000\002\136\005\000\002\136\003\000\002\123" +
    "\003\000\002\123\005\000\002\140\014\000\002\140\014" +
    "\000\002\140\017\000\002\140\017\000\002\140\017\000" +
    "\002\140\017\000\002\140\017\000\002\140\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\010\002\ufffe\003\006\004\005\001\002\000" +
    "\006\002\000\004\005\001\002\000\004\005\u018c\001\002" +
    "\000\010\002\ufffe\003\006\004\005\001\002\000\006\002" +
    "\ufffb\004\ufffb\001\002\000\004\004\013\001\002\000\004" +
    "\002\012\001\002\000\004\002\001\001\002\000\014\006" +
    "\041\015\037\023\042\045\036\046\040\001\002\000\004" +
    "\004\u0176\001\002\000\004\004\ufffa\001\002\000\004\004" +
    "\uff86\001\002\000\004\004\ufff5\001\002\000\004\004\u0143" +
    "\001\002\000\004\004\ufff2\001\002\000\004\004\362\001" +
    "\002\000\004\004\313\001\002\000\004\004\ufff6\001\002" +
    "\000\004\004\ufff7\001\002\000\004\004\ufff4\001\002\000" +
    "\004\004\032\001\002\000\004\004\ufff9\001\002\000\004" +
    "\004\ufff8\001\002\000\016\005\035\006\041\015\037\023" +
    "\042\045\036\046\040\001\002\000\004\004\ufff3\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\004\011\310\001" +
    "\002\000\022\016\056\024\304\025\054\032\133\033\126" +
    "\034\135\035\137\036\132\001\002\000\004\004\303\001" +
    "\002\000\010\024\207\026\210\035\206\001\002\000\004" +
    "\004\205\001\002\000\020\007\043\016\056\020\053\022" +
    "\044\024\052\025\054\026\046\001\002\000\004\044\107" +
    "\001\002\000\004\044\105\001\002\000\006\011\uffa9\037" +
    "\075\001\002\000\004\044\072\001\002\000\006\011\uffaf" +
    "\037\uffaf\001\002\000\006\011\uffac\037\uffac\001\002\000" +
    "\006\011\uffb0\037\uffb0\001\002\000\004\044\067\001\002" +
    "\000\004\044\065\001\002\000\004\044\063\001\002\000" +
    "\006\011\uffae\037\uffae\001\002\000\004\044\061\001\002" +
    "\000\006\011\uffab\037\uffab\001\002\000\006\011\uffad\037" +
    "\uffad\001\002\000\004\047\062\001\002\000\006\011\uffb4" +
    "\037\uffb4\001\002\000\004\050\064\001\002\000\006\011" +
    "\uffb5\037\uffb5\001\002\000\004\050\066\001\002\000\006" +
    "\011\uffb1\037\uffb1\001\002\000\004\047\070\001\002\000" +
    "\010\004\071\011\uffb6\037\uffb6\001\002\000\004\004\uffca" +
    "\001\002\000\004\050\073\001\002\000\006\011\uffb3\037" +
    "\uffb3\001\002\000\004\011\103\001\002\000\016\016\056" +
    "\020\053\022\044\024\077\025\054\026\046\001\002\000" +
    "\006\011\uffa9\037\075\001\002\000\004\044\100\001\002" +
    "\000\004\047\101\001\002\000\006\011\uffb6\037\uffb6\001" +
    "\002\000\004\011\uffaa\001\002\000\004\004\104\001\002" +
    "\000\004\004\uffa8\001\002\000\004\047\106\001\002\000" +
    "\006\011\uffb2\037\uffb2\001\002\000\004\050\110\001\002" +
    "\000\004\004\111\001\002\000\004\004\112\001\002\000" +
    "\004\045\121\001\002\000\004\004\114\001\002\000\004" +
    "\023\116\001\002\000\004\004\uff85\001\002\000\004\011" +
    "\117\001\002\000\004\004\120\001\002\000\004\004\uffc9" +
    "\001\002\000\022\016\056\024\077\025\054\032\133\033" +
    "\126\034\135\035\137\036\132\001\002\000\006\011\uff81" +
    "\037\uff81\001\002\000\006\011\uff79\037\177\001\002\000" +
    "\006\011\uff7e\037\uff7e\001\002\000\006\011\uff83\037\uff83" +
    "\001\002\000\004\044\175\001\002\000\006\011\uff7b\037" +
    "\uff7b\001\002\000\006\011\uff82\037\uff82\001\002\000\006" +
    "\011\uff7c\037\uff7c\001\002\000\004\044\173\001\002\000" +
    "\004\044\145\001\002\000\006\011\uff80\037\uff80\001\002" +
    "\000\004\044\143\001\002\000\006\011\uff7d\037\uff7d\001" +
    "\002\000\004\044\141\001\002\000\006\011\uff7f\037\uff7f" +
    "\001\002\000\004\050\142\001\002\000\006\011\uff87\037" +
    "\uff87\001\002\000\004\047\144\001\002\000\006\011\uff89" +
    "\037\uff89\001\002\000\006\040\147\050\146\001\002\000" +
    "\010\004\uff70\011\uff70\037\uff70\001\002\000\012\030\154" +
    "\031\153\042\155\050\151\001\002\000\006\011\uff8b\037" +
    "\uff8b\001\002\000\016\011\uff71\012\uff71\013\uff71\014\uff71" +
    "\041\uff71\043\uff71\001\002\000\014\011\162\012\161\013" +
    "\157\014\160\041\172\001\002\000\012\030\154\031\153" +
    "\042\155\050\151\001\002\000\012\030\154\031\153\042" +
    "\155\050\151\001\002\000\012\030\154\031\153\042\155" +
    "\050\151\001\002\000\014\011\162\012\161\013\157\014" +
    "\160\043\163\001\002\000\012\030\154\031\153\042\155" +
    "\050\151\001\002\000\012\030\154\031\153\042\155\050" +
    "\151\001\002\000\012\030\154\031\153\042\155\050\151" +
    "\001\002\000\012\030\154\031\153\042\155\050\151\001" +
    "\002\000\016\011\uff72\012\uff72\013\uff72\014\uff72\041\uff72" +
    "\043\uff72\001\002\000\016\011\uff77\012\uff77\013\157\014" +
    "\160\041\uff77\043\uff77\001\002\000\016\011\uff78\012\uff78" +
    "\013\157\014\160\041\uff78\043\uff78\001\002\000\016\011" +
    "\uff75\012\uff75\013\uff75\014\uff75\041\uff75\043\uff75\001\002" +
    "\000\016\011\uff76\012\uff76\013\uff76\014\uff76\041\uff76\043" +
    "\uff76\001\002\000\016\011\uff74\012\uff74\013\uff74\014\uff74" +
    "\041\uff74\043\uff74\001\002\000\016\011\uff73\012\uff73\013" +
    "\uff73\014\uff73\041\uff73\043\uff73\001\002\000\010\004\uff6f" +
    "\011\uff6f\037\uff6f\001\002\000\006\040\147\050\146\001" +
    "\002\000\006\011\uff88\037\uff88\001\002\000\004\047\176" +
    "\001\002\000\006\011\uff8a\037\uff8a\001\002\000\022\016" +
    "\056\024\077\025\054\032\133\033\126\034\135\035\137" +
    "\036\132\001\002\000\004\011\201\001\002\000\004\004" +
    "\202\001\002\000\004\004\uff84\001\002\000\006\011\uff79" +
    "\037\177\001\002\000\004\011\uff7a\001\002\000\004\004" +
    "\ufff0\001\002\000\004\044\261\001\002\000\004\044\235" +
    "\001\002\000\004\044\211\001\002\000\004\050\212\001" +
    "\002\000\006\024\214\035\213\001\002\000\004\044\226" +
    "\001\002\000\004\044\215\001\002\000\004\047\216\001" +
    "\002\000\006\011\220\035\217\001\002\000\004\044\222" +
    "\001\002\000\004\004\221\001\002\000\004\004\uff6d\001" +
    "\002\000\004\050\223\001\002\000\004\011\224\001\002" +
    "\000\004\004\225\001\002\000\004\004\uff67\001\002\000" +
    "\004\050\227\001\002\000\004\024\230\001\002\000\004" +
    "\044\231\001\002\000\004\047\232\001\002\000\004\011" +
    "\233\001\002\000\004\004\234\001\002\000\004\004\uff68" +
    "\001\002\000\004\047\236\001\002\000\006\026\240\035" +
    "\237\001\002\000\004\044\252\001\002\000\004\044\241" +
    "\001\002\000\004\050\242\001\002\000\006\011\244\035" +
    "\243\001\002\000\004\044\246\001\002\000\004\004\245" +
    "\001\002\000\004\004\uff6e\001\002\000\004\050\247\001" +
    "\002\000\004\011\250\001\002\000\004\004\251\001\002" +
    "\000\004\004\uff6c\001\002\000\004\050\253\001\002\000" +
    "\004\026\254\001\002\000\004\044\255\001\002\000\004" +
    "\050\256\001\002\000\004\011\257\001\002\000\004\004" +
    "\260\001\002\000\004\004\uff6b\001\002\000\004\050\262" +
    "\001\002\000\006\024\263\026\264\001\002\000\004\044" +
    "\274\001\002\000\004\044\265\001\002\000\004\050\266" +
    "\001\002\000\004\024\267\001\002\000\004\044\270\001" +
    "\002\000\004\047\271\001\002\000\004\011\272\001\002" +
    "\000\004\004\273\001\002\000\004\004\uff69\001\002\000" +
    "\004\047\275\001\002\000\004\026\276\001\002\000\004" +
    "\044\277\001\002\000\004\050\300\001\002\000\004\011" +
    "\301\001\002\000\004\004\302\001\002\000\004\004\uff6a" +
    "\001\002\000\004\004\uffe5\001\002\000\004\044\305\001" +
    "\002\000\004\047\306\001\002\000\010\004\307\011\uffb6" +
    "\037\uffb6\001\002\000\004\004\uffa7\001\002\000\004\004" +
    "\311\001\002\000\006\002\uffea\004\uffea\001\002\000\004" +
    "\004\346\001\002\000\006\007\335\010\344\001\002\000" +
    "\004\004\334\001\002\000\004\051\325\001\002\000\004" +
    "\050\317\001\002\000\004\004\320\001\002\000\004\007" +
    "\322\001\002\000\004\004\uffe9\001\002\000\004\011\323" +
    "\001\002\000\004\004\324\001\002\000\004\004\uffec\001" +
    "\002\000\004\004\327\001\002\000\004\004\uffe8\001\002" +
    "\000\004\010\330\001\002\000\004\011\331\001\002\000" +
    "\004\004\332\001\002\000\004\004\uffed\001\002\000\004" +
    "\004\337\001\002\000\004\007\335\001\002\000\004\004" +
    "\336\001\002\000\004\050\uffef\001\002\000\004\006\341" +
    "\001\002\000\004\004\uffe6\001\002\000\004\011\342\001" +
    "\002\000\004\004\343\001\002\000\004\004\uffeb\001\002" +
    "\000\004\004\345\001\002\000\004\051\uffee\001\002\000" +
    "\004\010\344\001\002\000\004\004\337\001\002\000\004" +
    "\004\uffe7\001\002\000\006\040\147\050\146\001\002\000" +
    "\004\050\u0136\001\002\000\004\004\uff9e\001\002\000\004" +
    "\047\u0130\001\002\000\004\004\uffa4\001\002\000\004\004" +
    "\uffa2\001\002\000\004\047\u012a\001\002\000\004\004\uffa1" +
    "\001\002\000\004\050\u0124\001\002\000\022\016\u0110\025" +
    "\u010f\027\u010d\032\u010e\033\u010b\034\u010c\035\u0112\036\u0113" +
    "\001\002\000\004\004\uff9c\001\002\000\004\004\uff9f\001" +
    "\002\000\004\004\uffa5\001\002\000\006\040\147\050\146" +
    "\001\002\000\004\004\u0109\001\002\000\004\047\u0102\001" +
    "\002\000\004\004\uffa0\001\002\000\004\047\374\001\002" +
    "\000\004\004\uffa3\001\002\000\004\004\375\001\002\000" +
    "\004\016\377\001\002\000\004\004\uffd9\001\002\000\004" +
    "\011\u0100\001\002\000\004\004\u0101\001\002\000\004\004" +
    "\uffde\001\002\000\004\004\u0103\001\002\000\004\034\u0105" +
    "\001\002\000\004\004\uff8f\001\002\000\004\011\u0106\001" +
    "\002\000\004\004\u0107\001\002\000\004\004\uff96\001\002" +
    "\000\004\004\uff8c\001\002\000\024\016\u0110\025\u010f\027" +
    "\u010d\032\u010e\033\u010b\034\u010c\035\u0112\036\u0113\045\u0111" +
    "\001\002\000\004\004\uff9d\001\002\000\004\004\u011d\001" +
    "\002\000\004\004\u011c\001\002\000\004\004\u011b\001\002" +
    "\000\004\004\u011a\001\002\000\004\004\u0119\001\002\000" +
    "\004\004\u0118\001\002\000\004\011\u0116\001\002\000\004" +
    "\004\u0115\001\002\000\004\004\u0114\001\002\000\006\040" +
    "\uff94\050\uff94\001\002\000\004\050\uff93\001\002\000\004" +
    "\004\u0117\001\002\000\004\004\uffa6\001\002\000\004\047" +
    "\uffe4\001\002\000\004\050\uffc8\001\002\000\006\040\uff9b" +
    "\050\uff9b\001\002\000\004\047\uffc4\001\002\000\004\047" +
    "\uff97\001\002\000\004\047\uff99\001\002\000\004\004\u011f" +
    "\001\002\000\004\032\u0121\001\002\000\004\004\uff91\001" +
    "\002\000\004\011\u0122\001\002\000\004\004\u0123\001\002" +
    "\000\004\004\uff9a\001\002\000\004\004\u0125\001\002\000" +
    "\004\035\u0127\001\002\000\004\004\uff8d\001\002\000\004" +
    "\011\u0128\001\002\000\004\004\u0129\001\002\000\004\004" +
    "\uff92\001\002\000\004\004\u012b\001\002\000\004\033\u012d" +
    "\001\002\000\004\004\uff90\001\002\000\004\011\u012e\001" +
    "\002\000\004\004\u012f\001\002\000\004\004\uff98\001\002" +
    "\000\004\004\u0131\001\002\000\004\027\u0133\001\002\000" +
    "\004\004\uffc0\001\002\000\004\011\u0134\001\002\000\004" +
    "\004\u0135\001\002\000\004\004\uffc3\001\002\000\004\004" +
    "\u0137\001\002\000\004\025\u0139\001\002\000\004\004\uffc2" +
    "\001\002\000\004\011\u013a\001\002\000\004\004\u013b\001" +
    "\002\000\004\004\uffc7\001\002\000\004\004\u013d\001\002" +
    "\000\004\036\u013f\001\002\000\004\004\uff8e\001\002\000" +
    "\004\011\u0140\001\002\000\004\004\u0141\001\002\000\004" +
    "\004\uff95\001\002\000\004\047\u0170\001\002\000\020\007" +
    "\335\010\344\016\u0110\017\u0157\020\u0153\021\u0154\022\u0155" +
    "\001\002\000\004\052\u016a\001\002\000\004\004\uffd0\001" +
    "\002\000\004\004\uffd1\001\002\000\004\004\uffd3\001\002" +
    "\000\004\004\uffd2\001\002\000\004\050\u0164\001\002\000" +
    "\004\004\uffcc\001\002\000\004\047\u015e\001\002\000\004" +
    "\004\u0150\001\002\000\004\004\uffd4\001\002\000\004\004" +
    "\uffcf\001\002\000\004\004\uffce\001\002\000\022\007\335" +
    "\010\344\015\u0156\016\u0110\017\u0157\020\u0153\021\u0154\022" +
    "\u0155\001\002\000\004\004\uffcd\001\002\000\004\004\uffcb" +
    "\001\002\000\004\004\u015d\001\002\000\004\004\u015c\001" +
    "\002\000\004\004\u015b\001\002\000\004\011\u0159\001\002" +
    "\000\004\004\u0158\001\002\000\004\047\uffe3\001\002\000" +
    "\004\004\u015a\001\002\000\004\004\uffdf\001\002\000\004" +
    "\047\uffe1\001\002\000\004\052\uffe0\001\002\000\004\050" +
    "\uffe2\001\002\000\004\004\u015f\001\002\000\004\017\u0161" +
    "\001\002\000\004\004\uffd8\001\002\000\004\011\u0162\001" +
    "\002\000\004\004\u0163\001\002\000\004\004\uffdd\001\002" +
    "\000\004\004\u0165\001\002\000\004\020\u0167\001\002\000" +
    "\004\004\uffd7\001\002\000\004\011\u0168\001\002\000\004" +
    "\004\u0169\001\002\000\004\004\uffdc\001\002\000\004\004" +
    "\u016b\001\002\000\004\021\u016d\001\002\000\004\004\uffd5" +
    "\001\002\000\004\011\u016e\001\002\000\004\004\u016f\001" +
    "\002\000\004\004\uffda\001\002\000\004\004\u0171\001\002" +
    "\000\004\022\u0173\001\002\000\004\004\uffd6\001\002\000" +
    "\004\011\u0174\001\002\000\004\004\u0175\001\002\000\004" +
    "\004\uffdb\001\002\000\016\016\u0110\020\u0153\022\u0155\025" +
    "\u010f\026\u0183\027\u010d\001\002\000\004\050\u0185\001\002" +
    "\000\004\004\uffbb\001\002\000\004\004\uffbf\001\002\000" +
    "\004\004\uffba\001\002\000\004\004\uffbd\001\002\000\004" +
    "\004\uffbe\001\002\000\004\004\uffb8\001\002\000\004\004" +
    "\u0180\001\002\000\004\004\uffbc\001\002\000\020\016\u0110" +
    "\020\u0153\022\u0155\023\116\025\u010f\026\u0183\027\u010d\001" +
    "\002\000\004\004\uffb7\001\002\000\004\004\uffb9\001\002" +
    "\000\004\004\u0184\001\002\000\004\050\uffc6\001\002\000" +
    "\004\004\u0187\001\002\000\004\004\uffc1\001\002\000\004" +
    "\026\u0188\001\002\000\004\011\u0189\001\002\000\004\004" +
    "\u018a\001\002\000\004\004\uffc5\001\002\000\004\002\uffff" +
    "\001\002\000\004\004\u018d\001\002\000\004\004\ufff1\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\012\002\010\005\006\006\003\010\007\001" +
    "\001\000\006\005\u018d\010\007\001\001\000\002\001\001" +
    "\000\012\002\u018a\005\006\006\003\010\007\001\001\000" +
    "\002\001\001\000\036\003\020\004\026\007\014\011\022" +
    "\022\027\023\017\046\030\047\013\075\024\077\023\100" +
    "\021\124\016\125\015\140\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\024\371\026" +
    "\u0148\027\u0141\037\u017a\041\u0177\042\u017e\051\351\053\u0176" +
    "\055\353\057\u0178\060\u017b\061\u0179\062\u017c\063\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\315\013\314\020\u014c\021\u0145\024\371\025" +
    "\u014a\026\u0148\027\u0141\030\u0143\037\u0146\040\u0147\041\u0144" +
    "\042\u014e\043\u014d\044\u0149\045\u014b\001\001\000\002\001" +
    "\001\000\046\024\371\037\354\051\351\055\353\057\364" +
    "\061\372\102\362\103\366\105\365\106\356\110\367\112" +
    "\350\114\360\116\355\117\357\120\370\121\363\122\352" +
    "\001\001\000\012\012\315\013\314\020\311\021\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\032\007\014\011\022\017\033\022\027\023" +
    "\017\046\030\047\013\075\024\077\023\100\021\124\016" +
    "\125\015\140\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\065\126\066\127\070\124\127" +
    "\133\130\137\131\123\132\135\133\130\134\122\137\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\065\050\066\054\067\057\070\046\071\047" +
    "\072\056\073\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\065\050\066" +
    "\054\067\057\070\046\071\047\072\056\073\075\001\001" +
    "\000\004\074\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\125\112\001\001" +
    "\000\002\001\001\000\004\050\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\065\126\066\127\070\124\127" +
    "\133\130\137\131\123\132\135\133\130\134\122\137\121" +
    "\001\001\000\002\001\001\000\004\135\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\147\001\001\000\002\001\001\000" +
    "\004\136\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\170\001\001\000\004\136" +
    "\167\001\001\000\004\136\155\001\001\000\002\001\001" +
    "\000\004\136\166\001\001\000\004\136\165\001\001\000" +
    "\004\136\164\001\001\000\004\136\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\065\126" +
    "\066\127\070\124\127\133\130\137\131\123\132\135\133" +
    "\130\134\202\137\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\314\021\346\001" +
    "\001\000\002\001\001\000\006\012\315\020\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\347\001\001\000" +
    "\002\001\001\000\004\123\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\u011d\001\001\000\046" +
    "\024\371\037\354\051\351\055\353\057\364\061\372\101" +
    "\u0107\102\u0109\105\365\106\356\110\367\112\350\114\360" +
    "\116\355\117\357\120\370\121\363\122\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\315\013\314\020\u014c\021\u0145\024\371\025" +
    "\u014a\026\u0148\027\u0141\030\u0143\031\u0151\037\u0146\040\u0147" +
    "\041\u0144\042\u014e\043\u014d\044\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\024\371\026\u0148\027" +
    "\u0141\037\u017a\041\u0177\042\u017e\050\u0180\051\351\053\u0176" +
    "\055\353\057\u0178\060\u017b\061\u0179\062\u0181\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0185\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<ErrorC> errores = new ArrayList<>();

    public void syntax_error(Symbol s)
    {   
         if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


         

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // GET ::= dolar obtener propietario asignacion numero tipo asignacion cadena sucursal asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // GET ::= dolar obtener propietario asignacion numero sucursal asignacion numero tipo asignacion cadena menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // GET ::= dolar obtener sucursal asignacion numero propietario asignacion numero tipo asignacion cadena menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // GET ::= dolar obtener sucursal asignacion numero tipo asignacion cadena propietario asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // GET ::= dolar obtener tipo asignacion cadena sucursal asignacion numero propietario asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // GET ::= dolar obtener tipo asignacion cadena propietario asignacion numero sucursal asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // GET ::= dolar obtener propietario asignacion numero tipo asignacion cadena menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // GET ::= dolar obtener tipo asignacion cadena propietario asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERACION_ARITMETICA ::= llaveA EXPRESION llaveC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERACION_ARITMETICA ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= parentesisA EXPRESION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= raizCuadrada EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= EXPRESION sobre EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OTRO_CAMPOBC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOBC",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OTRO_CAMPOBC ::= coma CAMPOS_BC OTRO_CAMPOBC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOBC",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CAMPOS_BC ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CAMPOS_BC ::= SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CAMPOS_BC ::= SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CAMPOS_BC ::= COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CAMPOS_BC ::= MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CAMPOS_BC ::= CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CAMPOS_BC ::= IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CAMPOS_BC ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CAMPOS_BC ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BC_ESTANDAR ::= dolar producto CAMPOS_BC OTRO_CAMPOBC menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_ESTANDAR",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BC_PRODUCTO ::= dolar tienda id asignacion numero dolar BC_ESTANDAR C_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_PRODUCTO",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BC_PRODUCTO ::= BC_ESTANDAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_PRODUCTO",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SUCURSAL ::= sucursal asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUCURSAL",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SIZE ::= size asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIZE",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COLOR ::= color asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MARCA ::= marca asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MARCA",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CANTIDAD ::= cantidad asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDAD",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CREAR_PRODUCTO ::= O_PRODUCTO OTRO_CAMPOCP C_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CREAR_PRODUCTO",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // G_SUCURSAL ::= O_SUCURSAL numero C_SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_SUCURSAL",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // G_SIZE ::= O_SIZE OPERACION_ARITMETICA C_SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_SIZE",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // G_COLOR ::= O_COLOR cadena C_COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_COLOR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // G_MARCA ::= O_MARCA cadena C_MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_MARCA",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // G_CANTIDAD ::= O_CANTIDAD OPERACION_ARITMETICA C_CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_CANTIDAD",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // C_SUCURSAL ::= dolar sucursal menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SUCURSAL",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // O_SUCURSAL ::= dolar sucursal dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SUCURSAL",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // O_SIZE ::= dolar size dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SIZE",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // C_SIZE ::= dolar size menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SIZE",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // C_COLOR ::= dolar color menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_COLOR",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // O_COLOR ::= dolar color dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_COLOR",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // C_MARCA ::= dolar marca menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_MARCA",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // O_MARCA ::= dolar marca dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_MARCA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // C_CANTIDAD ::= dolar cantidad menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CANTIDAD",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // O_CANTIDAD ::= dolar cantidad dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CANTIDAD",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OTRO_CAMPOCP ::= CAMPO_CREARPRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOCP",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OTRO_CAMPOCP ::= OTRO_CAMPOCP CAMPO_CREARPRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOCP",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CAMPO_CREARPRODUCTO ::= G_SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAMPO_CREARPRODUCTO ::= G_SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAMPO_CREARPRODUCTO ::= G_COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAMPO_CREARPRODUCTO ::= G_MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAMPO_CREARPRODUCTO ::= G_CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CAMPO_CREARPRODUCTO ::= G_IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CAMPO_CREARPRODUCTO ::= G_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CAMPO_CREARPRODUCTO ::= G_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // C_PRODUCTO ::= dolar producto menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PRODUCTO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // O_PRODUCTO ::= dolar producto tipo asignacion cadena dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODT ::= dolar tienda CAMPO_MOD OTRO_CAMPOMOD menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODT",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OTRO_CAMPOMOD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOMOD",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OTRO_CAMPOMOD ::= coma CAMPO_MOD OTRO_CAMPOMOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOMOD",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CAMPO_MOD ::= TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CAMPO_MOD ::= DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CAMPO_MOD ::= PROP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CAMPO_MOD ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CAMPO_MOD ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CAMPO_MOD ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TELEFONO ::= telefono asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TELEFONO",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DIRECCION ::= direccion asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIRECCION",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PROP ::= propietario asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROP",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NOMBRE ::= nombre asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CODIGO ::= codigo asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= tipo asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIENDA ::= O_TIENDA OTRO_CAMPOT C_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIENDA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OTRO_CAMPOT ::= CAMPO_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOT",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OTRO_CAMPOT ::= OTRO_CAMPOT CAMPO_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOT",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CAMPO_TIENDA ::= G_IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CAMPO_TIENDA ::= G_TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CAMPO_TIENDA ::= G_DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CAMPO_TIENDA ::= G_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CAMPO_TIENDA ::= G_PROPIETARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CAMPO_TIENDA ::= G_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // G_IMAGEN ::= O_IMAGEN cadena C_IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_IMAGEN",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // G_PROPIETARIO ::= O_PROPIETARIO numero C_PROPIETARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PROPIETARIO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // G_CODIGO ::= O_CODIGO numero C_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_CODIGO",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // C_IMAGEN ::= dolar img menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_IMAGEN",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // O_IMAGEN ::= dolar img dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_IMAGEN",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // C_PROPIETARIO ::= dolar propietario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PROPIETARIO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // O_PROPIETARIO ::= dolar propietario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PROPIETARIO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // C_CODIGO ::= dolar codigo menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CODIGO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // O_CODIGO ::= dolar codigo dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CODIGO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // C_TIENDA ::= dolar tienda menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TIENDA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // O_TIENDA ::= dolar tienda tipo asignacion cadena dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TIENDA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REGISTRO ::= O_CREAR OTRO_CAMPOR C_CREAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGISTRO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OTRO_CAMPOR ::= CAMPO_REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OTRO_CAMPOR ::= OTRO_CAMPOR CAMPO_REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CAMPO_REGISTRO ::= G_DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CAMPO_REGISTRO ::= G_EMAIL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CAMPO_REGISTRO ::= G_TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CAMPO_REGISTRO ::= G_PASSWORD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CAMPO_REGISTRO ::= G_APELLIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CAMPO_REGISTRO ::= G_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAMPO_REGISTRO ::= G_ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // G_EMAIL ::= O_EMAIL correo C_EMAIL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_EMAIL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // G_DIRECCION ::= O_DIRECCION cadena C_DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_DIRECCION",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // G_TELEFONO ::= O_TELEFONO numero C_TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_TELEFONO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // G_APELLIDO ::= O_APELLIDO cadena C_APELLIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_APELLIDO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // G_NOMBRE ::= O_NOMBRE cadena C_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_NOMBRE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C_EMAIL ::= dolar email menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_EMAIL",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C_DIRECCION ::= dolar direccion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_DIRECCION",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // C_TELEFONO ::= dolar telefono menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TELEFONO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // C_APELLIDO ::= dolar apellido menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_APELLIDO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // C_NOMBRE ::= dolar nombre menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_NOMBRE",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C_CREAR ::= dolar crearUsuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CREAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // O_EMAIL ::= dolar email dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_EMAIL",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // O_DIRECCION ::= dolar direccion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DIRECCION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // O_TELEFONO ::= dolar telefono dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TELEFONO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // O_APELLIDO ::= dolar apellido dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_APELLIDO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // O_NOMBRE ::= dolar nombre dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_NOMBRE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // O_CREAR ::= dolar crearUsuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CREAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LOGIN ::= O_INGRESO G_PASSWORD G_ID C_INGRESO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LOGIN ::= O_INGRESO G_ID G_PASSWORD C_INGRESO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // G_PASSWORD ::= O_PASSWORD clave C_PASSWORD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PASSWORD",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // G_ID ::= O_ID numero C_ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_ID",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C_PETICION ::= dolar peticion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PETICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C_INGRESO ::= dolar inicioUsuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_INGRESO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C_ID ::= dolar id menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_ID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C_PASSWORD ::= dolar password menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PASSWORD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // O_PASSWORD ::= dolar password dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PASSWORD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // O_ID ::= dolar id dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_ID",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O_INGRESO ::= dolar inicioUsuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_INGRESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // O_PETICION ::= dolar peticion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PETICION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OTRA_ACCION ::= ACCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_ACCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OTRA_ACCION ::= OTRA_ACCION ACCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_ACCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ACCION ::= GET 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ACCION ::= BC_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ACCION ::= CREAR_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACCION ::= MODT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACCION ::= TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ACCION ::= REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ACCION ::= LOGIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA2 ::= LISTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA2 ::= LISTA2 LISTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA ::= O_PETICION OTRA_ACCION C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error INICIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

