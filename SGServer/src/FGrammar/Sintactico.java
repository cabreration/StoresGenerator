
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 12 08:52:14 CST 2018
//----------------------------------------------------

package FGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Logica.*;
import sgserver.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 12 08:52:14 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\005\005\000\002\006\004" +
    "\000\002\006\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\004\000\002\004" +
    "\003\000\002\010\005\000\002\011\005\000\002\012\005" +
    "\000\002\013\005\000\002\014\006\000\002\015\006\000" +
    "\002\016\006\000\002\017\006\000\002\020\005\000\002" +
    "\021\005\000\002\007\006\000\002\007\006\000\002\023" +
    "\005\000\002\024\005\000\002\025\005\000\002\026\005" +
    "\000\002\027\005\000\002\030\005\000\002\031\006\000" +
    "\002\032\006\000\002\033\006\000\002\034\006\000\002" +
    "\035\006\000\002\036\006\000\002\037\005\000\002\040" +
    "\005\000\002\041\005\000\002\042\005\000\002\043\005" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\045\004\000\002\045\003\000\002\022" +
    "\005\000\002\047\010\000\002\050\006\000\002\051\005" +
    "\000\002\052\006\000\002\053\005\000\002\054\006\000" +
    "\002\055\005\000\002\056\006\000\002\057\005\000\002" +
    "\060\005\000\002\061\005\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\063\004\000\002\063\003\000" +
    "\002\046\005\000\002\065\005\000\002\070\005\000\002" +
    "\066\005\000\002\067\005\000\002\071\005\000\002\072" +
    "\005\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\074\005\000\002\074\002\000\002\075\010\000\002" +
    "\100\010\000\002\101\006\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\103\004\000\002\103\003\000\002" +
    "\105\005\000\002\104\006\000\002\141\005\000\002\142" +
    "\006\000\002\144\005\000\002\106\005\000\002\107\006" +
    "\000\002\110\005\000\002\111\006\000\002\113\006\000" +
    "\002\112\005\000\002\114\005\000\002\115\006\000\002" +
    "\116\005\000\002\117\005\000\002\120\005\000\002\121" +
    "\005\000\002\122\005\000\002\077\005\000\002\127\005" +
    "\000\002\130\005\000\002\131\005\000\002\132\005\000" +
    "\002\133\005\000\002\143\005\000\002\124\003\000\002" +
    "\124\012\000\002\125\010\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\135\005\000\002" +
    "\135\002\000\002\136\005\000\002\136\005\000\002\136" +
    "\005\000\002\136\005\000\002\136\004\000\002\136\004" +
    "\000\002\136\005\000\002\136\003\000\002\123\003\000" +
    "\002\123\005\000\002\140\014\000\002\140\014\000\002" +
    "\140\017\000\002\140\017\000\002\140\017\000\002\140" +
    "\017\000\002\140\017\000\002\140\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\010\002\ufffe\003\006\004\005\001\002\000" +
    "\006\002\000\004\005\001\002\000\004\005\u019a\001\002" +
    "\000\010\002\ufffe\003\006\004\005\001\002\000\006\002" +
    "\ufffb\004\ufffb\001\002\000\004\004\013\001\002\000\004" +
    "\002\012\001\002\000\004\002\001\001\002\000\014\006" +
    "\041\015\037\023\042\045\036\046\040\001\002\000\004" +
    "\004\u0184\001\002\000\004\004\ufffa\001\002\000\004\004" +
    "\uff81\001\002\000\004\004\ufff5\001\002\000\004\004\u0151" +
    "\001\002\000\004\004\ufff2\001\002\000\004\004\367\001" +
    "\002\000\004\004\317\001\002\000\004\004\ufff6\001\002" +
    "\000\004\004\ufff7\001\002\000\004\004\ufff4\001\002\000" +
    "\004\004\ufff9\001\002\000\004\004\032\001\002\000\004" +
    "\004\ufff8\001\002\000\016\005\035\006\041\015\037\023" +
    "\042\045\036\046\040\001\002\000\004\004\ufff3\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\004\011\314\001" +
    "\002\000\024\016\056\024\310\025\054\032\134\033\127" +
    "\034\136\035\141\036\133\047\124\001\002\000\004\004" +
    "\307\001\002\000\010\024\213\026\214\035\212\001\002" +
    "\000\004\004\211\001\002\000\020\007\043\016\056\020" +
    "\053\022\044\024\052\025\054\026\046\001\002\000\004" +
    "\044\107\001\002\000\004\044\105\001\002\000\006\011" +
    "\uffa9\037\075\001\002\000\004\044\072\001\002\000\006" +
    "\011\uffaf\037\uffaf\001\002\000\006\011\uffac\037\uffac\001" +
    "\002\000\006\011\uffb0\037\uffb0\001\002\000\004\044\067" +
    "\001\002\000\004\044\065\001\002\000\004\044\063\001" +
    "\002\000\006\011\uffae\037\uffae\001\002\000\004\044\061" +
    "\001\002\000\006\011\uffab\037\uffab\001\002\000\006\011" +
    "\uffad\037\uffad\001\002\000\004\050\062\001\002\000\006" +
    "\011\uffb4\037\uffb4\001\002\000\004\051\064\001\002\000" +
    "\006\011\uffb5\037\uffb5\001\002\000\004\051\066\001\002" +
    "\000\006\011\uffb1\037\uffb1\001\002\000\004\050\070\001" +
    "\002\000\010\004\071\011\uffb6\037\uffb6\001\002\000\004" +
    "\004\uffca\001\002\000\004\051\073\001\002\000\006\011" +
    "\uffb3\037\uffb3\001\002\000\004\011\103\001\002\000\016" +
    "\016\056\020\053\022\044\024\077\025\054\026\046\001" +
    "\002\000\006\011\uffa9\037\075\001\002\000\004\044\100" +
    "\001\002\000\004\050\101\001\002\000\006\011\uffb6\037" +
    "\uffb6\001\002\000\004\011\uffaa\001\002\000\004\004\104" +
    "\001\002\000\004\004\uffa8\001\002\000\004\050\106\001" +
    "\002\000\006\011\uffb2\037\uffb2\001\002\000\004\051\110" +
    "\001\002\000\004\004\111\001\002\000\004\004\112\001" +
    "\002\000\004\045\121\001\002\000\004\004\114\001\002" +
    "\000\004\023\116\001\002\000\004\004\uff80\001\002\000" +
    "\004\011\117\001\002\000\004\004\120\001\002\000\004" +
    "\004\uffc9\001\002\000\024\016\056\024\077\025\054\032" +
    "\134\033\127\034\136\035\141\036\133\047\124\001\002" +
    "\000\006\011\uff7c\037\uff7c\001\002\000\006\011\uff73\037" +
    "\203\001\002\000\004\044\201\001\002\000\006\011\uff79" +
    "\037\uff79\001\002\000\006\011\uff7e\037\uff7e\001\002\000" +
    "\004\044\177\001\002\000\006\011\uff76\037\uff76\001\002" +
    "\000\006\011\uff7d\037\uff7d\001\002\000\006\011\uff77\037" +
    "\uff77\001\002\000\004\044\175\001\002\000\004\044\147" +
    "\001\002\000\006\011\uff7b\037\uff7b\001\002\000\004\044" +
    "\145\001\002\000\006\011\uff75\037\uff75\001\002\000\006" +
    "\011\uff78\037\uff78\001\002\000\004\044\143\001\002\000" +
    "\006\011\uff7a\037\uff7a\001\002\000\004\051\144\001\002" +
    "\000\006\011\uff83\037\uff83\001\002\000\004\050\146\001" +
    "\002\000\006\011\uff85\037\uff85\001\002\000\006\040\151" +
    "\051\150\001\002\000\010\004\uff6a\011\uff6a\037\uff6a\001" +
    "\002\000\012\030\156\031\155\042\157\051\153\001\002" +
    "\000\006\011\uff87\037\uff87\001\002\000\016\011\uff6b\012" +
    "\uff6b\013\uff6b\014\uff6b\041\uff6b\043\uff6b\001\002\000\014" +
    "\011\164\012\163\013\161\014\162\041\174\001\002\000" +
    "\012\030\156\031\155\042\157\051\153\001\002\000\012" +
    "\030\156\031\155\042\157\051\153\001\002\000\012\030" +
    "\156\031\155\042\157\051\153\001\002\000\014\011\164" +
    "\012\163\013\161\014\162\043\165\001\002\000\012\030" +
    "\156\031\155\042\157\051\153\001\002\000\012\030\156" +
    "\031\155\042\157\051\153\001\002\000\012\030\156\031" +
    "\155\042\157\051\153\001\002\000\012\030\156\031\155" +
    "\042\157\051\153\001\002\000\016\011\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\041\uff6c\043\uff6c\001\002\000\016\011\uff71" +
    "\012\uff71\013\161\014\162\041\uff71\043\uff71\001\002\000" +
    "\016\011\uff72\012\uff72\013\161\014\162\041\uff72\043\uff72" +
    "\001\002\000\016\011\uff6f\012\uff6f\013\uff6f\014\uff6f\041" +
    "\uff6f\043\uff6f\001\002\000\016\011\uff70\012\uff70\013\uff70" +
    "\014\uff70\041\uff70\043\uff70\001\002\000\016\011\uff6e\012" +
    "\uff6e\013\uff6e\014\uff6e\041\uff6e\043\uff6e\001\002\000\016" +
    "\011\uff6d\012\uff6d\013\uff6d\014\uff6d\041\uff6d\043\uff6d\001" +
    "\002\000\010\004\uff69\011\uff69\037\uff69\001\002\000\006" +
    "\040\151\051\150\001\002\000\006\011\uff84\037\uff84\001" +
    "\002\000\004\050\200\001\002\000\006\011\uff86\037\uff86" +
    "\001\002\000\006\040\151\051\150\001\002\000\006\011" +
    "\uff82\037\uff82\001\002\000\024\016\056\024\077\025\054" +
    "\032\134\033\127\034\136\035\141\036\133\047\124\001" +
    "\002\000\004\011\205\001\002\000\004\004\206\001\002" +
    "\000\004\004\uff7f\001\002\000\006\011\uff73\037\203\001" +
    "\002\000\004\011\uff74\001\002\000\004\004\ufff0\001\002" +
    "\000\004\044\265\001\002\000\004\044\241\001\002\000" +
    "\004\044\215\001\002\000\004\051\216\001\002\000\006" +
    "\024\220\035\217\001\002\000\004\044\232\001\002\000" +
    "\004\044\221\001\002\000\004\050\222\001\002\000\006" +
    "\011\224\035\223\001\002\000\004\044\226\001\002\000" +
    "\004\004\225\001\002\000\004\004\uff67\001\002\000\004" +
    "\051\227\001\002\000\004\011\230\001\002\000\004\004" +
    "\231\001\002\000\004\004\uff61\001\002\000\004\051\233" +
    "\001\002\000\004\024\234\001\002\000\004\044\235\001" +
    "\002\000\004\050\236\001\002\000\004\011\237\001\002" +
    "\000\004\004\240\001\002\000\004\004\uff62\001\002\000" +
    "\004\050\242\001\002\000\006\026\244\035\243\001\002" +
    "\000\004\044\256\001\002\000\004\044\245\001\002\000" +
    "\004\051\246\001\002\000\006\011\250\035\247\001\002" +
    "\000\004\044\252\001\002\000\004\004\251\001\002\000" +
    "\004\004\uff68\001\002\000\004\051\253\001\002\000\004" +
    "\011\254\001\002\000\004\004\255\001\002\000\004\004" +
    "\uff66\001\002\000\004\051\257\001\002\000\004\026\260" +
    "\001\002\000\004\044\261\001\002\000\004\051\262\001" +
    "\002\000\004\011\263\001\002\000\004\004\264\001\002" +
    "\000\004\004\uff65\001\002\000\004\051\266\001\002\000" +
    "\006\024\267\026\270\001\002\000\004\044\300\001\002" +
    "\000\004\044\271\001\002\000\004\051\272\001\002\000" +
    "\004\024\273\001\002\000\004\044\274\001\002\000\004" +
    "\050\275\001\002\000\004\011\276\001\002\000\004\004" +
    "\277\001\002\000\004\004\uff63\001\002\000\004\050\301" +
    "\001\002\000\004\026\302\001\002\000\004\044\303\001" +
    "\002\000\004\051\304\001\002\000\004\011\305\001\002" +
    "\000\004\004\306\001\002\000\004\004\uff64\001\002\000" +
    "\004\004\uffe5\001\002\000\004\044\311\001\002\000\004" +
    "\050\312\001\002\000\010\004\313\011\uffb6\037\uffb6\001" +
    "\002\000\004\004\uffa7\001\002\000\004\004\315\001\002" +
    "\000\006\002\uffea\004\uffea\001\002\000\004\004\352\001" +
    "\002\000\006\007\341\010\350\001\002\000\004\004\340" +
    "\001\002\000\004\052\331\001\002\000\004\051\323\001" +
    "\002\000\004\004\324\001\002\000\004\007\326\001\002" +
    "\000\004\004\uffe9\001\002\000\004\011\327\001\002\000" +
    "\004\004\330\001\002\000\004\004\uffec\001\002\000\004" +
    "\004\333\001\002\000\004\004\uffe8\001\002\000\004\010" +
    "\334\001\002\000\004\011\335\001\002\000\004\004\336" +
    "\001\002\000\004\004\uffed\001\002\000\004\004\343\001" +
    "\002\000\004\007\341\001\002\000\004\004\342\001\002" +
    "\000\004\051\uffef\001\002\000\004\006\345\001\002\000" +
    "\004\004\uffe6\001\002\000\004\011\346\001\002\000\004" +
    "\004\347\001\002\000\004\004\uffeb\001\002\000\004\004" +
    "\351\001\002\000\004\052\uffee\001\002\000\004\010\350" +
    "\001\002\000\004\004\343\001\002\000\004\004\uffe7\001" +
    "\002\000\006\040\151\051\150\001\002\000\004\051\u0144" +
    "\001\002\000\006\040\151\051\150\001\002\000\004\004" +
    "\uff9e\001\002\000\004\050\u0138\001\002\000\004\004\uffa4" +
    "\001\002\000\004\004\uffa2\001\002\000\004\004\uffa1\001" +
    "\002\000\004\050\u0132\001\002\000\004\051\u012c\001\002" +
    "\000\024\016\u0117\025\u0116\027\u0114\032\u0115\033\u0112\034" +
    "\u0113\035\u0119\036\u011a\047\u0111\001\002\000\004\004\uff9b" +
    "\001\002\000\004\004\uff9f\001\002\000\004\004\uffa5\001" +
    "\002\000\004\004\uff9d\001\002\000\006\040\151\051\150" +
    "\001\002\000\004\004\u010f\001\002\000\004\050\u0108\001" +
    "\002\000\004\004\uffa0\001\002\000\004\050\u0102\001\002" +
    "\000\004\004\uffa3\001\002\000\004\004\u0103\001\002\000" +
    "\004\016\u0105\001\002\000\004\004\uffd9\001\002\000\004" +
    "\011\u0106\001\002\000\004\004\u0107\001\002\000\004\004" +
    "\uffde\001\002\000\004\004\u0109\001\002\000\004\034\u010b" +
    "\001\002\000\004\004\uff8b\001\002\000\004\011\u010c\001" +
    "\002\000\004\004\u010d\001\002\000\004\004\uff92\001\002" +
    "\000\004\004\uff88\001\002\000\026\016\u0117\025\u0116\027" +
    "\u0114\032\u0115\033\u0112\034\u0113\035\u0119\036\u011a\045\u0118" +
    "\047\u0111\001\002\000\004\004\uff9c\001\002\000\004\004" +
    "\u0125\001\002\000\004\004\u0124\001\002\000\004\004\u0123" +
    "\001\002\000\004\004\u0122\001\002\000\004\004\u0121\001" +
    "\002\000\004\004\u0120\001\002\000\004\004\u011f\001\002" +
    "\000\004\011\u011d\001\002\000\004\004\u011c\001\002\000" +
    "\004\004\u011b\001\002\000\006\040\uff90\051\uff90\001\002" +
    "\000\004\051\uff8f\001\002\000\004\004\u011e\001\002\000" +
    "\004\004\uffa6\001\002\000\004\050\uffe4\001\002\000\004" +
    "\051\uffc8\001\002\000\006\040\uff9a\051\uff9a\001\002\000" +
    "\004\050\uffc4\001\002\000\004\050\uff93\001\002\000\004" +
    "\050\uff95\001\002\000\006\040\uff98\051\uff98\001\002\000" +
    "\004\004\u0127\001\002\000\004\032\u0129\001\002\000\004" +
    "\004\uff8d\001\002\000\004\011\u012a\001\002\000\004\004" +
    "\u012b\001\002\000\004\004\uff99\001\002\000\004\004\u012d" +
    "\001\002\000\004\035\u012f\001\002\000\004\004\uff89\001" +
    "\002\000\004\011\u0130\001\002\000\004\004\u0131\001\002" +
    "\000\004\004\uff8e\001\002\000\004\004\u0133\001\002\000" +
    "\004\033\u0135\001\002\000\004\004\uff8c\001\002\000\004" +
    "\011\u0136\001\002\000\004\004\u0137\001\002\000\004\004" +
    "\uff94\001\002\000\004\004\u0139\001\002\000\004\027\u013b" +
    "\001\002\000\004\004\uffc0\001\002\000\004\011\u013c\001" +
    "\002\000\004\004\u013d\001\002\000\004\004\uffc3\001\002" +
    "\000\004\004\u013f\001\002\000\004\047\u0141\001\002\000" +
    "\004\004\uff96\001\002\000\004\011\u0142\001\002\000\004" +
    "\004\u0143\001\002\000\004\004\uff97\001\002\000\004\004" +
    "\u0145\001\002\000\004\025\u0147\001\002\000\004\004\uffc2" +
    "\001\002\000\004\011\u0148\001\002\000\004\004\u0149\001" +
    "\002\000\004\004\uffc7\001\002\000\004\004\u014b\001\002" +
    "\000\004\036\u014d\001\002\000\004\004\uff8a\001\002\000" +
    "\004\011\u014e\001\002\000\004\004\u014f\001\002\000\004" +
    "\004\uff91\001\002\000\004\050\u017e\001\002\000\020\007" +
    "\341\010\350\016\u0117\017\u0165\020\u0161\021\u0162\022\u0163" +
    "\001\002\000\004\053\u0178\001\002\000\004\004\uffd0\001" +
    "\002\000\004\004\uffd1\001\002\000\004\004\uffd3\001\002" +
    "\000\004\004\uffd2\001\002\000\004\051\u0172\001\002\000" +
    "\004\004\uffcc\001\002\000\004\050\u016c\001\002\000\004" +
    "\004\u015e\001\002\000\004\004\uffd4\001\002\000\004\004" +
    "\uffcf\001\002\000\004\004\uffce\001\002\000\022\007\341" +
    "\010\350\015\u0164\016\u0117\017\u0165\020\u0161\021\u0162\022" +
    "\u0163\001\002\000\004\004\uffcd\001\002\000\004\004\uffcb" +
    "\001\002\000\004\004\u016b\001\002\000\004\004\u016a\001" +
    "\002\000\004\004\u0169\001\002\000\004\011\u0167\001\002" +
    "\000\004\004\u0166\001\002\000\004\050\uffe3\001\002\000" +
    "\004\004\u0168\001\002\000\004\004\uffdf\001\002\000\004" +
    "\050\uffe1\001\002\000\004\053\uffe0\001\002\000\004\051" +
    "\uffe2\001\002\000\004\004\u016d\001\002\000\004\017\u016f" +
    "\001\002\000\004\004\uffd8\001\002\000\004\011\u0170\001" +
    "\002\000\004\004\u0171\001\002\000\004\004\uffdd\001\002" +
    "\000\004\004\u0173\001\002\000\004\020\u0175\001\002\000" +
    "\004\004\uffd7\001\002\000\004\011\u0176\001\002\000\004" +
    "\004\u0177\001\002\000\004\004\uffdc\001\002\000\004\004" +
    "\u0179\001\002\000\004\021\u017b\001\002\000\004\004\uffd5" +
    "\001\002\000\004\011\u017c\001\002\000\004\004\u017d\001" +
    "\002\000\004\004\uffda\001\002\000\004\004\u017f\001\002" +
    "\000\004\022\u0181\001\002\000\004\004\uffd6\001\002\000" +
    "\004\011\u0182\001\002\000\004\004\u0183\001\002\000\004" +
    "\004\uffdb\001\002\000\016\016\u0117\020\u0161\022\u0163\025" +
    "\u0116\026\u0191\027\u0114\001\002\000\004\051\u0193\001\002" +
    "\000\004\004\uffbb\001\002\000\004\004\uffbf\001\002\000" +
    "\004\004\uffba\001\002\000\004\004\uffbd\001\002\000\004" +
    "\004\uffbe\001\002\000\004\004\uffb8\001\002\000\004\004" +
    "\u018e\001\002\000\004\004\uffbc\001\002\000\020\016\u0117" +
    "\020\u0161\022\u0163\023\116\025\u0116\026\u0191\027\u0114\001" +
    "\002\000\004\004\uffb7\001\002\000\004\004\uffb9\001\002" +
    "\000\004\004\u0192\001\002\000\004\051\uffc6\001\002\000" +
    "\004\004\u0195\001\002\000\004\004\uffc1\001\002\000\004" +
    "\026\u0196\001\002\000\004\011\u0197\001\002\000\004\004" +
    "\u0198\001\002\000\004\004\uffc5\001\002\000\004\002\uffff" +
    "\001\002\000\004\004\u019b\001\002\000\004\004\ufff1\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\012\002\010\005\006\006\003\010\007\001" +
    "\001\000\006\005\u019b\010\007\001\001\000\002\001\001" +
    "\000\012\002\u0198\005\006\006\003\010\007\001\001\000" +
    "\002\001\001\000\036\003\020\004\027\007\014\011\022" +
    "\022\026\023\017\046\030\047\013\075\024\077\023\100" +
    "\021\124\016\125\015\140\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\024\377\026" +
    "\u0156\027\u014f\037\u0188\041\u0185\042\u018c\051\355\053\u0184" +
    "\055\360\057\u0186\060\u0189\061\u0187\062\u018a\063\u018b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\012\321\013\320\020\u015a\021\u0153\024\377\025" +
    "\u0158\026\u0156\027\u014f\030\u0151\037\u0154\040\u0155\041\u0152" +
    "\042\u015c\043\u015b\044\u0157\045\u0159\001\001\000\002\001" +
    "\001\000\052\024\377\037\361\051\355\055\360\057\371" +
    "\061\u0100\102\367\103\374\105\373\106\364\110\375\112" +
    "\354\114\365\116\362\117\363\120\376\121\370\122\357" +
    "\141\356\144\372\001\001\000\012\012\321\013\320\020" +
    "\315\021\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\032\007" +
    "\014\011\022\017\033\022\026\023\017\046\030\047\013" +
    "\075\024\077\023\100\021\124\016\125\015\140\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\065\127\066" +
    "\130\070\125\127\134\130\141\131\124\132\137\133\131" +
    "\134\122\137\121\143\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\065\050\066\054" +
    "\067\057\070\046\071\047\072\056\073\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\065\050\066\054\067\057\070\046\071\047" +
    "\072\056\073\075\001\001\000\004\074\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\112\001\001\000\002\001\001\000\004\050" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\065" +
    "\127\066\130\070\125\127\134\130\141\131\124\132\137" +
    "\133\131\134\122\137\121\143\136\001\001\000\002\001" +
    "\001\000\004\135\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\151\001\001\000\002" +
    "\001\001\000\004\136\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\172\001\001" +
    "\000\004\136\171\001\001\000\004\136\157\001\001\000" +
    "\002\001\001\000\004\136\170\001\001\000\004\136\167" +
    "\001\001\000\004\136\166\001\001\000\004\136\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\123\201\001\001\000\002\001\001\000\030\065\127" +
    "\066\130\070\125\127\134\130\141\131\124\132\137\133" +
    "\131\134\206\137\121\143\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\135\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\320\021" +
    "\352\001\001\000\002\001\001\000\006\012\321\020\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\353\001" +
    "\001\000\002\001\001\000\004\123\u0149\001\001\000\002" +
    "\001\001\000\004\123\u013d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\u0125\001\001\000\052\024" +
    "\377\037\361\051\355\055\360\057\371\061\u0100\101\u010d" +
    "\102\u010f\105\373\106\364\110\375\112\354\114\365\116" +
    "\362\117\363\120\376\121\370\122\357\141\356\144\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\111\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\115" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\142" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\u014b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\012\321\013\320\020\u015a\021\u0153\024\377\025\u0158\026" +
    "\u0156\027\u014f\030\u0151\031\u015f\037\u0154\040\u0155\041\u0152" +
    "\042\u015c\043\u015b\044\u015e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u016d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u0173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\u0179\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u017f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\024\377\026\u0156\027\u014f\037" +
    "\u0188\041\u0185\042\u018c\050\u018e\051\355\053\u0184\055\360" +
    "\057\u0186\060\u0189\061\u0187\062\u018f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u0193\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<ErrorC> errores = new ArrayList<>();
    public ArrayList<ErrorC> semanticos = new ArrayList<>();
    public String respuesta = "";

    //para metodos
    Usuario usuarioAuxiliar = new Usuario();
    Tienda tiendaAuxiliar = new Tienda();
    String tipo = null;
    Producto productoAuxiliar = new Producto();

    public void syntax_error(Symbol s)
    {   
        System.out.println(s.value.toString());
         if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        System.out.println(s.value.toString());
        if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {
        System.out.println("error semantico");
    }

    public double sumar(Object arg1, Object arg2) {
            
            try {
                return Calculadora.sumar(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double restar(Object arg1, Object arg2) {
            
            try {
                return Calculadora.restar(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double multiplicar(Object arg1, Object arg2) {
            
            try {
                return Calculadora.multiplicar(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double dividir(Object arg1, Object arg2) {
            
            try {
                return Calculadora.dividir(arg1, arg2);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double raiz(Object arg1) {
            
            try {
                return Calculadora.raiz(arg1);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public double potencia(Object arg1) {
            
            try {
                return Calculadora.potencia(arg1);
            }
            catch(Exception e) {
                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                System.out.println(e.getMessage());
                return 0;
            }
        }

        public void insertarUsuario() {
            System.out.println("Llegue a insertar usuario");
            try 
            {
                usuarioAuxiliar.arreglar();
                boolean exito = DatosPersistentes.usuarios.agregarUsuario(usuarioAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Usuario registrado: " + usuarioAuxiliar.getNombre());
                
                respuesta = " $reply$ $Usuario$ $registro id = " + String.valueOf(usuarioAuxiliar.getIdentificador()) + "$ True $registro-$ "
                                    + " $Usuario-$ $reply-$";
            }
            catch(Exception e) {
                //respuesta falsa
                DatosPersistentes.interfaz.outputLine.append("\n >> Fallo al registrar usuario " + e);
                respuesta = " $reply$ $Usuario$ $registro id = " + String.valueOf(usuarioAuxiliar.getIdentificador()) + "$ False $registro-$ "
                                    + " $Usuario-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
            }
            
            usuarioAuxiliar = new Usuario();
         }

         public void logIn(int id, String clave) {
            System.out.println("Llegue a log in");
            try 
            {
                String exito = DatosPersistentes.usuarios.logIn(id, clave);
                DatosPersistentes.interfaz.outputLine.append("\n >> Bienvenido " + exito);
                ArrayList<Usuario> auxiliar = DatosPersistentes.usuariosLoggueados;
                
                respuesta = " $reply$ $Usuario$ $id$ " + String.valueOf(id) + " $id-$ $access$ True $access-$ "
                                    + " $Usuario-$ $reply-$";
            }
            catch(Exception e) {
                //respuesta falsa
                DatosPersistentes.interfaz.outputLine.append("\n >> Fallo al intentar entrar " + e );

                respuesta = " $reply$ $Usuario$ $id$ " + String.valueOf(id) + " $id-$ $access$ False $access-$ "
                                    + " $Usuario-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
            }
         }

         public void registrarTienda() {
            System.out.println("Registrando tienda");
            
            try {
                tiendaAuxiliar.arreglar();
                DatosPersistentes.tiendas.registrarTienda(tiendaAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Tienda Registrada: " + tiendaAuxiliar.getNombre());

                respuesta = " $reply$ $Tienda$ $registro id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $registro-$ "
                                    + " $Tienda-$ $reply-$";
            }
            catch(Exception e) {
                DatosPersistentes.interfaz.outputLine.append("\n >> Error al registrar tienda: " + e);
                
                respuesta = " $reply$ $Tienda$ $registro id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ False $registro-$ "
                                    + " $Tienda-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
            }

            tiendaAuxiliar = new Tienda();
         }

         public void modificarTienda() {
            System.out.println("Modificando Tienda");

            if (tipo.substring(1, tipo.length()-1).equalsIgnoreCase("modificacion")) {
                
                try {
                    DatosPersistentes.tiendas.modificarTienda(tiendaAuxiliar);
                    DatosPersistentes.interfaz.outputLine.append("\n >> Tienda Modificada con exito!");

                    respuesta = " $reply$ $Tienda$ $modificar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $modificar-$ "
                                    + " $Tienda-$ $reply-$";
                }
                catch(Exception e) {
                    DatosPersistentes.interfaz.outputLine.append("\n >> Error al modificar tienda: " + e);

                    respuesta = " $reply$ $Tienda$ $modificar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ False $modificar-$ "
                                    + " $Tienda-$ $reply-$";

                    Symbol current = (java_cup.runtime.Symbol) stack.peek();
                    int linea = current.left;
                    int columna = current.right;

                    semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                }
            }
            else {
                try {
                    DatosPersistentes.tiendas.eliminarTienda(tiendaAuxiliar.getUsuario_propietario(), tiendaAuxiliar.getCodigo());
                    DatosPersistentes.interfaz.outputLine.append("\n >> Tienda eliminada con exito!");

                    respuesta = " $reply$ $Tienda$ $eliminar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $eliminar-$ "
                                    + " $Tienda-$ $reply-$";
                }
                catch(Exception e) {
                    DatosPersistentes.interfaz.outputLine.append("\n >> Error al eliminar tienda: " + e);

                    respuesta = " $reply$ $Tienda$ $eliminar id = " + String.valueOf(tiendaAuxiliar.getCodigo()) + "$ True $eliminar-$ "
                                    + " $Tienda-$ $reply-$";
                                    
                    Symbol current = (java_cup.runtime.Symbol) stack.peek();
                    int linea = current.left;
                    int columna = current.right;

                    semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
                }
            }
            tipo = null;
         }

         public void registrarProducto() {
            System.out.println("Registrando producto");
            
            try {
                productoAuxiliar.arreglar();
                DatosPersistentes.productos.insertarProducto(productoAuxiliar);
                DatosPersistentes.interfaz.outputLine.append("\n >> Producto Registrado: " + productoAuxiliar.getNombre());

                respuesta = " $reply$ $Producto$ $registro id = " + String.valueOf(productoAuxiliar.getCodigo()) + " sucursal = " 
                                    + String.valueOf(productoAuxiliar.getSucursal_tienda()) + "$ True $registro-$ $Producto-$ $reply-$";
            }
            catch(Exception e) {
                DatosPersistentes.interfaz.outputLine.append("\n >> Error al registrar producto: " + e);
                respuesta = " $reply$ $Producto$ $registro id = " + String.valueOf(productoAuxiliar.getCodigo()) + " sucursal = " 
                                    + String.valueOf(productoAuxiliar.getSucursal_tienda()) + "$ False $registro-$ $Producto-$ $reply-$";

                Symbol current = (java_cup.runtime.Symbol) stack.peek();
                int linea = current.left;
                int columna = current.right;

                semanticos.add(new ErrorC("Semantico", current.value.toString(), linea, columna, e.getMessage()));
            }

            tiendaAuxiliar = new Tienda();
         }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


         

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GET ::= dolar obtener propietario asignacion numero tipo asignacion cadena sucursal asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // GET ::= dolar obtener propietario asignacion numero sucursal asignacion numero tipo asignacion cadena menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // GET ::= dolar obtener sucursal asignacion numero propietario asignacion numero tipo asignacion cadena menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // GET ::= dolar obtener sucursal asignacion numero tipo asignacion cadena propietario asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // GET ::= dolar obtener tipo asignacion cadena sucursal asignacion numero propietario asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // GET ::= dolar obtener tipo asignacion cadena propietario asignacion numero sucursal asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // GET ::= dolar obtener propietario asignacion numero tipo asignacion cadena menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // GET ::= dolar obtener tipo asignacion cadena propietario asignacion numero menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GET",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERACION_ARITMETICA ::= llaveA EXPRESION llaveC 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expresion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPERACION_ARITMETICA ::= numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = (double)num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION ::= parentesisA EXPRESION parentesisC 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= potencia EXPRESION 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = parser.potencia(num); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= raizCuadrada EXPRESION 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = parser.raiz(num); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= EXPRESION sobre EXPRESION 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = parser.dividir(num, num2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = parser.multiplicar(num, num2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = parser.restar(num, num2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = parser.sumar(num, num2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OTRO_CAMPOBC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOBC",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OTRO_CAMPOBC ::= coma CAMPOS_BC OTRO_CAMPOBC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOBC",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CAMPOS_BC ::= PRECIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CAMPOS_BC ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CAMPOS_BC ::= SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CAMPOS_BC ::= SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CAMPOS_BC ::= COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CAMPOS_BC ::= MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CAMPOS_BC ::= CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CAMPOS_BC ::= IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CAMPOS_BC ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CAMPOS_BC ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BC_ESTANDAR ::= dolar producto CAMPOS_BC OTRO_CAMPOBC menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_ESTANDAR",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BC_PRODUCTO ::= dolar tienda id asignacion numero dolar BC_ESTANDAR C_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_PRODUCTO",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // BC_PRODUCTO ::= BC_ESTANDAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_PRODUCTO",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PRECIO ::= precio asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int costleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRECIO",97, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SUCURSAL ::= sucursal asignacion numero 
            {
              Object RESULT =null;
		int sucleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sucright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object suc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUCURSAL",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SIZE ::= size asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int tamanioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tamanioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tamanio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIZE",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // COLOR ::= color asignacion cadena 
            {
              Object RESULT =null;
		int colourleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object colour = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MARCA ::= marca asignacion cadena 
            {
              Object RESULT =null;
		int brandleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int brandright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object brand = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MARCA",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CANTIDAD ::= cantidad asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int cantleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDAD",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CREAR_PRODUCTO ::= O_PRODUCTO OTRO_CAMPOCP C_PRODUCTO 
            {
              Object RESULT =null;
		 parser.registrarProducto(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CREAR_PRODUCTO",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // G_SUCURSAL ::= O_SUCURSAL numero C_SUCURSAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_SUCURSAL",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // G_SIZE ::= O_SIZE OPERACION_ARITMETICA C_SIZE 
            {
              Object RESULT =null;
		int tamanioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tamanioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tamanio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = (double)tamanio; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_SIZE",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // G_COLOR ::= O_COLOR cadena C_COLOR 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = cad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_COLOR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // G_MARCA ::= O_MARCA cadena C_MARCA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = cad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_MARCA",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // G_CANTIDAD ::= O_CANTIDAD OPERACION_ARITMETICA C_CANTIDAD 
            {
              Object RESULT =null;
		int cantleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = (int)cant; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_CANTIDAD",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // C_SUCURSAL ::= dolar sucursal menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SUCURSAL",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // O_SUCURSAL ::= dolar sucursal dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SUCURSAL",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // O_SIZE ::= dolar size dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SIZE",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // C_SIZE ::= dolar size menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SIZE",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // C_COLOR ::= dolar color menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_COLOR",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // O_COLOR ::= dolar color dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_COLOR",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // C_MARCA ::= dolar marca menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_MARCA",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // O_MARCA ::= dolar marca dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_MARCA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // G_PRECIO ::= O_PRECIO OPERACION_ARITMETICA C_PRECIO 
            {
              Object RESULT =null;
		int costleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int costright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = (double)cost; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PRECIO",98, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // C_PRECIO ::= dolar precio menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PRECIO",96, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // O_PRECIO ::= dolar precio dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PRECIO",95, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // C_CANTIDAD ::= dolar cantidad menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CANTIDAD",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // O_CANTIDAD ::= dolar cantidad dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CANTIDAD",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OTRO_CAMPOCP ::= CAMPO_CREARPRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOCP",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OTRO_CAMPOCP ::= OTRO_CAMPOCP CAMPO_CREARPRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOCP",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CAMPO_CREARPRODUCTO ::= G_PRECIO 
            {
              Object RESULT =null;
		int costleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setPrecio(Double.parseDouble(String.valueOf(cost))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CAMPO_CREARPRODUCTO ::= G_SUCURSAL 
            {
              Object RESULT =null;
		int sucursalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sucursalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object sucursal = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setSucursal_tienda(Integer.parseInt(String.valueOf(sucursal))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAMPO_CREARPRODUCTO ::= G_SIZE 
            {
              Object RESULT =null;
		int tamanioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tamanioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tamanio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setSize(Double.parseDouble(String.valueOf(tamanio))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAMPO_CREARPRODUCTO ::= G_COLOR 
            {
              Object RESULT =null;
		int colourleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object colour = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setColor(String.valueOf(colour)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAMPO_CREARPRODUCTO ::= G_MARCA 
            {
              Object RESULT =null;
		int brandleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int brandright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object brand = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setMarca(String.valueOf(brand)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAMPO_CREARPRODUCTO ::= G_CANTIDAD 
            {
              Object RESULT =null;
		int cantleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setCantidad(Integer.parseInt(String.valueOf(cant))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CAMPO_CREARPRODUCTO ::= G_IMAGEN 
            {
              Object RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setImagen(String.valueOf(img)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CAMPO_CREARPRODUCTO ::= G_NOMBRE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setNombre(String.valueOf(name)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CAMPO_CREARPRODUCTO ::= G_CODIGO 
            {
              Object RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.productoAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // C_PRODUCTO ::= dolar producto menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PRODUCTO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // O_PRODUCTO ::= dolar producto tipo asignacion cadena dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODT ::= dolar tienda CAMPO_MOD OTRO_CAMPOMOD menos dolar 
            {
              Object RESULT =null;
		 parser.modificarTienda(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODT",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OTRO_CAMPOMOD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOMOD",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OTRO_CAMPOMOD ::= coma CAMPO_MOD OTRO_CAMPOMOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOMOD",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CAMPO_MOD ::= TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CAMPO_MOD ::= DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CAMPO_MOD ::= PROP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CAMPO_MOD ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CAMPO_MOD ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CAMPO_MOD ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TELEFONO ::= telefono asignacion numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(num))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TELEFONO",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DIRECCION ::= direccion asignacion cadena 
            {
              Object RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setDireccion(String.valueOf(dir)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIRECCION",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PROP ::= propietario asignacion numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(num))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROP",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NOMBRE ::= nombre asignacion cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setNombre(String.valueOf(cad)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CODIGO ::= codigo asignacion numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(num))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= tipo asignacion cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tipo = String.valueOf(cad); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIENDA ::= O_TIENDA OTRO_CAMPOT C_TIENDA 
            {
              Object RESULT =null;
		 parser.registrarTienda(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIENDA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OTRO_CAMPOT ::= CAMPO_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOT",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OTRO_CAMPOT ::= OTRO_CAMPOT CAMPO_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOT",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CAMPO_TIENDA ::= G_IMAGEN 
            {
              Object RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setImagen(String.valueOf(img)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CAMPO_TIENDA ::= G_TELEFONO 
            {
              Object RESULT =null;
		int telleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int telright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tel = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CAMPO_TIENDA ::= G_DIRECCION 
            {
              Object RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setDireccion(String.valueOf(dir)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CAMPO_TIENDA ::= G_NOMBRE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setNombre(String.valueOf(name)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CAMPO_TIENDA ::= G_PROPIETARIO 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setUsuario_propietario(Integer.parseInt(String.valueOf(prop))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CAMPO_TIENDA ::= G_CODIGO 
            {
              Object RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.tiendaAuxiliar.setCodigo(Integer.parseInt(String.valueOf(cod))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // G_IMAGEN ::= O_IMAGEN cadena C_IMAGEN 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = cad; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_IMAGEN",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // G_PROPIETARIO ::= O_PROPIETARIO numero C_PROPIETARIO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PROPIETARIO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // G_CODIGO ::= O_CODIGO numero C_CODIGO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = num; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_CODIGO",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // C_IMAGEN ::= dolar img menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_IMAGEN",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // O_IMAGEN ::= dolar img dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_IMAGEN",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // C_PROPIETARIO ::= dolar propietario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PROPIETARIO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // O_PROPIETARIO ::= dolar propietario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PROPIETARIO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // C_CODIGO ::= dolar codigo menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CODIGO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // O_CODIGO ::= dolar codigo dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CODIGO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // C_TIENDA ::= dolar tienda menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TIENDA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // O_TIENDA ::= dolar tienda tipo asignacion cadena dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TIENDA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REGISTRO ::= O_CREAR OTRO_CAMPOR C_CREAR 
            {
              Object RESULT =null;
		 parser.insertarUsuario(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGISTRO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OTRO_CAMPOR ::= CAMPO_REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OTRO_CAMPOR ::= OTRO_CAMPOR CAMPO_REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOR",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CAMPO_REGISTRO ::= G_DIRECCION 
            {
              Object RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setDireccion(String.valueOf(dir)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CAMPO_REGISTRO ::= G_EMAIL 
            {
              Object RESULT =null;
		int corleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int corright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setEmail(String.valueOf(cor)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CAMPO_REGISTRO ::= G_TELEFONO 
            {
              Object RESULT =null;
		int telleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int telright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tel = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setTelefono(Integer.parseInt(String.valueOf(tel))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CAMPO_REGISTRO ::= G_PASSWORD 
            {
              Object RESULT =null;
		int passleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int passright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setPassword(String.valueOf(pass)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CAMPO_REGISTRO ::= G_APELLIDO 
            {
              Object RESULT =null;
		int apeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aperight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ape = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setApellido(String.valueOf(ape)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CAMPO_REGISTRO ::= G_NOMBRE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setNombre(String.valueOf(name)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAMPO_REGISTRO ::= G_ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.usuarioAuxiliar.setIdentificador(Integer.parseInt(String.valueOf(ide))); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // G_EMAIL ::= O_EMAIL correo C_EMAIL 
            {
              Object RESULT =null;
		int corleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int corright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = cor; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_EMAIL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // G_DIRECCION ::= O_DIRECCION cadena C_DIRECCION 
            {
              Object RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = dir; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_DIRECCION",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // G_TELEFONO ::= O_TELEFONO numero C_TELEFONO 
            {
              Object RESULT =null;
		int telleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tel = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = tel; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_TELEFONO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // G_APELLIDO ::= O_APELLIDO cadena C_APELLIDO 
            {
              Object RESULT =null;
		int apeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aperight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ape = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = ape; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_APELLIDO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // G_NOMBRE ::= O_NOMBRE cadena C_NOMBRE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = name; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_NOMBRE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C_EMAIL ::= dolar email menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_EMAIL",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C_DIRECCION ::= dolar direccion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_DIRECCION",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // C_TELEFONO ::= dolar telefono menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TELEFONO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // C_APELLIDO ::= dolar apellido menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_APELLIDO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // C_NOMBRE ::= dolar nombre menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_NOMBRE",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C_CREAR ::= dolar crearUsuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CREAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // O_EMAIL ::= dolar email dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_EMAIL",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // O_DIRECCION ::= dolar direccion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DIRECCION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // O_TELEFONO ::= dolar telefono dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TELEFONO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // O_APELLIDO ::= dolar apellido dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_APELLIDO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // O_NOMBRE ::= dolar nombre dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_NOMBRE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // O_CREAR ::= dolar crearUsuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CREAR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LOGIN ::= O_INGRESO G_PASSWORD G_ID C_INGRESO 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 parser.logIn(Integer.parseInt(String.valueOf(ide)), String.valueOf(key)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LOGIN ::= O_INGRESO G_ID G_PASSWORD C_INGRESO 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 parser.logIn(Integer.parseInt(String.valueOf(ide)), String.valueOf(key)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // G_PASSWORD ::= O_PASSWORD clave C_PASSWORD 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object key = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = key; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PASSWORD",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // G_ID ::= O_ID numero C_ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = ide; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_ID",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C_PETICION ::= dolar peticion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PETICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C_INGRESO ::= dolar inicioUsuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_INGRESO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C_ID ::= dolar id menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_ID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C_PASSWORD ::= dolar password menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PASSWORD",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // O_PASSWORD ::= dolar password dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PASSWORD",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // O_ID ::= dolar id dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_ID",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O_INGRESO ::= dolar inicioUsuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_INGRESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // O_PETICION ::= dolar peticion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PETICION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OTRA_ACCION ::= ACCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_ACCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OTRA_ACCION ::= OTRA_ACCION ACCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_ACCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ACCION ::= GET 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ACCION ::= BC_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ACCION ::= CREAR_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACCION ::= MODT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACCION ::= TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ACCION ::= REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ACCION ::= LOGIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA2 ::= LISTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA2 ::= LISTA2 LISTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA2",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA ::= O_PETICION OTRA_ACCION C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error INICIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

