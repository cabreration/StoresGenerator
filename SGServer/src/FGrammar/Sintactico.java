
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 31 17:30:33 CST 2018
//----------------------------------------------------

package FGrammar;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 31 17:30:33 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\002\000\002\006\005\000\002\007\005\000\002" +
    "\010\005\000\002\011\005\000\002\012\006\000\002\013" +
    "\006\000\002\014\006\000\002\015\006\000\002\016\005" +
    "\000\002\017\005\000\002\005\010\000\002\005\010\000" +
    "\002\021\005\000\002\022\005\000\002\023\005\000\002" +
    "\024\005\000\002\025\005\000\002\026\005\000\002\027" +
    "\006\000\002\030\006\000\002\031\006\000\002\032\006" +
    "\000\002\033\006\000\002\034\006\000\002\035\005\000" +
    "\002\036\005\000\002\037\005\000\002\040\005\000\002" +
    "\041\005\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\043\004\000\002\043\003\000" +
    "\002\020\007\000\002\045\010\000\002\046\006\000\002" +
    "\047\005\000\002\050\006\000\002\051\005\000\002\052" +
    "\006\000\002\053\005\000\002\054\006\000\002\055\005" +
    "\000\002\056\005\000\002\057\005\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\061\004\000\002\061" +
    "\003\000\002\044\007\000\002\063\005\000\002\066\005" +
    "\000\002\064\005\000\002\065\005\000\002\067\005\000" +
    "\002\070\005\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\072\005\000\002\072\002\000\002\062\005" +
    "\000\002\073\010\000\002\074\004\000\002\074\003\000" +
    "\002\076\010\000\002\077\006\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\101\004\000\002\101\003\000\002\103\005\000" +
    "\002\102\006\000\002\104\005\000\002\105\006\000\002" +
    "\106\005\000\002\107\006\000\002\111\006\000\002\110" +
    "\005\000\002\112\005\000\002\113\006\000\002\114\005" +
    "\000\002\115\005\000\002\116\005\000\002\117\005\000" +
    "\002\120\005\000\002\075\007\000\002\125\005\000\002" +
    "\126\005\000\002\127\005\000\002\130\005\000\002\131" +
    "\005\000\002\122\005\000\002\122\014\000\002\123\010" +
    "\000\002\124\004\000\002\124\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\133\005\000\002\133\002" +
    "\000\002\134\005\000\002\134\005\000\002\134\005\000" +
    "\002\134\005\000\002\134\004\000\002\134\004\000\002" +
    "\134\005\000\002\134\003\000\002\121\003\000\002\121" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\004\004\005\001\002\000\006\002\ufffc\004" +
    "\ufffc\001\002\000\004\005\u0159\001\002\000\004\002\u0158" +
    "\001\002\000\006\002\uffff\004\uffff\001\002\000\006\002" +
    "\ufffa\004\ufffa\001\002\000\006\002\ufff8\004\005\001\002" +
    "\000\004\004\016\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\006\002\ufffe\004\ufffe\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\012\006\u0140\015\u013f\023\u0141\045" +
    "\u013e\001\002\000\004\004\u0125\001\002\000\004\004\uff85" +
    "\001\002\000\004\004\361\001\002\000\004\004\315\001" +
    "\002\000\004\004\150\001\002\000\004\004\076\001\002" +
    "\000\004\004\uffab\001\002\000\004\004\027\001\002\000" +
    "\006\005\032\023\033\001\002\000\006\002\uffae\004\uffae" +
    "\001\002\000\004\004\uffac\001\002\000\004\011\073\001" +
    "\002\000\016\016\046\020\043\022\034\024\042\025\044" +
    "\026\036\001\002\000\004\044\071\001\002\000\006\011" +
    "\uffaf\037\064\001\002\000\004\044\061\001\002\000\006" +
    "\011\uffb5\037\uffb5\001\002\000\006\011\uffb2\037\uffb2\001" +
    "\002\000\006\011\uffb6\037\uffb6\001\002\000\004\044\057" +
    "\001\002\000\004\044\055\001\002\000\004\044\053\001" +
    "\002\000\006\011\uffb4\037\uffb4\001\002\000\004\044\051" +
    "\001\002\000\006\011\uffb1\037\uffb1\001\002\000\006\011" +
    "\uffb3\037\uffb3\001\002\000\004\046\052\001\002\000\006" +
    "\011\uffba\037\uffba\001\002\000\004\047\054\001\002\000" +
    "\006\011\uffbb\037\uffbb\001\002\000\004\047\056\001\002" +
    "\000\006\011\uffb7\037\uffb7\001\002\000\004\046\060\001" +
    "\002\000\006\011\uffbc\037\uffbc\001\002\000\004\047\062" +
    "\001\002\000\006\011\uffb9\037\uffb9\001\002\000\004\011" +
    "\067\001\002\000\016\016\046\020\043\022\034\024\042" +
    "\025\044\026\036\001\002\000\006\011\uffaf\037\064\001" +
    "\002\000\004\011\uffb0\001\002\000\004\004\070\001\002" +
    "\000\004\004\uffad\001\002\000\004\046\072\001\002\000" +
    "\006\011\uffb8\037\uffb8\001\002\000\004\004\074\001\002" +
    "\000\006\002\ufff0\004\ufff0\001\002\000\004\004\133\001" +
    "\002\000\006\007\120\010\131\001\002\000\004\004\117" +
    "\001\002\000\004\047\110\001\002\000\004\050\102\001" +
    "\002\000\004\004\104\001\002\000\004\004\uffee\001\002" +
    "\000\004\010\105\001\002\000\004\011\106\001\002\000" +
    "\004\004\107\001\002\000\004\004\ufff3\001\002\000\004" +
    "\004\111\001\002\000\004\007\113\001\002\000\004\004" +
    "\uffef\001\002\000\004\011\114\001\002\000\004\004\115" +
    "\001\002\000\004\004\ufff2\001\002\000\004\004\122\001" +
    "\002\000\004\007\120\001\002\000\004\004\121\001\002" +
    "\000\004\047\ufff5\001\002\000\004\006\126\001\002\000" +
    "\004\004\124\001\002\000\004\005\032\001\002\000\006" +
    "\002\uffec\004\uffec\001\002\000\004\011\127\001\002\000" +
    "\004\004\130\001\002\000\004\004\ufff1\001\002\000\004" +
    "\004\132\001\002\000\004\050\ufff4\001\002\000\004\010" +
    "\131\001\002\000\004\004\122\001\002\000\004\004\124" +
    "\001\002\000\006\002\uffed\004\uffed\001\002\000\006\040" +
    "\226\047\225\001\002\000\004\047\301\001\002\000\004" +
    "\004\uffa1\001\002\000\004\046\273\001\002\000\004\004" +
    "\uffa7\001\002\000\004\004\uffa5\001\002\000\004\046\265" +
    "\001\002\000\004\004\uffa4\001\002\000\004\047\257\001" +
    "\002\000\022\016\206\025\205\027\203\032\204\033\201" +
    "\034\202\035\210\036\211\001\002\000\004\004\uff9f\001" +
    "\002\000\004\004\uffa2\001\002\000\004\004\uffa8\001\002" +
    "\000\006\040\226\047\225\001\002\000\004\004\177\001" +
    "\002\000\004\004\uffa3\001\002\000\004\046\170\001\002" +
    "\000\004\046\162\001\002\000\004\004\uffa6\001\002\000" +
    "\004\004\163\001\002\000\004\016\165\001\002\000\004" +
    "\004\uffdf\001\002\000\004\011\166\001\002\000\004\004" +
    "\167\001\002\000\004\004\uffe4\001\002\000\004\004\171" +
    "\001\002\000\004\034\173\001\002\000\004\004\uff92\001" +
    "\002\000\004\011\174\001\002\000\004\004\175\001\002" +
    "\000\004\004\uff99\001\002\000\004\004\124\001\002\000" +
    "\024\016\206\025\205\027\203\032\204\033\201\034\202" +
    "\035\210\036\211\045\207\001\002\000\004\004\uffa0\001" +
    "\002\000\004\004\223\001\002\000\004\004\222\001\002" +
    "\000\004\004\221\001\002\000\004\004\220\001\002\000" +
    "\004\004\217\001\002\000\004\004\216\001\002\000\004" +
    "\011\214\001\002\000\004\004\213\001\002\000\004\004" +
    "\212\001\002\000\006\040\uff97\047\uff97\001\002\000\004" +
    "\047\uff96\001\002\000\004\004\215\001\002\000\004\004" +
    "\uffa9\001\002\000\004\046\uffea\001\002\000\004\047\uffce" +
    "\001\002\000\006\040\uff9e\047\uff9e\001\002\000\004\046" +
    "\uffca\001\002\000\004\046\uff9a\001\002\000\004\046\uff9c" +
    "\001\002\000\006\002\uff8f\004\uff8f\001\002\000\010\004" +
    "\uff71\011\uff71\037\uff71\001\002\000\012\030\240\031\237" +
    "\042\241\047\235\001\002\000\004\004\230\001\002\000" +
    "\004\032\232\001\002\000\004\004\uff94\001\002\000\004" +
    "\011\233\001\002\000\004\004\234\001\002\000\004\004" +
    "\uff9d\001\002\000\016\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\041\uff72\043\uff72\001\002\000\014\011\246\012\245\013" +
    "\243\014\244\041\256\001\002\000\012\030\240\031\237" +
    "\042\241\047\235\001\002\000\012\030\240\031\237\042" +
    "\241\047\235\001\002\000\012\030\240\031\237\042\241" +
    "\047\235\001\002\000\014\011\246\012\245\013\243\014" +
    "\244\043\247\001\002\000\012\030\240\031\237\042\241" +
    "\047\235\001\002\000\012\030\240\031\237\042\241\047" +
    "\235\001\002\000\012\030\240\031\237\042\241\047\235" +
    "\001\002\000\012\030\240\031\237\042\241\047\235\001" +
    "\002\000\016\011\uff73\012\uff73\013\uff73\014\uff73\041\uff73" +
    "\043\uff73\001\002\000\016\011\uff78\012\uff78\013\243\014" +
    "\244\041\uff78\043\uff78\001\002\000\016\011\uff79\012\uff79" +
    "\013\243\014\244\041\uff79\043\uff79\001\002\000\016\011" +
    "\uff76\012\uff76\013\uff76\014\uff76\041\uff76\043\uff76\001\002" +
    "\000\016\011\uff77\012\uff77\013\uff77\014\uff77\041\uff77\043" +
    "\uff77\001\002\000\016\011\uff75\012\uff75\013\uff75\014\uff75" +
    "\041\uff75\043\uff75\001\002\000\016\011\uff74\012\uff74\013" +
    "\uff74\014\uff74\041\uff74\043\uff74\001\002\000\010\004\uff70" +
    "\011\uff70\037\uff70\001\002\000\004\004\260\001\002\000" +
    "\004\035\262\001\002\000\004\004\uff90\001\002\000\004" +
    "\011\263\001\002\000\004\004\264\001\002\000\004\004" +
    "\uff95\001\002\000\004\004\266\001\002\000\004\033\270" +
    "\001\002\000\004\004\uff93\001\002\000\004\011\271\001" +
    "\002\000\004\004\272\001\002\000\004\004\uff9b\001\002" +
    "\000\004\004\274\001\002\000\004\027\276\001\002\000" +
    "\004\004\uffc6\001\002\000\004\011\277\001\002\000\004" +
    "\004\300\001\002\000\004\004\uffc9\001\002\000\004\004" +
    "\302\001\002\000\004\025\304\001\002\000\004\004\uffc8" +
    "\001\002\000\004\011\305\001\002\000\004\004\306\001" +
    "\002\000\004\004\uffcd\001\002\000\004\004\310\001\002" +
    "\000\004\036\312\001\002\000\004\004\uff91\001\002\000" +
    "\004\011\313\001\002\000\004\004\314\001\002\000\004" +
    "\004\uff98\001\002\000\006\005\032\045\320\001\002\000" +
    "\004\004\uff86\001\002\000\006\002\uff89\004\uff89\001\002" +
    "\000\022\016\046\024\042\025\044\032\332\033\325\034" +
    "\334\035\336\036\331\001\002\000\006\011\uff82\037\uff82" +
    "\001\002\000\006\011\uff7a\037\352\001\002\000\006\011" +
    "\uff84\037\uff84\001\002\000\006\011\uff7f\037\uff7f\001\002" +
    "\000\004\044\350\001\002\000\006\011\uff7c\037\uff7c\001" +
    "\002\000\006\011\uff83\037\uff83\001\002\000\006\011\uff7d" +
    "\037\uff7d\001\002\000\004\044\346\001\002\000\004\044" +
    "\344\001\002\000\006\011\uff81\037\uff81\001\002\000\004" +
    "\044\342\001\002\000\006\011\uff7e\037\uff7e\001\002\000" +
    "\004\044\340\001\002\000\006\011\uff80\037\uff80\001\002" +
    "\000\004\047\341\001\002\000\006\011\uff8a\037\uff8a\001" +
    "\002\000\004\046\343\001\002\000\006\011\uff8c\037\uff8c" +
    "\001\002\000\006\040\226\047\225\001\002\000\006\011" +
    "\uff8e\037\uff8e\001\002\000\006\040\226\047\225\001\002" +
    "\000\006\011\uff8b\037\uff8b\001\002\000\004\046\351\001" +
    "\002\000\006\011\uff8d\037\uff8d\001\002\000\022\016\046" +
    "\024\042\025\044\032\332\033\325\034\334\035\336\036" +
    "\331\001\002\000\004\011\354\001\002\000\004\004\355" +
    "\001\002\000\004\004\uff87\001\002\000\006\011\uff7a\037" +
    "\352\001\002\000\004\011\uff7b\001\002\000\004\046\u011f" +
    "\001\002\000\020\007\120\010\131\016\206\017\u0106\020" +
    "\u0102\021\u0103\022\u0104\001\002\000\004\051\u0119\001\002" +
    "\000\004\004\uffd6\001\002\000\004\004\uffd7\001\002\000" +
    "\004\004\uffd9\001\002\000\004\004\uffd2\001\002\000\004" +
    "\004\uffd8\001\002\000\004\047\u0113\001\002\000\004\046" +
    "\u010d\001\002\000\004\004\uffda\001\002\000\004\004\376" +
    "\001\002\000\004\004\uffd5\001\002\000\004\004\uffd4\001" +
    "\002\000\022\007\120\010\131\015\u0105\016\206\017\u0106" +
    "\020\u0102\021\u0103\022\u0104\001\002\000\004\004\uffd3\001" +
    "\002\000\004\004\124\001\002\000\006\002\uffd1\004\uffd1" +
    "\001\002\000\004\004\u010c\001\002\000\004\004\u010b\001" +
    "\002\000\004\004\u010a\001\002\000\004\011\u0108\001\002" +
    "\000\004\004\u0107\001\002\000\004\046\uffe9\001\002\000" +
    "\004\004\u0109\001\002\000\004\004\uffe5\001\002\000\004" +
    "\046\uffe7\001\002\000\004\051\uffe6\001\002\000\004\047" +
    "\uffe8\001\002\000\004\004\u010e\001\002\000\004\017\u0110" +
    "\001\002\000\004\004\uffde\001\002\000\004\011\u0111\001" +
    "\002\000\004\004\u0112\001\002\000\004\004\uffe3\001\002" +
    "\000\004\004\u0114\001\002\000\004\020\u0116\001\002\000" +
    "\004\004\uffdd\001\002\000\004\011\u0117\001\002\000\004" +
    "\004\u0118\001\002\000\004\004\uffe2\001\002\000\004\004" +
    "\u011a\001\002\000\004\021\u011c\001\002\000\004\004\uffdb" +
    "\001\002\000\004\011\u011d\001\002\000\004\004\u011e\001" +
    "\002\000\004\004\uffe0\001\002\000\004\004\u0120\001\002" +
    "\000\004\022\u0122\001\002\000\004\004\uffdc\001\002\000" +
    "\004\011\u0123\001\002\000\004\004\u0124\001\002\000\004" +
    "\004\uffe1\001\002\000\016\016\206\020\u0102\022\u0104\025" +
    "\205\026\u0134\027\203\001\002\000\004\047\u0138\001\002" +
    "\000\004\004\uffc1\001\002\000\004\004\uffc5\001\002\000" +
    "\004\004\uffc3\001\002\000\004\004\uffc0\001\002\000\004" +
    "\004\uffc4\001\002\000\004\004\u012f\001\002\000\004\004" +
    "\uffbe\001\002\000\004\004\uffc2\001\002\000\020\016\206" +
    "\020\u0102\022\u0104\023\u0133\025\205\026\u0134\027\203\001" +
    "\002\000\004\004\124\001\002\000\004\004\uffbf\001\002" +
    "\000\006\002\uffbd\004\uffbd\001\002\000\004\011\u0136\001" +
    "\002\000\004\004\u0135\001\002\000\004\047\uffcc\001\002" +
    "\000\004\004\u0137\001\002\000\004\004\uffcf\001\002\000" +
    "\004\004\u013a\001\002\000\004\004\uffc7\001\002\000\004" +
    "\026\u013b\001\002\000\004\011\u013c\001\002\000\004\004" +
    "\u013d\001\002\000\004\004\uffcb\001\002\000\022\016\046" +
    "\024\u0151\025\044\032\332\033\325\034\334\035\336\036" +
    "\331\001\002\000\004\004\u0150\001\002\000\004\004\u014f" +
    "\001\002\000\020\007\u0142\016\046\020\043\022\034\024" +
    "\u0143\025\044\026\036\001\002\000\004\044\u0147\001\002" +
    "\000\004\044\u0144\001\002\000\004\046\u0145\001\002\000" +
    "\010\004\u0146\011\uffbc\037\uffbc\001\002\000\004\004\uffd0" +
    "\001\002\000\004\047\u0148\001\002\000\004\004\u0149\001" +
    "\002\000\004\004\u014a\001\002\000\004\045\320\001\002" +
    "\000\004\004\u014c\001\002\000\006\023\u0133\045\320\001" +
    "\002\000\004\004\124\001\002\000\006\002\uff88\004\uff88" +
    "\001\002\000\004\004\ufff6\001\002\000\004\004\uffeb\001" +
    "\002\000\004\044\u0152\001\002\000\004\046\u0153\001\002" +
    "\000\010\004\u0154\011\uffbc\037\uffbc\001\002\000\004\004" +
    "\uffaa\001\002\000\006\002\ufff8\004\005\001\002\000\004" +
    "\002\000\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\001\001\002\000\004\004\u015a\001\002\000\004\004\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\024\002\005\003\010\005\006\006\011\020" +
    "\013\044\014\062\003\075\012\122\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\u0154\004\u0155\005\006" +
    "\006\011\020\013\044\014\062\003\075\012\122\007\001" +
    "\001\000\022\007\023\021\020\045\016\073\024\074\025" +
    "\076\022\123\017\124\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\022\157\024\367\025\357\035\u0128\037\u0126\040\u012d\047" +
    "\137\051\u0125\053\141\055\u0127\056\u012a\057\u0129\060\u012c" +
    "\061\u012b\001\001\000\002\001\001\000\042\010\077\011" +
    "\100\016\371\017\363\022\157\023\370\024\367\025\357" +
    "\026\361\035\364\036\366\037\362\040\374\041\373\042" +
    "\365\043\372\001\001\000\006\015\316\123\315\001\001" +
    "\000\046\022\157\035\142\047\137\053\141\055\152\057" +
    "\160\100\150\101\154\103\153\104\144\106\156\110\136" +
    "\112\146\114\143\115\145\116\155\117\151\120\140\001" +
    "\001\000\012\010\077\011\100\016\074\017\076\001\001" +
    "\000\002\001\001\000\006\015\027\073\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\063\040\064\044\065\047\066\036\067" +
    "\037\070\046\071\034\001\001\000\002\001\001\000\004" +
    "\072\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\063\040\064\044\065\047\066\036\067\037" +
    "\070\046\071\064\001\001\000\004\072\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\100\017\133\001\001\000\002\001\001" +
    "\000\006\010\077\016\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\134\001\001\000\004\015\135\001\001\000\002\001" +
    "\001\000\004\121\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\226\001\001\000\046\022\157" +
    "\035\142\047\137\053\141\055\152\057\160\077\175\100" +
    "\177\103\153\104\144\106\156\110\136\112\146\114\143" +
    "\115\145\116\155\117\151\120\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\134\235\001\001" +
    "\000\004\102\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\134\254\001" +
    "\001\000\004\134\253\001\001\000\004\134\241\001\001" +
    "\000\002\001\001\000\004\134\252\001\001\000\004\134" +
    "\251\001\001\000\004\134\250\001\001\000\004\134\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\111\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\063\325\064\326" +
    "\066\322\125\332\126\336\127\323\130\334\131\327\132" +
    "\321\135\320\001\001\000\002\001\001\000\004\133\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\344\001\001\000\002" +
    "\001\001\000\004\121\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\063\325\064\326" +
    "\066\322\125\332\126\336\127\323\130\334\131\327\132" +
    "\355\135\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\010\077\011\100\016" +
    "\371\017\363\022\157\023\370\024\367\025\357\026\361" +
    "\027\377\035\364\036\366\037\362\040\374\041\373\042" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\022" +
    "\157\024\367\025\357\035\u0128\037\u0126\040\u012d\046\u012f" +
    "\047\137\051\u0125\053\141\055\u0127\056\u012a\057\u0129\060" +
    "\u0130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\063" +
    "\325\064\326\066\322\125\332\126\336\127\323\130\334" +
    "\131\327\132\321\135\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\063\040\064\044\065\047\066\036" +
    "\067\037\070\046\071\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\123" +
    "\017\124\u014a\001\001\000\002\001\001\000\006\046\u014c" +
    "\123\315\001\001\000\002\001\001\000\004\015\u014d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\u0154\004\u0156\005\006\006\011" +
    "\020\013\044\014\062\003\075\012\122\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //public ArrayList<ErrorC> errores = new ArrayList<>();

    public void syntax_error(Symbol s)
    {   
        /* if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } */

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        //errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error Recuperable"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
       /* if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } */
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        //errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


         

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERACION_ARITMETICA ::= llaveA EXPRESION llaveC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERACION_ARITMETICA ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= parentesisA EXPRESION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= raizCuadrada EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= EXPRESION sobre EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OTRO_CAMPOBC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOBC",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OTRO_CAMPOBC ::= coma CAMPOS_BC OTRO_CAMPOBC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOBC",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CAMPOS_BC ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CAMPOS_BC ::= SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CAMPOS_BC ::= SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CAMPOS_BC ::= COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CAMPOS_BC ::= MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CAMPOS_BC ::= CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CAMPOS_BC ::= IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CAMPOS_BC ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CAMPOS_BC ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPOS_BC",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OTRO_BC ::= BC_ESTANDAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_BC",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OTRO_BC ::= OTRO_BC BC_ESTANDAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_BC",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BC_ESTANDAR ::= dolar producto CAMPOS_BC OTRO_CAMPOBC menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_ESTANDAR",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BC_PRODUCTO ::= O_PETICION dolar tienda id asignacion numero dolar OTRO_BC C_TIENDA C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_PRODUCTO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BC_PRODUCTO ::= O_PETICION OTRO_BC C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BC_PRODUCTO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SUCURSAL ::= sucursal asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUCURSAL",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SIZE ::= size asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIZE",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COLOR ::= color asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MARCA ::= marca asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MARCA",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CANTIDAD ::= cantidad asignacion OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDAD",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CREAR_PRODUCTO ::= O_PETICION O_PRODUCTO OTRO_CAMPOCP C_PRODUCTO C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CREAR_PRODUCTO",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // G_SUCURSAL ::= O_SUCURSAL numero C_SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_SUCURSAL",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // G_SIZE ::= O_SIZE OPERACION_ARITMETICA C_SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_SIZE",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // G_COLOR ::= O_COLOR cadena C_COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_COLOR",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // G_MARCA ::= O_MARCA cadena C_MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_MARCA",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // G_CANTIDAD ::= O_CANTIDAD OPERACION_ARITMETICA C_CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_CANTIDAD",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // C_SUCURSAL ::= dolar sucursal menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SUCURSAL",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // O_SUCURSAL ::= dolar sucursal dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SUCURSAL",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // O_SIZE ::= dolar size dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_SIZE",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // C_SIZE ::= dolar size menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_SIZE",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // C_COLOR ::= dolar color menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // O_COLOR ::= dolar color dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_COLOR",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // C_MARCA ::= dolar marca menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_MARCA",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // O_MARCA ::= dolar marca dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_MARCA",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // C_CANTIDAD ::= dolar cantidad menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CANTIDAD",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // O_CANTIDAD ::= dolar cantidad dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CANTIDAD",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OTRO_CAMPOCP ::= CAMPO_CREARPRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOCP",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OTRO_CAMPOCP ::= OTRO_CAMPOCP CAMPO_CREARPRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOCP",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAMPO_CREARPRODUCTO ::= G_SUCURSAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAMPO_CREARPRODUCTO ::= G_SIZE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CAMPO_CREARPRODUCTO ::= G_COLOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CAMPO_CREARPRODUCTO ::= G_MARCA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CAMPO_CREARPRODUCTO ::= G_CANTIDAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CAMPO_CREARPRODUCTO ::= G_IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CAMPO_CREARPRODUCTO ::= G_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CAMPO_CREARPRODUCTO ::= G_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_CREARPRODUCTO",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // C_PRODUCTO ::= dolar producto menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PRODUCTO",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // O_PRODUCTO ::= dolar producto tipo asignacion cadena dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PRODUCTO",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OTRA_MODT ::= MODT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_MODT",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OTRA_MODT ::= OTRA_MODT MODT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_MODT",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MODT ::= dolar tienda CAMPO_MOD OTRO_CAMPOMOD menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODT",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MOD_TIENDA ::= O_PETICION OTRA_MODT C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_TIENDA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OTRO_CAMPOMOD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOMOD",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OTRO_CAMPOMOD ::= coma CAMPO_MOD OTRO_CAMPOMOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOMOD",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CAMPO_MOD ::= TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CAMPO_MOD ::= DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CAMPO_MOD ::= PROP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CAMPO_MOD ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CAMPO_MOD ::= CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CAMPO_MOD ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_MOD",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TELEFONO ::= telefono asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TELEFONO",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DIRECCION ::= direccion asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIRECCION",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PROP ::= propietario asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROP",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NOMBRE ::= nombre asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CODIGO ::= codigo asignacion numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= tipo asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIENDA ::= O_PETICION O_TIENDA OTRO_CAMPOT C_TIENDA C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIENDA",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OTRO_CAMPOT ::= CAMPO_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOT",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OTRO_CAMPOT ::= OTRO_CAMPOT CAMPO_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOT",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CAMPO_TIENDA ::= G_IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CAMPO_TIENDA ::= G_TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CAMPO_TIENDA ::= G_DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CAMPO_TIENDA ::= G_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CAMPO_TIENDA ::= G_PROPIETARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CAMPO_TIENDA ::= G_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_TIENDA",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // G_IMAGEN ::= O_IMAGEN cadena C_IMAGEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_IMAGEN",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // G_PROPIETARIO ::= O_PROPIETARIO numero C_PROPIETARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PROPIETARIO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // G_CODIGO ::= O_CODIGO numero C_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_CODIGO",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // C_IMAGEN ::= dolar img menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_IMAGEN",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // O_IMAGEN ::= dolar img dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_IMAGEN",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // C_PROPIETARIO ::= dolar propietario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PROPIETARIO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // O_PROPIETARIO ::= dolar propietario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PROPIETARIO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // C_CODIGO ::= dolar codigo menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CODIGO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // O_CODIGO ::= dolar codigo dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CODIGO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // C_TIENDA ::= dolar tienda menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TIENDA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // O_TIENDA ::= dolar tienda tipo asignacion cadena dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TIENDA",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // REGISTRO ::= O_PETICION O_CREAR OTRO_CAMPOR C_CREAR C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGISTRO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OTRO_CAMPOR ::= CAMPO_REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRO_CAMPOR ::= OTRO_CAMPOR CAMPO_REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO_CAMPOR",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAMPO_REGISTRO ::= G_DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAMPO_REGISTRO ::= G_EMAIL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CAMPO_REGISTRO ::= G_TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CAMPO_REGISTRO ::= G_PASSWORD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CAMPO_REGISTRO ::= G_APELLIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CAMPO_REGISTRO ::= G_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CAMPO_REGISTRO ::= G_ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMPO_REGISTRO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // G_EMAIL ::= O_EMAIL correo C_EMAIL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_EMAIL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // G_DIRECCION ::= O_DIRECCION cadena C_DIRECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_DIRECCION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // G_TELEFONO ::= O_TELEFONO numero C_TELEFONO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_TELEFONO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // G_APELLIDO ::= O_APELLIDO cadena C_APELLIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_APELLIDO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // G_NOMBRE ::= O_NOMBRE cadena C_NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_NOMBRE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // C_EMAIL ::= dolar email menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_EMAIL",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // C_DIRECCION ::= dolar direccion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_DIRECCION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // C_TELEFONO ::= dolar telefono menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_TELEFONO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // C_APELLIDO ::= dolar apellido menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_APELLIDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // C_NOMBRE ::= dolar nombre menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_NOMBRE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // C_CREAR ::= dolar crearUsuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_CREAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // O_EMAIL ::= dolar email dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_EMAIL",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // O_DIRECCION ::= dolar direccion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_DIRECCION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // O_TELEFONO ::= dolar telefono dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_TELEFONO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // O_APELLIDO ::= dolar apellido dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_APELLIDO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // O_NOMBRE ::= dolar nombre dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_NOMBRE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // O_CREAR ::= dolar crearUsuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_CREAR",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LOGIN ::= O_PETICION O_INGRESO G_PASSWORD G_ID C_INGRESO C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LOGIN ::= O_PETICION O_INGRESO G_ID G_PASSWORD C_INGRESO C_PETICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOGIN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // G_PASSWORD ::= O_PASSWORD clave C_PASSWORD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_PASSWORD",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // G_ID ::= O_ID numero C_ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("G_ID",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C_PETICION ::= dolar peticion menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PETICION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C_INGRESO ::= dolar inicioUsuario menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_INGRESO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C_ID ::= dolar id menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_ID",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C_PASSWORD ::= dolar password menos dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("C_PASSWORD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // O_PASSWORD ::= dolar password dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PASSWORD",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // O_ID ::= dolar id dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_ID",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // O_INGRESO ::= dolar inicioUsuario dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_INGRESO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // O_PETICION ::= dolar peticion dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("O_PETICION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OTRA_ACCION ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_ACCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OTRA_ACCION ::= ACCION OTRA_ACCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRA_ACCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ACCION ::= BC_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ACCION ::= CREAR_PRODUCTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ACCION ::= MOD_TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ACCION ::= TIENDA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ACCION ::= REGISTRO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ACCION ::= LOGIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ACCION OTRA_ACCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

